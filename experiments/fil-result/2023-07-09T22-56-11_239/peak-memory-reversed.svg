<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="940" onload="init(evt)" viewBox="0 0 1200 940" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno">
    <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
    <!--NOTES: -->
    <defs>
        <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
            <stop stop-color="#eeeeee" offset="5%"/>
            <stop stop-color="#eeeeb0" offset="95%"/>
        </linearGradient>
    </defs>
    <style type="text/css">
text { font-family:monospace; font-size:16px }
#title { text-anchor:middle; font-size:21px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
    <script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 16;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
    <rect x="0" y="0" width="100%" height="940" fill="url(#background)"/>
    <text id="title" fill="rgb(0,0,0)" x="50.0000%" y="32.00">Peak Tracked Memory Usage (482.7 MiB), Reversed</text>
    <text id="subtitle" x="50.0000%" y="64.00">Made with the Fil profiler. <a href="https://pythonspeed.com/fil/" style="text-decoration: underline;" target="_parent">Try it on your code!</a></text>
    <text id="details" fill="rgb(0,0,0)" x="10" y="84.00"> </text>
    <text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="32.00">Reset Zoom</text>
    <text id="search" fill="rgb(0,0,0)" x="1190" y="32.00">Search</text>
    <text id="matched" fill="rgb(0,0,0)" x="1190" y="927.00"> </text>
    <svg id="frames" x="10" width="1180" total_samples="504699244">
        <g>
            <title>            blockVectorAX = np.dot(blockVectorAX, eigBlockVectorX) + app (8,000,128 bytes, 1.59%)</title>
            <rect x="0.0317%" y="166" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="160224" fg:w="8000128"/>
            <text x="0.2817%" y="179.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:844 (lobpcg) (8,000,128 bytes, 1.59%)</title>
            <rect x="0.0317%" y="188" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="160224" fg:w="8000128"/>
            <text x="0.2817%" y="201.50"></text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (8,000,128 bytes, 1.59%)</title>
            <rect x="0.0317%" y="210" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="160224" fg:w="8000128"/>
            <text x="0.2817%" y="223.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (8,000,128 bytes, 1.59%)</title>
            <rect x="0.0317%" y="232" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="160224" fg:w="8000128"/>
            <text x="0.2817%" y="245.50"></text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (8,000,128 bytes, 1.59%)</title>
            <rect x="0.0317%" y="254" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="160224" fg:w="8000128"/>
            <text x="0.2817%" y="267.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (8,000,128 bytes, 1.59%)</title>
            <rect x="0.0317%" y="276" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="160224" fg:w="8000128"/>
            <text x="0.2817%" y="289.50"></text>
        </g>
        <g>
            <title>            blockVectorX = np.dot(blockVectorX, eigBlockVectorX) + pp (16,000,224 bytes, 3.17%)</title>
            <rect x="1.6169%" y="166" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="8160352" fg:w="16000224"/>
            <text x="1.8669%" y="179.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:843 (lobpcg) (16,000,224 bytes, 3.17%)</title>
            <rect x="1.6169%" y="188" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="8160352" fg:w="16000224"/>
            <text x="1.8669%" y="201.50">/h..</text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (16,000,224 bytes, 3.17%)</title>
            <rect x="1.6169%" y="210" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="8160352" fg:w="16000224"/>
            <text x="1.8669%" y="223.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (16,000,224 bytes, 3.17%)</title>
            <rect x="1.6169%" y="232" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="8160352" fg:w="16000224"/>
            <text x="1.8669%" y="245.50">/h..</text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (16,000,224 bytes, 3.17%)</title>
            <rect x="1.6169%" y="254" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="8160352" fg:w="16000224"/>
            <text x="1.8669%" y="267.50"> ..</text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (16,000,224 bytes, 3.17%)</title>
            <rect x="1.6169%" y="276" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="8160352" fg:w="16000224"/>
            <text x="1.8669%" y="289.50">te..</text>
        </g>
        <g>
            <title>                app = np.dot(activeBlockVectorAR, eigBlockVectorR) (8,000,096 bytes, 1.59%)</title>
            <rect x="4.8665%" y="166" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="24561056" fg:w="8000096"/>
            <text x="5.1165%" y="179.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:834 (lobpcg) (8,000,096 bytes, 1.59%)</title>
            <rect x="4.8665%" y="188" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="24561056" fg:w="8000096"/>
            <text x="5.1165%" y="201.50"></text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (8,000,096 bytes, 1.59%)</title>
            <rect x="4.8665%" y="210" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="24561056" fg:w="8000096"/>
            <text x="5.1165%" y="223.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (8,000,096 bytes, 1.59%)</title>
            <rect x="4.8665%" y="232" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="24561056" fg:w="8000096"/>
            <text x="5.1165%" y="245.50"></text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (8,000,096 bytes, 1.59%)</title>
            <rect x="4.8665%" y="254" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="24561056" fg:w="8000096"/>
            <text x="5.1165%" y="267.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (8,000,096 bytes, 1.59%)</title>
            <rect x="4.8665%" y="276" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="24561056" fg:w="8000096"/>
            <text x="5.1165%" y="289.50"></text>
        </g>
        <g>
            <title>&lt;__array_function__ internals&gt;:200 (dot) (40,561,248 bytes, 8.04%)</title>
            <rect x="0.0000%" y="144" width="8.0367%" height="21" fill="rgb(255,207,207)" fg:x="0" fg:w="40561248"/>
            <text x="0.2500%" y="157.50">&lt;__array..</text>
        </g>
        <g>
            <title>                pp = np.dot(activeBlockVectorR, eigBlockVectorR) (8,000,096 bytes, 1.59%)</title>
            <rect x="6.4516%" y="166" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="32561152" fg:w="8000096"/>
            <text x="6.7016%" y="179.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:831 (lobpcg) (8,000,096 bytes, 1.59%)</title>
            <rect x="6.4516%" y="188" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="32561152" fg:w="8000096"/>
            <text x="6.7016%" y="201.50"></text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (8,000,096 bytes, 1.59%)</title>
            <rect x="6.4516%" y="210" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="32561152" fg:w="8000096"/>
            <text x="6.7016%" y="223.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (8,000,096 bytes, 1.59%)</title>
            <rect x="6.4516%" y="232" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="32561152" fg:w="8000096"/>
            <text x="6.7016%" y="245.50"></text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (8,000,096 bytes, 1.59%)</title>
            <rect x="6.4516%" y="254" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="32561152" fg:w="8000096"/>
            <text x="6.7016%" y="267.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (8,000,096 bytes, 1.59%)</title>
            <rect x="6.4516%" y="276" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="32561152" fg:w="8000096"/>
            <text x="6.7016%" y="289.50"></text>
        </g>
        <g>
            <title>            data = np.empty_like(self.data, dtype=upcast(self.dtype)) (80,000,112 bytes, 15.85%)</title>
            <rect x="8.0367%" y="166" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="40561248" fg:w="80000112"/>
            <text x="8.2867%" y="179.50">            data ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_coo.py:403 (tocsr) (80,000,112 bytes, 15.85%)</title>
            <rect x="8.0367%" y="188" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="40561248" fg:w="80000112"/>
            <text x="8.2867%" y="201.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>                return convert_method(copy=copy) (80,000,112 bytes, 15.85%)</title>
            <rect x="8.0367%" y="210" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="40561248" fg:w="80000112"/>
            <text x="8.2867%" y="223.50">                r..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:376 (asformat) (80,000,112 bytes, 15.85%)</title>
            <rect x="8.0367%" y="232" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="40561248" fg:w="80000112"/>
            <text x="8.2867%" y="245.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>    return coo_matrix((vals, (i, j)), shape=(m, n)).asformat(format, (80,000,112 bytes, 15.85%)</title>
            <rect x="8.0367%" y="254" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="40561248" fg:w="80000112"/>
            <text x="8.2867%" y="267.50">    return coo_ma..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_construct.py:892 (random) (80,000,112 bytes, 15.85%)</title>
            <rect x="8.0367%" y="276" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="40561248" fg:w="80000112"/>
            <text x="8.2867%" y="289.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>m = sparse.random(1000, 100_000, density=0.01, random_state=rng, format=&quot;csr&quot;) (80,000,112 bytes, 15.85%)</title>
            <rect x="8.0367%" y="298" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="40561248" fg:w="80000112"/>
            <text x="8.2867%" y="311.50">m = sparse.random..</text>
        </g>
        <g>
            <title>test_svd_decomposition.py:12 (&lt;module&gt;) (80,000,112 bytes, 15.85%)</title>
            <rect x="8.0367%" y="320" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="40561248" fg:w="80000112"/>
            <text x="8.2867%" y="333.50">test_svd_decomposi..</text>
        </g>
        <g>
            <title>&lt;__array_function__ internals&gt;:200 (empty_like) (120,000,208 bytes, 23.78%)</title>
            <rect x="8.0367%" y="144" width="23.7766%" height="21" fill="rgb(255,176,176)" fg:x="40561248" fg:w="120000208"/>
            <text x="8.2867%" y="157.50">&lt;__array_function__ internal..</text>
        </g>
        <g>
            <title>            indices = np.empty_like(col, dtype=idx_dtype) (40,000,096 bytes, 7.93%)</title>
            <rect x="23.8878%" y="166" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="120561360" fg:w="40000096"/>
            <text x="24.1378%" y="179.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_coo.py:402 (tocsr) (40,000,096 bytes, 7.93%)</title>
            <rect x="23.8878%" y="188" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="120561360" fg:w="40000096"/>
            <text x="24.1378%" y="201.50">/home/pe..</text>
        </g>
        <g>
            <title>                return convert_method(copy=copy) (40,000,096 bytes, 7.93%)</title>
            <rect x="23.8878%" y="210" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="120561360" fg:w="40000096"/>
            <text x="24.1378%" y="223.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:376 (asformat) (40,000,096 bytes, 7.93%)</title>
            <rect x="23.8878%" y="232" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="120561360" fg:w="40000096"/>
            <text x="24.1378%" y="245.50">/home/pe..</text>
        </g>
        <g>
            <title>    return coo_matrix((vals, (i, j)), shape=(m, n)).asformat(format, (40,000,096 bytes, 7.93%)</title>
            <rect x="23.8878%" y="254" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="120561360" fg:w="40000096"/>
            <text x="24.1378%" y="267.50">    ret..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_construct.py:892 (random) (40,000,096 bytes, 7.93%)</title>
            <rect x="23.8878%" y="276" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="120561360" fg:w="40000096"/>
            <text x="24.1378%" y="289.50">/home/pe..</text>
        </g>
        <g>
            <title>m = sparse.random(1000, 100_000, density=0.01, random_state=rng, format=&quot;csr&quot;) (40,000,096 bytes, 7.93%)</title>
            <rect x="23.8878%" y="298" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="120561360" fg:w="40000096"/>
            <text x="24.1378%" y="311.50">m = spa..</text>
        </g>
        <g>
            <title>test_svd_decomposition.py:12 (&lt;module&gt;) (40,000,096 bytes, 7.93%)</title>
            <rect x="23.8878%" y="320" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="120561360" fg:w="40000096"/>
            <text x="24.1378%" y="333.50">test_svd..</text>
        </g>
        <g>
            <title> (162,729,204 bytes, 32.24%)</title>
            <rect x="0.0000%" y="122" width="32.2428%" height="21" fill="rgb(255,164,164)" fg:x="0" fg:w="162729204"/>
            <text x="0.2500%" y="135.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:672 (_compile_bytecode) (1,283,180 bytes, 0.25%)</title>
            <rect x="31.9886%" y="144" width="0.2542%" height="21" fill="rgb(255,242,242)" fg:x="161446024" fg:w="1283180"/>
            <text x="32.2386%" y="157.50"></text>
        </g>
        <g>
            <title> (1,283,180 bytes, 0.25%)</title>
            <rect x="31.9886%" y="166" width="0.2542%" height="21" fill="rgb(255,242,242)" fg:x="161446024" fg:w="1283180"/>
            <text x="32.2386%" y="179.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:1012 (get_code) (1,283,180 bytes, 0.25%)</title>
            <rect x="31.9886%" y="188" width="0.2542%" height="21" fill="rgb(255,242,242)" fg:x="161446024" fg:w="1283180"/>
            <text x="32.2386%" y="201.50"></text>
        </g>
        <g>
            <title> (1,283,180 bytes, 0.25%)</title>
            <rect x="31.9886%" y="210" width="0.2542%" height="21" fill="rgb(255,242,242)" fg:x="161446024" fg:w="1283180"/>
            <text x="32.2386%" y="223.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:879 (exec_module) (1,283,180 bytes, 0.25%)</title>
            <rect x="31.9886%" y="232" width="0.2542%" height="21" fill="rgb(255,242,242)" fg:x="161446024" fg:w="1283180"/>
            <text x="32.2386%" y="245.50"></text>
        </g>
        <g>
            <title> (1,283,180 bytes, 0.25%)</title>
            <rect x="31.9886%" y="254" width="0.2542%" height="21" fill="rgb(255,242,242)" fg:x="161446024" fg:w="1283180"/>
            <text x="32.2386%" y="267.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:688 (_load_unlocked) (1,283,180 bytes, 0.25%)</title>
            <rect x="31.9886%" y="276" width="0.2542%" height="21" fill="rgb(255,242,242)" fg:x="161446024" fg:w="1283180"/>
            <text x="32.2386%" y="289.50"></text>
        </g>
        <g>
            <title> (1,283,180 bytes, 0.25%)</title>
            <rect x="31.9886%" y="298" width="0.2542%" height="21" fill="rgb(255,242,242)" fg:x="161446024" fg:w="1283180"/>
            <text x="32.2386%" y="311.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1006 (_find_and_load_unlocked) (1,283,180 bytes, 0.25%)</title>
            <rect x="31.9886%" y="320" width="0.2542%" height="21" fill="rgb(255,242,242)" fg:x="161446024" fg:w="1283180"/>
            <text x="32.2386%" y="333.50"></text>
        </g>
        <g>
            <title> (1,283,180 bytes, 0.25%)</title>
            <rect x="31.9886%" y="342" width="0.2542%" height="21" fill="rgb(255,242,242)" fg:x="161446024" fg:w="1283180"/>
            <text x="32.2386%" y="355.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1027 (_find_and_load) (1,283,180 bytes, 0.25%)</title>
            <rect x="31.9886%" y="364" width="0.2542%" height="21" fill="rgb(255,242,242)" fg:x="161446024" fg:w="1283180"/>
            <text x="32.2386%" y="377.50"></text>
        </g>
        <g>
            <title>    VBV = blockVectorV.T.conj() @ blockVectorBV (33,554,496 bytes, 6.65%)</title>
            <rect x="32.2465%" y="122" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="162747660" fg:w="33554496"/>
            <text x="32.4965%" y="135.50">    V..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:105 (_b_orthonormalize) (33,554,496 bytes, 6.65%)</title>
            <rect x="32.2465%" y="144" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="162747660" fg:w="33554496"/>
            <text x="32.4965%" y="157.50">/home/..</text>
        </g>
        <g>
            <title>    blockVectorX, blockVectorBX, _, _ = _b_orthonormalize( (33,554,496 bytes, 6.65%)</title>
            <rect x="32.2465%" y="166" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="162747660" fg:w="33554496"/>
            <text x="32.4965%" y="179.50">    b..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:516 (lobpcg) (33,554,496 bytes, 6.65%)</title>
            <rect x="32.2465%" y="188" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="162747660" fg:w="33554496"/>
            <text x="32.4965%" y="201.50">/home/..</text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (33,554,496 bytes, 6.65%)</title>
            <rect x="32.2465%" y="210" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="162747660" fg:w="33554496"/>
            <text x="32.4965%" y="223.50">     ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (33,554,496 bytes, 6.65%)</title>
            <rect x="32.2465%" y="232" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="162747660" fg:w="33554496"/>
            <text x="32.4965%" y="245.50">/home/..</text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (33,554,496 bytes, 6.65%)</title>
            <rect x="32.2465%" y="254" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="162747660" fg:w="33554496"/>
            <text x="32.4965%" y="267.50">    u..</text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (33,554,496 bytes, 6.65%)</title>
            <rect x="32.2465%" y="276" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="162747660" fg:w="33554496"/>
            <text x="32.4965%" y="289.50">test_s..</text>
        </g>
        <g>
            <title>    blockVectorV = blockVectorV / normalization (8,000,096 bytes, 1.59%)</title>
            <rect x="38.8949%" y="122" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="196302156" fg:w="8000096"/>
            <text x="39.1449%" y="135.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:81 (_b_orthonormalize) (8,000,096 bytes, 1.59%)</title>
            <rect x="38.8949%" y="144" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="196302156" fg:w="8000096"/>
            <text x="39.1449%" y="157.50"></text>
        </g>
        <g>
            <title>        aux = _b_orthonormalize( (8,000,096 bytes, 1.59%)</title>
            <rect x="38.8949%" y="166" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="196302156" fg:w="8000096"/>
            <text x="39.1449%" y="179.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:651 (lobpcg) (8,000,096 bytes, 1.59%)</title>
            <rect x="38.8949%" y="188" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="196302156" fg:w="8000096"/>
            <text x="39.1449%" y="201.50"></text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (8,000,096 bytes, 1.59%)</title>
            <rect x="38.8949%" y="210" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="196302156" fg:w="8000096"/>
            <text x="39.1449%" y="223.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (8,000,096 bytes, 1.59%)</title>
            <rect x="38.8949%" y="232" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="196302156" fg:w="8000096"/>
            <text x="39.1449%" y="245.50"></text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (8,000,096 bytes, 1.59%)</title>
            <rect x="38.8949%" y="254" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="196302156" fg:w="8000096"/>
            <text x="39.1449%" y="267.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (8,000,096 bytes, 1.59%)</title>
            <rect x="38.8949%" y="276" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="196302156" fg:w="8000096"/>
            <text x="39.1449%" y="289.50"></text>
        </g>
        <g>
            <title>    blockVectorX, blockVectorBX, _, _ = _b_orthonormalize( (33,554,432 bytes, 6.65%)</title>
            <rect x="40.4800%" y="254" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33554432"/>
            <text x="40.7300%" y="267.50">    b..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:516 (lobpcg) (33,554,432 bytes, 6.65%)</title>
            <rect x="40.4800%" y="276" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33554432"/>
            <text x="40.7300%" y="289.50">/home/..</text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (33,554,432 bytes, 6.65%)</title>
            <rect x="40.4800%" y="298" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33554432"/>
            <text x="40.7300%" y="311.50">     ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (33,554,432 bytes, 6.65%)</title>
            <rect x="40.4800%" y="320" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33554432"/>
            <text x="40.7300%" y="333.50">/home/..</text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (33,554,432 bytes, 6.65%)</title>
            <rect x="40.4800%" y="342" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33554432"/>
            <text x="40.7300%" y="355.50">    u..</text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (33,554,432 bytes, 6.65%)</title>
            <rect x="40.4800%" y="364" width="6.6484%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33554432"/>
            <text x="40.7300%" y="377.50">test_s..</text>
        </g>
        <g>
            <title>    c, info = potrf(a1, lower=lower, overwrite_a=overwrite_a, clean=clean) (33,714,624 bytes, 6.68%)</title>
            <rect x="40.4800%" y="122" width="6.6801%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33714624"/>
            <text x="40.7300%" y="135.50">    c..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/linalg/_decomp_cholesky.py:35 (_cholesky) (33,714,624 bytes, 6.68%)</title>
            <rect x="40.4800%" y="144" width="6.6801%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33714624"/>
            <text x="40.7300%" y="157.50">/home/..</text>
        </g>
        <g>
            <title>    c, lower = _cholesky(a, lower=lower, overwrite_a=overwrite_a, clean=True, (33,714,624 bytes, 6.68%)</title>
            <rect x="40.4800%" y="166" width="6.6801%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33714624"/>
            <text x="40.7300%" y="179.50">    c..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/linalg/_decomp_cholesky.py:89 (cholesky) (33,714,624 bytes, 6.68%)</title>
            <rect x="40.4800%" y="188" width="6.6801%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33714624"/>
            <text x="40.7300%" y="201.50">/home/..</text>
        </g>
        <g>
            <title>        VBV = cholesky(VBV, overwrite_a=True) (33,714,624 bytes, 6.68%)</title>
            <rect x="40.4800%" y="210" width="6.6801%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33714624"/>
            <text x="40.7300%" y="223.50">     ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:108 (_b_orthonormalize) (33,714,624 bytes, 6.68%)</title>
            <rect x="40.4800%" y="232" width="6.6801%" height="21" fill="rgb(255,211,211)" fg:x="204302252" fg:w="33714624"/>
            <text x="40.7300%" y="245.50">/home/..</text>
        </g>
        <g>
            <title>        blockVectorR = blockVectorAX - aux (8,000,352 bytes, 1.59%)</title>
            <rect x="47.2313%" y="122" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="238375804" fg:w="8000352"/>
            <text x="47.4813%" y="135.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:571 (lobpcg) (8,000,352 bytes, 1.59%)</title>
            <rect x="47.2313%" y="144" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="238375804" fg:w="8000352"/>
            <text x="47.4813%" y="157.50"></text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (8,000,352 bytes, 1.59%)</title>
            <rect x="47.2313%" y="166" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="238375804" fg:w="8000352"/>
            <text x="47.4813%" y="179.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (8,000,352 bytes, 1.59%)</title>
            <rect x="47.2313%" y="188" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="238375804" fg:w="8000352"/>
            <text x="47.4813%" y="201.50"></text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (8,000,352 bytes, 1.59%)</title>
            <rect x="47.2313%" y="210" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="238375804" fg:w="8000352"/>
            <text x="47.4813%" y="223.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (8,000,352 bytes, 1.59%)</title>
            <rect x="47.2313%" y="232" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="238375804" fg:w="8000352"/>
            <text x="47.4813%" y="245.50"></text>
        </g>
        <g>
            <title>        aux = _b_orthonormalize( (8,000,096 bytes, 1.59%)</title>
            <rect x="48.8164%" y="166" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="246376156" fg:w="8000096"/>
            <text x="49.0664%" y="179.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:651 (lobpcg) (8,000,096 bytes, 1.59%)</title>
            <rect x="48.8164%" y="188" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="246376156" fg:w="8000096"/>
            <text x="49.0664%" y="201.50"></text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (8,000,096 bytes, 1.59%)</title>
            <rect x="48.8164%" y="210" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="246376156" fg:w="8000096"/>
            <text x="49.0664%" y="223.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (8,000,096 bytes, 1.59%)</title>
            <rect x="48.8164%" y="232" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="246376156" fg:w="8000096"/>
            <text x="49.0664%" y="245.50"></text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (8,000,096 bytes, 1.59%)</title>
            <rect x="48.8164%" y="254" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="246376156" fg:w="8000096"/>
            <text x="49.0664%" y="267.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (8,000,096 bytes, 1.59%)</title>
            <rect x="48.8164%" y="276" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="246376156" fg:w="8000096"/>
            <text x="49.0664%" y="289.50"></text>
        </g>
        <g>
            <title>        blockVectorV = blockVectorV @ VBV (16,000,192 bytes, 3.17%)</title>
            <rect x="48.8164%" y="122" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="246376156" fg:w="16000192"/>
            <text x="49.0664%" y="135.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:110 (_b_orthonormalize) (16,000,192 bytes, 3.17%)</title>
            <rect x="48.8164%" y="144" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="246376156" fg:w="16000192"/>
            <text x="49.0664%" y="157.50">/h..</text>
        </g>
        <g>
            <title>                aux = _b_orthonormalize(B, activeBlockVectorP, (8,000,096 bytes, 1.59%)</title>
            <rect x="50.4016%" y="166" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="254376252" fg:w="8000096"/>
            <text x="50.6516%" y="179.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:673 (lobpcg) (8,000,096 bytes, 1.59%)</title>
            <rect x="50.4016%" y="188" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="254376252" fg:w="8000096"/>
            <text x="50.6516%" y="201.50"></text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (8,000,096 bytes, 1.59%)</title>
            <rect x="50.4016%" y="210" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="254376252" fg:w="8000096"/>
            <text x="50.6516%" y="223.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (8,000,096 bytes, 1.59%)</title>
            <rect x="50.4016%" y="232" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="254376252" fg:w="8000096"/>
            <text x="50.6516%" y="245.50"></text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (8,000,096 bytes, 1.59%)</title>
            <rect x="50.4016%" y="254" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="254376252" fg:w="8000096"/>
            <text x="50.6516%" y="267.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (8,000,096 bytes, 1.59%)</title>
            <rect x="50.4016%" y="276" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="254376252" fg:w="8000096"/>
            <text x="50.6516%" y="289.50"></text>
        </g>
        <g>
            <title>        return XH_mat(X_matmat(x)) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="386" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="399.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:476 (matmat_XH_X) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="408" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="421.50">/h..</text>
        </g>
        <g>
            <title>            return self.__matmat_impl(X) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="430" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="443.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:525 (_matmat) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="452" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="465.50">/h..</text>
        </g>
        <g>
            <title>        Y = self._matmat(X) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="474" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="487.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:337 (matmat) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="496" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="509.50">/h..</text>
        </g>
        <g>
            <title>                return self.matmat(x) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="518" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="531.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:420 (dot) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="540" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="553.50">/h..</text>
        </g>
        <g>
            <title>        return self.dot(x) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="562" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="575.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:393 (__mul__) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="584" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="597.50">/h..</text>
        </g>
        <g>
            <title>        return self*x (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="606" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="619.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:390 (__call__) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="628" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="641.50">/h..</text>
        </g>
        <g>
            <title>        return lambda v: m(v) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="650" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="663.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:65 (&lt;lambda&gt;) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="672" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="685.50">/h..</text>
        </g>
        <g>
            <title>        activeBlockVectorAR = A(activeBlockVectorR) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="694" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="707.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:663 (lobpcg) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="716" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="729.50">/h..</text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="738" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="751.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="760" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="773.50">/h..</text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="782" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="795.50"> ..</text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (16,000,224 bytes, 3.17%)</title>
            <rect x="52.1135%" y="804" width="3.1702%" height="21" fill="rgb(255,223,223)" fg:x="263016428" fg:w="16000224"/>
            <text x="52.3635%" y="817.50">te..</text>
        </g>
        <g>
            <title>        result = np.zeros((M, n_vecs), (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="122" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="135.50">        result = np.z..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_compressed.py:497 (_mul_multivector) (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="144" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="157.50">/home/pedro/mestrado/b..</text>
        </g>
        <g>
            <title>                return self._mul_multivector(other) (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="166" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="179.50">                retur..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:532 (_mul_dispatch) (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="188" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="201.50">/home/pedro/mestrado/b..</text>
        </g>
        <g>
            <title>        return self._mul_dispatch(other) (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="210" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="223.50">        return self._..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:630 (__matmul__) (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="232" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="245.50">/home/pedro/mestrado/b..</text>
        </g>
        <g>
            <title>            return self @ other (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="254" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="267.50">            return se..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:416 (dot) (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="276" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="289.50">/home/pedro/mestrado/b..</text>
        </g>
        <g>
            <title>        return self.A.dot(X) (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="298" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="311.50">        return self.A..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:733 (_matmat) (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="320" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="333.50">/home/pedro/mestrado/b..</text>
        </g>
        <g>
            <title>        Y = self._matmat(X) (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="342" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="355.50">        Y = self._mat..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:337 (matmat) (96,000,320 bytes, 19.02%)</title>
            <rect x="52.1135%" y="364" width="19.0213%" height="21" fill="rgb(255,184,184)" fg:x="263016428" fg:w="96000320"/>
            <text x="52.3635%" y="377.50">/home/pedro/mestrado/b..</text>
        </g>
        <g>
            <title>            return self.H.matmat(X) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="386" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="399.50">            retur..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:387 (_rmatmat) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="408" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="421.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        Y = self._rmatmat(X) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="430" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="443.50">        Y = self...</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:377 (rmatmat) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="452" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="465.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        return XH_mat(X_matmat(x)) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="474" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="487.50">        return XH..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:476 (matmat_XH_X) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="496" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="509.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>            return self.__matmat_impl(X) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="518" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="531.50">            retur..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:525 (_matmat) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="540" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="553.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        Y = self._matmat(X) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="562" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="575.50">        Y = self...</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:337 (matmat) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="584" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="597.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>                return self.matmat(x) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="606" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="619.50">                r..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:420 (dot) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="628" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="641.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        return self.dot(x) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="650" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="663.50">        return se..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:393 (__mul__) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="672" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="685.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        return self*x (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="694" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="707.50">        return se..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:390 (__call__) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="716" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="729.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        return lambda v: m(v) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="738" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="751.50">        return la..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:65 (&lt;lambda&gt;) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="760" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="773.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        activeBlockVectorAR = A(activeBlockVectorR) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="782" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="795.50">        activeBlo..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:663 (lobpcg) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="804" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="817.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="826" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="839.50">        _, eigvec..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="848" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="861.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="870" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="883.50">    u, s, vt = sp..</text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (80,000,096 bytes, 15.85%)</title>
            <rect x="55.2837%" y="892" width="15.8510%" height="21" fill="rgb(255,190,190)" fg:x="279016652" fg:w="80000096"/>
            <text x="55.5337%" y="905.50">test_svd_decomposi..</text>
        </g>
        <g>
            <title>        return _concatenate(arrs, axis=-(max_depth-depth)) (1,440,288 bytes, 0.29%)</title>
            <rect x="71.1348%" y="122" width="0.2854%" height="21" fill="rgb(255,242,242)" fg:x="359016748" fg:w="1440288"/>
            <text x="71.3848%" y="135.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/numpy/core/shape_base.py:700 (_block) (1,440,288 bytes, 0.29%)</title>
            <rect x="71.1348%" y="144" width="0.2854%" height="21" fill="rgb(255,242,242)" fg:x="359016748" fg:w="1440288"/>
            <text x="71.3848%" y="157.50"></text>
        </g>
        <g>
            <title>    result = _block(arrays, list_ndim, result_ndim) (1,440,288 bytes, 0.29%)</title>
            <rect x="71.1348%" y="166" width="0.2854%" height="21" fill="rgb(255,242,242)" fg:x="359016748" fg:w="1440288"/>
            <text x="71.3848%" y="179.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/numpy/core/shape_base.py:931 (_block_concatenate) (1,440,288 bytes, 0.29%)</title>
            <rect x="71.1348%" y="188" width="0.2854%" height="21" fill="rgb(255,242,242)" fg:x="359016748" fg:w="1440288"/>
            <text x="71.3848%" y="201.50"></text>
        </g>
        <g>
            <title>        return _block_concatenate(arrays, list_ndim, result_ndim) (1,440,288 bytes, 0.29%)</title>
            <rect x="71.1348%" y="210" width="0.2854%" height="21" fill="rgb(255,242,242)" fg:x="359016748" fg:w="1440288"/>
            <text x="71.3848%" y="223.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/numpy/core/shape_base.py:887 (block) (1,440,288 bytes, 0.29%)</title>
            <rect x="71.1348%" y="232" width="0.2854%" height="21" fill="rgb(255,242,242)" fg:x="359016748" fg:w="1440288"/>
            <text x="71.3848%" y="245.50"></text>
        </g>
        <g>
            <title> (1,440,288 bytes, 0.29%)</title>
            <rect x="71.1348%" y="254" width="0.2854%" height="21" fill="rgb(255,242,242)" fg:x="359016748" fg:w="1440288"/>
            <text x="71.3848%" y="267.50"></text>
        </g>
        <g>
            <title>&lt;__array_function__ internals&gt;:200 (block) (1,440,288 bytes, 0.29%)</title>
            <rect x="71.1348%" y="276" width="0.2854%" height="21" fill="rgb(255,242,242)" fg:x="359016748" fg:w="1440288"/>
            <text x="71.3848%" y="289.50"></text>
        </g>
        <g>
            <title>        return self._with_data(self.data.copy(), copy=True) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="122" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="135.50">        return se..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:92 (copy) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="144" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="157.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>            return self.copy() (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="166" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="179.50">            retur..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:85 (conj) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="188" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="201.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        self.A = adjoint.A.T.conj() (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="210" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="223.50">        self.A = ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:742 (__init__) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="232" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="245.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>            self.__adj = _AdjointMatrixOperator(self) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="254" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="267.50">            self...</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:737 (_adjoint) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="276" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="289.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        return self._adjoint() (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="298" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="311.50">        return se..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:484 (adjoint) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="320" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="333.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>            return self.H.matmat(X) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="342" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="355.50">            retur..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:387 (_rmatmat) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="364" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="377.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        Y = self._rmatmat(X) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="386" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="399.50">        Y = self...</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:377 (rmatmat) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="408" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="421.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        return XH_mat(X_matmat(x)) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="430" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="443.50">        return XH..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:476 (matmat_XH_X) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="452" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="465.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>            return self.__matmat_impl(X) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="474" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="487.50">            retur..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:525 (_matmat) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="496" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="509.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        Y = self._matmat(X) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="518" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="531.50">        Y = self...</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:337 (matmat) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="540" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="553.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>                return self.matmat(x) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="562" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="575.50">                r..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:420 (dot) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="584" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="597.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        return self.dot(x) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="606" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="619.50">        return se..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:393 (__mul__) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="628" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="641.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        return self*x (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="650" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="663.50">        return se..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:390 (__call__) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="672" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="685.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        return lambda v: m(v) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="694" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="707.50">        return la..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:65 (&lt;lambda&gt;) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="716" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="729.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>    blockVectorAX = A(blockVectorX) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="738" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="751.50">    blockVectorAX..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:523 (lobpcg) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="760" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="773.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="782" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="795.50">        _, eigvec..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="804" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="817.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="826" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="839.50">    u, s, vt = sp..</text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (80,000,536 bytes, 15.85%)</title>
            <rect x="71.4202%" y="848" width="15.8511%" height="21" fill="rgb(255,190,190)" fg:x="360457036" fg:w="80000536"/>
            <text x="71.6702%" y="861.50">test_svd_decomposi..</text>
        </g>
        <g>
            <title>            X = random_state.standard_normal(size=(min(A.shape), k)) (8,000,096 bytes, 1.59%)</title>
            <rect x="87.2713%" y="122" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="440457572" fg:w="8000096"/>
            <text x="87.5213%" y="135.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:489 (svds) (8,000,096 bytes, 1.59%)</title>
            <rect x="87.2713%" y="144" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="440457572" fg:w="8000096"/>
            <text x="87.5213%" y="157.50"></text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (8,000,096 bytes, 1.59%)</title>
            <rect x="87.2713%" y="166" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="440457572" fg:w="8000096"/>
            <text x="87.5213%" y="179.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (8,000,096 bytes, 1.59%)</title>
            <rect x="87.2713%" y="188" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="440457572" fg:w="8000096"/>
            <text x="87.5213%" y="201.50"></text>
        </g>
        <g>
            <title>            activeBlockVectorAP = _as2d(blockVectorAP[:, activeMask]) (8,000,288 bytes, 1.59%)</title>
            <rect x="88.8564%" y="122" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="448457668" fg:w="8000288"/>
            <text x="89.1064%" y="135.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:620 (lobpcg) (8,000,288 bytes, 1.59%)</title>
            <rect x="88.8564%" y="144" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="448457668" fg:w="8000288"/>
            <text x="89.1064%" y="157.50"></text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (8,000,288 bytes, 1.59%)</title>
            <rect x="88.8564%" y="166" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="448457668" fg:w="8000288"/>
            <text x="89.1064%" y="179.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (8,000,288 bytes, 1.59%)</title>
            <rect x="88.8564%" y="188" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="448457668" fg:w="8000288"/>
            <text x="89.1064%" y="201.50"></text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (8,000,288 bytes, 1.59%)</title>
            <rect x="88.8564%" y="210" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="448457668" fg:w="8000288"/>
            <text x="89.1064%" y="223.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (8,000,288 bytes, 1.59%)</title>
            <rect x="88.8564%" y="232" width="1.5852%" height="21" fill="rgb(255,231,231)" fg:x="448457668" fg:w="8000288"/>
            <text x="89.1064%" y="245.50"></text>
        </g>
        <g>
            <title>            activeBlockVectorP = _as2d(blockVectorP[:, activeMask]) (8,000,192 bytes, 1.59%)</title>
            <rect x="90.4416%" y="122" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="456457956" fg:w="8000192"/>
            <text x="90.6916%" y="135.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:619 (lobpcg) (8,000,192 bytes, 1.59%)</title>
            <rect x="90.4416%" y="144" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="456457956" fg:w="8000192"/>
            <text x="90.6916%" y="157.50"></text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (8,000,192 bytes, 1.59%)</title>
            <rect x="90.4416%" y="166" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="456457956" fg:w="8000192"/>
            <text x="90.6916%" y="179.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (8,000,192 bytes, 1.59%)</title>
            <rect x="90.4416%" y="188" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="456457956" fg:w="8000192"/>
            <text x="90.6916%" y="201.50"></text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (8,000,192 bytes, 1.59%)</title>
            <rect x="90.4416%" y="210" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="456457956" fg:w="8000192"/>
            <text x="90.6916%" y="223.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (8,000,192 bytes, 1.59%)</title>
            <rect x="90.4416%" y="232" width="1.5851%" height="21" fill="rgb(255,231,231)" fg:x="456457956" fg:w="8000192"/>
            <text x="90.6916%" y="245.50"></text>
        </g>
        <g>
            <title>            return self.__class__((data, self.indices.copy(), (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="122" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="135.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_compressed.py:1230 (_with_data) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="144" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="157.50">/home/pe..</text>
        </g>
        <g>
            <title>        return self._with_data(self.data.copy(), copy=True) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="166" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="179.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:92 (copy) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="188" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="201.50">/home/pe..</text>
        </g>
        <g>
            <title>            return self.copy() (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="210" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="223.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:85 (conj) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="232" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="245.50">/home/pe..</text>
        </g>
        <g>
            <title>        self.A = adjoint.A.T.conj() (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="254" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="267.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:742 (__init__) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="276" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="289.50">/home/pe..</text>
        </g>
        <g>
            <title>            self.__adj = _AdjointMatrixOperator(self) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="298" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="311.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:737 (_adjoint) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="320" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="333.50">/home/pe..</text>
        </g>
        <g>
            <title>        return self._adjoint() (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="342" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="355.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:484 (adjoint) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="364" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="377.50">/home/pe..</text>
        </g>
        <g>
            <title>            return self.H.matmat(X) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="386" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="399.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:387 (_rmatmat) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="408" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="421.50">/home/pe..</text>
        </g>
        <g>
            <title>        Y = self._rmatmat(X) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="430" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="443.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:377 (rmatmat) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="452" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="465.50">/home/pe..</text>
        </g>
        <g>
            <title>        return XH_mat(X_matmat(x)) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="474" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="487.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:476 (matmat_XH_X) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="496" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="509.50">/home/pe..</text>
        </g>
        <g>
            <title>            return self.__matmat_impl(X) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="518" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="531.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:525 (_matmat) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="540" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="553.50">/home/pe..</text>
        </g>
        <g>
            <title>        Y = self._matmat(X) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="562" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="575.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:337 (matmat) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="584" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="597.50">/home/pe..</text>
        </g>
        <g>
            <title>                return self.matmat(x) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="606" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="619.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:420 (dot) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="628" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="641.50">/home/pe..</text>
        </g>
        <g>
            <title>        return self.dot(x) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="650" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="663.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:393 (__mul__) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="672" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="685.50">/home/pe..</text>
        </g>
        <g>
            <title>        return self*x (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="694" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="707.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:390 (__call__) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="716" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="729.50">/home/pe..</text>
        </g>
        <g>
            <title>        return lambda v: m(v) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="738" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="751.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:65 (&lt;lambda&gt;) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="760" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="773.50">/home/pe..</text>
        </g>
        <g>
            <title>    blockVectorAX = A(blockVectorX) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="782" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="795.50">    blo..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:523 (lobpcg) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="804" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="817.50">/home/pe..</text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="826" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="839.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="848" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="861.50">/home/pe..</text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="870" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="883.50">    u, ..</text>
        </g>
        <g>
            <title>test_svd_decomposition.py:18 (&lt;module&gt;) (40,000,144 bytes, 7.93%)</title>
            <rect x="92.0665%" y="892" width="7.9255%" height="21" fill="rgb(255,207,207)" fg:x="464658984" fg:w="40000144"/>
            <text x="92.3165%" y="905.50">test_svd..</text>
        </g>
        <g>
            <title>all (504,699,244 bytes, 100%)</title>
            <rect x="0.0000%" y="100" width="100.0000%" height="21" fill="rgb(255,100,100)" fg:x="0" fg:w="504699244"/>
            <text x="0.2500%" y="113.50"></text>
        </g>
    </svg>
</svg>