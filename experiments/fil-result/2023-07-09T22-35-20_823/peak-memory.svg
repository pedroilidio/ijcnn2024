<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2260" onload="init(evt)" viewBox="0 0 1200 2260" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno">
    <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
    <!--NOTES: -->
    <defs>
        <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
            <stop stop-color="#eeeeee" offset="5%"/>
            <stop stop-color="#eeeeb0" offset="95%"/>
        </linearGradient>
    </defs>
    <style type="text/css">
text { font-family:monospace; font-size:16px }
#title { text-anchor:middle; font-size:21px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
    <script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 16;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
    <rect x="0" y="0" width="100%" height="2260" fill="url(#background)"/>
    <text id="title" fill="rgb(0,0,0)" x="50.0000%" y="32.00">Peak Tracked Memory Usage (225.4 MiB)</text>
    <text id="subtitle" x="50.0000%" y="64.00">Made with the Fil profiler. <a href="https://pythonspeed.com/fil/" style="text-decoration: underline;" target="_parent">Try it on your code!</a></text>
    <text id="details" fill="rgb(0,0,0)" x="10" y="84.00"> </text>
    <text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="32.00">Reset Zoom</text>
    <text id="search" fill="rgb(0,0,0)" x="1190" y="32.00">Search</text>
    <text id="matched" fill="rgb(0,0,0)" x="1190" y="2247.00"> </text>
    <svg id="frames" x="10" width="1180" total_samples="235028501">
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:523 (lobpcg) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="210" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="223.50"></text>
        </g>
        <g>
            <title>    blockVectorAX = A(blockVectorX) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="232" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="245.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:65 (&lt;lambda&gt;) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="254" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="267.50"></text>
        </g>
        <g>
            <title>        return lambda v: m(v) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="276" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="289.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:390 (__call__) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="298" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="311.50"></text>
        </g>
        <g>
            <title>        return self*x (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="320" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="333.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:393 (__mul__) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="342" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="355.50"></text>
        </g>
        <g>
            <title>        return self.dot(x) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="364" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="377.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:420 (dot) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="386" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="399.50"></text>
        </g>
        <g>
            <title>                return self.matmat(x) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="408" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="421.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:337 (matmat) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="430" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="443.50"></text>
        </g>
        <g>
            <title>        Y = self._matmat(X) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="452" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="465.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:525 (_matmat) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="474" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="487.50"></text>
        </g>
        <g>
            <title>            return self.__matmat_impl(X) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="496" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="509.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:476 (matmat_XH_X) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="518" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="531.50"></text>
        </g>
        <g>
            <title>        return XH_mat(X_matmat(x)) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="540" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="553.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:377 (rmatmat) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="562" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="575.50"></text>
        </g>
        <g>
            <title>        Y = self._rmatmat(X) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="584" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="597.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:387 (_rmatmat) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="606" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="619.50"></text>
        </g>
        <g>
            <title>            return self.H.matmat(X) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="628" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="641.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:484 (adjoint) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="650" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="663.50"></text>
        </g>
        <g>
            <title>        return self._adjoint() (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="672" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="685.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:737 (_adjoint) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="694" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="707.50"></text>
        </g>
        <g>
            <title>            self.__adj = _AdjointMatrixOperator(self) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="716" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="729.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:742 (__init__) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="738" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="751.50"></text>
        </g>
        <g>
            <title>        self.A = adjoint.A.T.conj() (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="760" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="773.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:85 (conj) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="782" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="795.50"></text>
        </g>
        <g>
            <title>            return self.copy() (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="804" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="817.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:92 (copy) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="826" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="839.50"></text>
        </g>
        <g>
            <title>        return self._with_data(self.data.copy(), copy=True) (1,240,340 bytes, 0.53%)</title>
            <rect x="0.0121%" y="848" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="28360" fg:w="1240340"/>
            <text x="0.2621%" y="861.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (1,288,143 bytes, 0.55%)</title>
            <rect x="0.0121%" y="166" width="0.5481%" height="21" fill="rgb(255,238,238)" fg:x="28360" fg:w="1288143"/>
            <text x="0.2621%" y="179.50"></text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (1,288,143 bytes, 0.55%)</title>
            <rect x="0.0121%" y="188" width="0.5481%" height="21" fill="rgb(255,238,238)" fg:x="28360" fg:w="1288143"/>
            <text x="0.2621%" y="201.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_svdp.py:227 (_svdp) (80,080,096 bytes, 34.07%)</title>
            <rect x="0.5601%" y="210" width="34.0725%" height="21" fill="rgb(255,162,162)" fg:x="1316503" fg:w="80080096"/>
            <text x="0.8101%" y="223.50">/home/pedro/mestrado/biomal_repo/scripts/..</text>
        </g>
        <g>
            <title>    u = np.zeros((m, kmax + 1), order=&apos;F&apos;, dtype=typ) (80,080,096 bytes, 34.07%)</title>
            <rect x="0.5601%" y="232" width="34.0725%" height="21" fill="rgb(255,162,162)" fg:x="1316503" fg:w="80080096"/>
            <text x="0.8101%" y="245.50">    u = np.zeros((m, kmax + 1), order=&apos;F..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_svdp.py:228 (_svdp) (8,000,096 bytes, 3.40%)</title>
            <rect x="34.6327%" y="210" width="3.4039%" height="21" fill="rgb(255,222,222)" fg:x="81396599" fg:w="8000096"/>
            <text x="34.8827%" y="223.50">/h..</text>
        </g>
        <g>
            <title>    v = np.zeros((n, kmax), order=&apos;F&apos;, dtype=typ) (8,000,096 bytes, 3.40%)</title>
            <rect x="34.6327%" y="232" width="3.4039%" height="21" fill="rgb(255,222,222)" fg:x="81396599" fg:w="8000096"/>
            <text x="34.8827%" y="245.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_svdp.py:285 (_svdp) (64,192,160 bytes, 27.31%)</title>
            <rect x="38.0365%" y="210" width="27.3125%" height="21" fill="rgb(255,171,171)" fg:x="89396695" fg:w="64192160"/>
            <text x="38.2865%" y="223.50">/home/pedro/mestrado/biomal_repo..</text>
        </g>
        <g>
            <title>    work = np.empty(lwork, dtype=typ.lower()) (64,192,160 bytes, 27.31%)</title>
            <rect x="38.0365%" y="232" width="27.3125%" height="21" fill="rgb(255,171,171)" fg:x="89396695" fg:w="64192160"/>
            <text x="38.2865%" y="245.50">    work = np.empty(lwork, dtyp..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:507 (svds) (153,624,932 bytes, 65.36%)</title>
            <rect x="0.5601%" y="166" width="65.3644%" height="21" fill="rgb(255,128,128)" fg:x="1316503" fg:w="153624932"/>
            <text x="0.8101%" y="179.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-..</text>
        </g>
        <g>
            <title>        res = _svdp(A, k=k, tol=tol**2, which=which, maxiter=None, (153,624,932 bytes, 65.36%)</title>
            <rect x="0.5601%" y="188" width="65.3644%" height="21" fill="rgb(255,128,128)" fg:x="1316503" fg:w="153624932"/>
            <text x="0.8101%" y="201.50">        res = _svdp(A, k=k, tol=tol**2, which=which, maxiter=None,..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_svdp.py:307 (_svdp) (1,320,484 bytes, 0.56%)</title>
            <rect x="65.3627%" y="210" width="0.5618%" height="21" fill="rgb(255,238,238)" fg:x="153620951" fg:w="1320484"/>
            <text x="65.6127%" y="223.50"></text>
        </g>
        <g>
            <title>        u, sigma, bnd, v, info = lansvd(jobu, jobv, m, n, k, aprod, u, v, tol, (1,320,484 bytes, 0.56%)</title>
            <rect x="65.3627%" y="232" width="0.5618%" height="21" fill="rgb(255,238,238)" fg:x="153620951" fg:w="1320484"/>
            <text x="65.6127%" y="245.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_svdp.py:68 (__call__) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="254" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="267.50"></text>
        </g>
        <g>
            <title>            y[:] = self.A.rmatvec(x) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="276" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="289.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:279 (rmatvec) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="298" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="311.50"></text>
        </g>
        <g>
            <title>        y = self._rmatvec(x) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="320" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="333.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:301 (_rmatvec) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="342" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="355.50"></text>
        </g>
        <g>
            <title>            return self.H.matvec(x) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="364" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="377.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:484 (adjoint) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="386" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="399.50"></text>
        </g>
        <g>
            <title>        return self._adjoint() (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="408" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="421.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:737 (_adjoint) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="430" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="443.50"></text>
        </g>
        <g>
            <title>            self.__adj = _AdjointMatrixOperator(self) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="452" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="465.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:742 (__init__) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="474" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="487.50"></text>
        </g>
        <g>
            <title>        self.A = adjoint.A.T.conj() (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="496" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="509.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:85 (conj) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="518" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="531.50"></text>
        </g>
        <g>
            <title>            return self.copy() (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="540" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="553.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:92 (copy) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="562" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="575.50"></text>
        </g>
        <g>
            <title>        return self._with_data(self.data.copy(), copy=True) (1,240,388 bytes, 0.53%)</title>
            <rect x="65.3968%" y="584" width="0.5278%" height="21" fill="rgb(255,239,239)" fg:x="153701047" fg:w="1240388"/>
            <text x="65.6468%" y="597.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:532 (svds) (33,554,432 bytes, 14.28%)</title>
            <rect x="65.9245%" y="166" width="14.2768%" height="21" fill="rgb(255,193,193)" fg:x="154941435" fg:w="33554432"/>
            <text x="66.1745%" y="179.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>        _, eigvec = eigsh(XH_X, k=k, tol=tol ** 2, maxiter=maxiter, (33,554,432 bytes, 14.28%)</title>
            <rect x="65.9245%" y="188" width="14.2768%" height="21" fill="rgb(255,193,193)" fg:x="154941435" fg:w="33554432"/>
            <text x="66.1745%" y="201.50">        _, eigv..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:1697 (eigsh) (33,554,432 bytes, 14.28%)</title>
            <rect x="65.9245%" y="210" width="14.2768%" height="21" fill="rgb(255,193,193)" fg:x="154941435" fg:w="33554432"/>
            <text x="66.1745%" y="223.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>            params.iterate() (33,554,432 bytes, 14.28%)</title>
            <rect x="65.9245%" y="232" width="14.2768%" height="21" fill="rgb(255,193,193)" fg:x="154941435" fg:w="33554432"/>
            <text x="66.1745%" y="245.50">            par..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/arpack/arpack.py:535 (iterate) (33,554,432 bytes, 14.28%)</title>
            <rect x="65.9245%" y="254" width="14.2768%" height="21" fill="rgb(255,193,193)" fg:x="154941435" fg:w="33554432"/>
            <text x="66.1745%" y="267.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>    def iterate(self): (33,554,432 bytes, 14.28%)</title>
            <rect x="65.9245%" y="276" width="14.2768%" height="21" fill="rgb(255,193,193)" fg:x="154941435" fg:w="33554432"/>
            <text x="66.1745%" y="289.50">    def iterate..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:536 (svds) (33,555,232 bytes, 14.28%)</title>
            <rect x="80.2013%" y="166" width="14.2771%" height="21" fill="rgb(255,193,193)" fg:x="188495867" fg:w="33555232"/>
            <text x="80.4513%" y="179.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>        eigvec, _ = np.linalg.qr(eigvec) (33,555,232 bytes, 14.28%)</title>
            <rect x="80.2013%" y="188" width="14.2771%" height="21" fill="rgb(255,193,193)" fg:x="188495867" fg:w="33555232"/>
            <text x="80.4513%" y="201.50">        eigvec,..</text>
        </g>
        <g>
            <title>&lt;__array_function__ internals&gt;:200 (qr) (33,555,232 bytes, 14.28%)</title>
            <rect x="80.2013%" y="210" width="14.2771%" height="21" fill="rgb(255,193,193)" fg:x="188495867" fg:w="33555232"/>
            <text x="80.4513%" y="223.50">&lt;__array_functio..</text>
        </g>
        <g>
            <title> (33,555,232 bytes, 14.28%)</title>
            <rect x="80.2013%" y="232" width="14.2771%" height="21" fill="rgb(255,193,193)" fg:x="188495867" fg:w="33555232"/>
            <text x="80.4513%" y="245.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/numpy/linalg/linalg.py:927 (qr) (33,555,232 bytes, 14.28%)</title>
            <rect x="80.2013%" y="254" width="14.2771%" height="21" fill="rgb(255,193,193)" fg:x="188495867" fg:w="33555232"/>
            <text x="80.4513%" y="267.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>    tau = gufunc(a, signature=signature, extobj=extobj) (33,555,232 bytes, 14.28%)</title>
            <rect x="80.2013%" y="276" width="14.2771%" height="21" fill="rgb(255,193,193)" fg:x="188495867" fg:w="33555232"/>
            <text x="80.4513%" y="289.50">    tau = gufun..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:546 (svds) (8,000,192 bytes, 3.40%)</title>
            <rect x="94.4784%" y="166" width="3.4039%" height="21" fill="rgb(255,222,222)" fg:x="222051099" fg:w="8000192"/>
            <text x="94.7284%" y="179.50">/h..</text>
        </g>
        <g>
            <title>    u, s, vh = svd(Av, full_matrices=False, overwrite_a=True) (8,000,192 bytes, 3.40%)</title>
            <rect x="94.4784%" y="188" width="3.4039%" height="21" fill="rgb(255,222,222)" fg:x="222051099" fg:w="8000192"/>
            <text x="94.7284%" y="201.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/linalg/_decomp_svd.py:127 (svd) (8,000,192 bytes, 3.40%)</title>
            <rect x="94.4784%" y="210" width="3.4039%" height="21" fill="rgb(255,222,222)" fg:x="222051099" fg:w="8000192"/>
            <text x="94.7284%" y="223.50">/h..</text>
        </g>
        <g>
            <title>    u, s, v, info = gesXd(a1, compute_uv=compute_uv, lwork=lwork, (8,000,192 bytes, 3.40%)</title>
            <rect x="94.4784%" y="232" width="3.4039%" height="21" fill="rgb(255,222,222)" fg:x="222051099" fg:w="8000192"/>
            <text x="94.7284%" y="245.50"> ..</text>
        </g>
        <g>
            <title>test_svd_decomposition.py:13 (&lt;module&gt;) (230,823,459 bytes, 98.21%)</title>
            <rect x="0.0121%" y="122" width="98.2108%" height="21" fill="rgb(255,101,101)" fg:x="28360" fg:w="230823459"/>
            <text x="0.2621%" y="135.50">test_svd_decomposition.py:13 (&lt;module&gt;)</text>
        </g>
        <g>
            <title>    u, s, vt = sparse.linalg.svds(m, k=100, solver=method) (230,823,459 bytes, 98.21%)</title>
            <rect x="0.0121%" y="144" width="98.2108%" height="21" fill="rgb(255,101,101)" fg:x="28360" fg:w="230823459"/>
            <text x="0.2621%" y="157.50">    u, s, vt = sparse.linalg.svds(m, k=100, solver=method)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:561 (svds) (800,528 bytes, 0.34%)</title>
            <rect x="97.8823%" y="166" width="0.3406%" height="21" fill="rgb(255,241,241)" fg:x="230051291" fg:w="800528"/>
            <text x="98.1323%" y="179.50"></text>
        </g>
        <g>
            <title>        vh = vh @ _herm(eigvec) if jobv else None (800,528 bytes, 0.34%)</title>
            <rect x="97.8823%" y="188" width="0.3406%" height="21" fill="rgb(255,241,241)" fg:x="230051291" fg:w="800528"/>
            <text x="98.1323%" y="201.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/__init__.py:82 (&lt;module&gt;) (500,072 bytes, 0.21%)</title>
            <rect x="98.2404%" y="386" width="0.2128%" height="21" fill="rgb(255,243,243)" fg:x="230892905" fg:w="500072"/>
            <text x="98.4904%" y="399.50"></text>
        </g>
        <g>
            <title>        _fun = _deprecated(_msg.format(_key))(_fun) (500,072 bytes, 0.21%)</title>
            <rect x="98.2404%" y="408" width="0.2128%" height="21" fill="rgb(255,243,243)" fg:x="230892905" fg:w="500072"/>
            <text x="98.4904%" y="421.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1027 (_find_and_load) (559,614 bytes, 0.24%)</title>
            <rect x="98.2229%" y="166" width="0.2381%" height="21" fill="rgb(255,242,242)" fg:x="230851819" fg:w="559614"/>
            <text x="98.4729%" y="179.50"></text>
        </g>
        <g>
            <title> (559,614 bytes, 0.24%)</title>
            <rect x="98.2229%" y="188" width="0.2381%" height="21" fill="rgb(255,242,242)" fg:x="230851819" fg:w="559614"/>
            <text x="98.4729%" y="201.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1006 (_find_and_load_unlocked) (559,614 bytes, 0.24%)</title>
            <rect x="98.2229%" y="210" width="0.2381%" height="21" fill="rgb(255,242,242)" fg:x="230851819" fg:w="559614"/>
            <text x="98.4729%" y="223.50"></text>
        </g>
        <g>
            <title> (559,614 bytes, 0.24%)</title>
            <rect x="98.2229%" y="232" width="0.2381%" height="21" fill="rgb(255,242,242)" fg:x="230851819" fg:w="559614"/>
            <text x="98.4729%" y="245.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:688 (_load_unlocked) (559,614 bytes, 0.24%)</title>
            <rect x="98.2229%" y="254" width="0.2381%" height="21" fill="rgb(255,242,242)" fg:x="230851819" fg:w="559614"/>
            <text x="98.4729%" y="267.50"></text>
        </g>
        <g>
            <title> (559,614 bytes, 0.24%)</title>
            <rect x="98.2229%" y="276" width="0.2381%" height="21" fill="rgb(255,242,242)" fg:x="230851819" fg:w="559614"/>
            <text x="98.4729%" y="289.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:883 (exec_module) (559,614 bytes, 0.24%)</title>
            <rect x="98.2229%" y="298" width="0.2381%" height="21" fill="rgb(255,242,242)" fg:x="230851819" fg:w="559614"/>
            <text x="98.4729%" y="311.50"></text>
        </g>
        <g>
            <title> (559,614 bytes, 0.24%)</title>
            <rect x="98.2229%" y="320" width="0.2381%" height="21" fill="rgb(255,242,242)" fg:x="230851819" fg:w="559614"/>
            <text x="98.4729%" y="333.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:241 (_call_with_frames_removed) (559,614 bytes, 0.24%)</title>
            <rect x="98.2229%" y="342" width="0.2381%" height="21" fill="rgb(255,242,242)" fg:x="230851819" fg:w="559614"/>
            <text x="98.4729%" y="355.50"></text>
        </g>
        <g>
            <title> (559,614 bytes, 0.24%)</title>
            <rect x="98.2229%" y="364" width="0.2381%" height="21" fill="rgb(255,242,242)" fg:x="230851819" fg:w="559614"/>
            <text x="98.4729%" y="377.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_isolve/__init__.py:6 (&lt;module&gt;) (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1706" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1719.50"></text>
        </g>
        <g>
            <title>from .lgmres import lgmres (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1728" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1741.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1027 (_find_and_load) (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1750" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1763.50"></text>
        </g>
        <g>
            <title> (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1772" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1785.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1006 (_find_and_load_unlocked) (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1794" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1807.50"></text>
        </g>
        <g>
            <title> (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1816" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1829.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:688 (_load_unlocked) (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1838" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1851.50"></text>
        </g>
        <g>
            <title> (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1860" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1873.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:883 (exec_module) (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1882" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1895.50"></text>
        </g>
        <g>
            <title> (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1904" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1917.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:241 (_call_with_frames_removed) (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1926" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1939.50"></text>
        </g>
        <g>
            <title> (1,088,433 bytes, 0.46%)</title>
            <rect x="98.7751%" y="1948" width="0.4631%" height="21" fill="rgb(255,239,239)" fg:x="232149520" fg:w="1088433"/>
            <text x="99.0251%" y="1961.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_isolve/lgmres.py:7 (&lt;module&gt;) (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="1970" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="1983.50"></text>
        </g>
        <g>
            <title>from scipy.linalg import get_blas_funcs (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="1992" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="2005.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1027 (_find_and_load) (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="2014" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="2027.50"></text>
        </g>
        <g>
            <title> (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="2036" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="2049.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1006 (_find_and_load_unlocked) (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="2058" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="2071.50"></text>
        </g>
        <g>
            <title> (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="2080" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="2093.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:688 (_load_unlocked) (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="2102" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="2115.50"></text>
        </g>
        <g>
            <title> (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="2124" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="2137.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:883 (exec_module) (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="2146" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="2159.50"></text>
        </g>
        <g>
            <title> (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="2168" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="2181.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:241 (_call_with_frames_removed) (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="2190" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="2203.50"></text>
        </g>
        <g>
            <title> (1,073,535 bytes, 0.46%)</title>
            <rect x="98.7814%" y="2212" width="0.4568%" height="21" fill="rgb(255,239,239)" fg:x="232164418" fg:w="1073535"/>
            <text x="99.0314%" y="2225.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/__init__.py:120 (&lt;module&gt;) (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1442" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1455.50"></text>
        </g>
        <g>
            <title>from ._isolve import * (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1464" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1477.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1027 (_find_and_load) (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1486" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1499.50"></text>
        </g>
        <g>
            <title> (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1508" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1521.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1006 (_find_and_load_unlocked) (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1530" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1543.50"></text>
        </g>
        <g>
            <title> (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1552" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1565.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:688 (_load_unlocked) (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1574" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1587.50"></text>
        </g>
        <g>
            <title> (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1596" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1609.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:883 (exec_module) (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1618" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1631.50"></text>
        </g>
        <g>
            <title> (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1640" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1653.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:241 (_call_with_frames_removed) (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1662" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1675.50"></text>
        </g>
        <g>
            <title> (1,259,647 bytes, 0.54%)</title>
            <rect x="98.7177%" y="1684" width="0.5360%" height="21" fill="rgb(255,239,239)" fg:x="232014629" fg:w="1259647"/>
            <text x="98.9677%" y="1697.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/csgraph/__init__.py:185 (&lt;module&gt;) (1,616,470 bytes, 0.69%)</title>
            <rect x="98.7081%" y="914" width="0.6878%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1616470"/>
            <text x="98.9581%" y="927.50"></text>
        </g>
        <g>
            <title>from ._laplacian import laplacian (1,616,470 bytes, 0.69%)</title>
            <rect x="98.7081%" y="936" width="0.6878%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1616470"/>
            <text x="98.9581%" y="949.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1027 (_find_and_load) (1,616,470 bytes, 0.69%)</title>
            <rect x="98.7081%" y="958" width="0.6878%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1616470"/>
            <text x="98.9581%" y="971.50"></text>
        </g>
        <g>
            <title> (1,616,470 bytes, 0.69%)</title>
            <rect x="98.7081%" y="980" width="0.6878%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1616470"/>
            <text x="98.9581%" y="993.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1006 (_find_and_load_unlocked) (1,616,470 bytes, 0.69%)</title>
            <rect x="98.7081%" y="1002" width="0.6878%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1616470"/>
            <text x="98.9581%" y="1015.50"></text>
        </g>
        <g>
            <title> (1,616,470 bytes, 0.69%)</title>
            <rect x="98.7081%" y="1024" width="0.6878%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1616470"/>
            <text x="98.9581%" y="1037.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:688 (_load_unlocked) (1,616,470 bytes, 0.69%)</title>
            <rect x="98.7081%" y="1046" width="0.6878%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1616470"/>
            <text x="98.9581%" y="1059.50"></text>
        </g>
        <g>
            <title> (1,616,470 bytes, 0.69%)</title>
            <rect x="98.7081%" y="1068" width="0.6878%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1616470"/>
            <text x="98.9581%" y="1081.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:883 (exec_module) (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1090" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1103.50"></text>
        </g>
        <g>
            <title> (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1112" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1125.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:241 (_call_with_frames_removed) (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1134" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1147.50"></text>
        </g>
        <g>
            <title> (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1156" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1169.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/csgraph/_laplacian.py:7 (&lt;module&gt;) (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1178" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1191.50"></text>
        </g>
        <g>
            <title>from scipy.sparse.linalg import LinearOperator (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1200" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1213.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1027 (_find_and_load) (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1222" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1235.50"></text>
        </g>
        <g>
            <title> (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1244" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1257.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1006 (_find_and_load_unlocked) (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1266" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1279.50"></text>
        </g>
        <g>
            <title> (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1288" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1301.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:688 (_load_unlocked) (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1310" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1323.50"></text>
        </g>
        <g>
            <title> (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1332" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1345.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:883 (exec_module) (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1354" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1367.50"></text>
        </g>
        <g>
            <title> (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1376" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1389.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:241 (_call_with_frames_removed) (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1398" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1411.50"></text>
        </g>
        <g>
            <title> (1,594,080 bytes, 0.68%)</title>
            <rect x="98.7177%" y="1420" width="0.6782%" height="21" fill="rgb(255,237,237)" fg:x="232014629" fg:w="1594080"/>
            <text x="98.9677%" y="1433.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/__init__.py:283 (&lt;module&gt;) (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="562" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="575.50"></text>
        </g>
        <g>
            <title>from . import csgraph (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="584" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="597.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1078 (_handle_fromlist) (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="606" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="619.50"></text>
        </g>
        <g>
            <title> (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="628" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="641.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:241 (_call_with_frames_removed) (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="650" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="663.50"></text>
        </g>
        <g>
            <title> (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="672" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="685.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1027 (_find_and_load) (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="694" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="707.50"></text>
        </g>
        <g>
            <title> (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="716" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="729.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1006 (_find_and_load_unlocked) (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="738" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="751.50"></text>
        </g>
        <g>
            <title> (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="760" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="773.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:688 (_load_unlocked) (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="782" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="795.50"></text>
        </g>
        <g>
            <title> (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="804" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="817.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:883 (exec_module) (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="826" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="839.50"></text>
        </g>
        <g>
            <title> (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="848" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="861.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:241 (_call_with_frames_removed) (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="870" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="883.50"></text>
        </g>
        <g>
            <title> (1,775,925 bytes, 0.76%)</title>
            <rect x="98.7081%" y="892" width="0.7556%" height="21" fill="rgb(255,237,237)" fg:x="231992239" fg:w="1775925"/>
            <text x="98.9581%" y="905.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:2 (&lt;module&gt;) (2,936,374 bytes, 1.25%)</title>
            <rect x="98.2229%" y="122" width="1.2494%" height="21" fill="rgb(255,233,233)" fg:x="230851819" fg:w="2936374"/>
            <text x="98.4729%" y="135.50"></text>
        </g>
        <g>
            <title>from scipy import sparse (2,936,374 bytes, 1.25%)</title>
            <rect x="98.2229%" y="144" width="1.2494%" height="21" fill="rgb(255,233,233)" fg:x="230851819" fg:w="2936374"/>
            <text x="98.4729%" y="157.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1075 (_handle_fromlist) (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="166" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="179.50"></text>
        </g>
        <g>
            <title> (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="188" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="201.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/__init__.py:200 (__getattr__) (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="210" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="223.50"></text>
        </g>
        <g>
            <title>            return _importlib.import_module(f&apos;scipy.{name}&apos;) (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="232" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="245.50"></text>
        </g>
        <g>
            <title>/usr/lib/python3.10/importlib/__init__.py:126 (import_module) (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="254" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="267.50"></text>
        </g>
        <g>
            <title>    return _bootstrap._gcd_import(name[level:], package, level) (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="276" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="289.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1050 (_gcd_import) (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="298" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="311.50"></text>
        </g>
        <g>
            <title> (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="320" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="333.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1027 (_find_and_load) (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="342" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="355.50"></text>
        </g>
        <g>
            <title> (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="364" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="377.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1006 (_find_and_load_unlocked) (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="386" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="399.50"></text>
        </g>
        <g>
            <title> (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="408" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="421.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:688 (_load_unlocked) (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="430" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="443.50"></text>
        </g>
        <g>
            <title> (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="452" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="465.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:883 (exec_module) (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="474" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="487.50"></text>
        </g>
        <g>
            <title> (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="496" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="509.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:241 (_call_with_frames_removed) (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="518" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="531.50"></text>
        </g>
        <g>
            <title> (2,376,760 bytes, 1.01%)</title>
            <rect x="98.4610%" y="540" width="1.0113%" height="21" fill="rgb(255,234,234)" fg:x="231411433" fg:w="2376760"/>
            <text x="98.7110%" y="553.50"></text>
        </g>
        <g>
            <title>all (235,028,501 bytes, 100%)</title>
            <rect x="0.0000%" y="100" width="100.0000%" height="21" fill="rgb(255,100,100)" fg:x="0" fg:w="235028501"/>
            <text x="0.2500%" y="113.50"></text>
        </g>
        <g>
            <title>test_svd_decomposition.py:7 (&lt;module&gt;) (1,240,308 bytes, 0.53%)</title>
            <rect x="99.4723%" y="122" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="233788193" fg:w="1240308"/>
            <text x="99.7223%" y="135.50"></text>
        </g>
        <g>
            <title>m = sparse.random(10_000, 1000, density=0.01, random_state=rng, format=&quot;csr&quot;) (1,240,308 bytes, 0.53%)</title>
            <rect x="99.4723%" y="144" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="233788193" fg:w="1240308"/>
            <text x="99.7223%" y="157.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_construct.py:892 (random) (1,240,308 bytes, 0.53%)</title>
            <rect x="99.4723%" y="166" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="233788193" fg:w="1240308"/>
            <text x="99.7223%" y="179.50"></text>
        </g>
        <g>
            <title>    return coo_matrix((vals, (i, j)), shape=(m, n)).asformat(format, (1,240,308 bytes, 0.53%)</title>
            <rect x="99.4723%" y="188" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="233788193" fg:w="1240308"/>
            <text x="99.7223%" y="201.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:376 (asformat) (1,240,308 bytes, 0.53%)</title>
            <rect x="99.4723%" y="210" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="233788193" fg:w="1240308"/>
            <text x="99.7223%" y="223.50"></text>
        </g>
        <g>
            <title>                return convert_method(copy=copy) (1,240,308 bytes, 0.53%)</title>
            <rect x="99.4723%" y="232" width="0.5277%" height="21" fill="rgb(255,239,239)" fg:x="233788193" fg:w="1240308"/>
            <text x="99.7223%" y="245.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_coo.py:403 (tocsr) (800,112 bytes, 0.34%)</title>
            <rect x="99.6596%" y="254" width="0.3404%" height="21" fill="rgb(255,241,241)" fg:x="234228389" fg:w="800112"/>
            <text x="99.9096%" y="267.50"></text>
        </g>
        <g>
            <title>            data = np.empty_like(self.data, dtype=upcast(self.dtype)) (800,112 bytes, 0.34%)</title>
            <rect x="99.6596%" y="276" width="0.3404%" height="21" fill="rgb(255,241,241)" fg:x="234228389" fg:w="800112"/>
            <text x="99.9096%" y="289.50"></text>
        </g>
        <g>
            <title>&lt;__array_function__ internals&gt;:200 (empty_like) (800,112 bytes, 0.34%)</title>
            <rect x="99.6596%" y="298" width="0.3404%" height="21" fill="rgb(255,241,241)" fg:x="234228389" fg:w="800112"/>
            <text x="99.9096%" y="311.50"></text>
        </g>
        <g>
            <title> (800,112 bytes, 0.34%)</title>
            <rect x="99.6596%" y="320" width="0.3404%" height="21" fill="rgb(255,241,241)" fg:x="234228389" fg:w="800112"/>
            <text x="99.9096%" y="333.50"></text>
        </g>
    </svg>
</svg>