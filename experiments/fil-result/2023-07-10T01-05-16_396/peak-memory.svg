<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1820" onload="init(evt)" viewBox="0 0 1200 1820" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno">
    <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
    <!--NOTES: -->
    <defs>
        <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
            <stop stop-color="#eeeeee" offset="5%"/>
            <stop stop-color="#eeeeb0" offset="95%"/>
        </linearGradient>
    </defs>
    <style type="text/css">
text { font-family:monospace; font-size:16px }
#title { text-anchor:middle; font-size:21px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
    <script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 16;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
    <rect x="0" y="0" width="100%" height="1820" fill="url(#background)"/>
    <text id="title" fill="rgb(0,0,0)" x="50.0000%" y="32.00">Peak Tracked Memory Usage (18309.8 MiB)</text>
    <text id="subtitle" x="50.0000%" y="64.00">Made with the Fil profiler. <a href="https://pythonspeed.com/fil/" style="text-decoration: underline;" target="_parent">Try it on your code!</a></text>
    <text id="details" fill="rgb(0,0,0)" x="10" y="84.00"> </text>
    <text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="32.00">Reset Zoom</text>
    <text id="search" fill="rgb(0,0,0)" x="1190" y="32.00">Search</text>
    <text id="matched" fill="rgb(0,0,0)" x="1190" y="1807.00"> </text>
    <svg id="frames" x="10" width="1180" total_samples="19170319397">
        <g>
            <title>estimators.py:182 (&lt;module&gt;) (77,628,224 bytes, 0.40%)</title>
            <rect x="0.0018%" y="122" width="0.4049%" height="21" fill="rgb(255,240,240)" fg:x="337723" fg:w="77628224"/>
            <text x="0.2518%" y="135.50"></text>
        </g>
        <g>
            <title>    X, y = X.toarray(), y.toarray() (77,628,224 bytes, 0.40%)</title>
            <rect x="0.0018%" y="144" width="0.4049%" height="21" fill="rgb(255,240,240)" fg:x="337723" fg:w="77628224"/>
            <text x="0.2518%" y="157.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_lil.py:426 (toarray) (77,628,224 bytes, 0.40%)</title>
            <rect x="0.0018%" y="166" width="0.4049%" height="21" fill="rgb(255,240,240)" fg:x="337723" fg:w="77628224"/>
            <text x="0.2518%" y="179.50"></text>
        </g>
        <g>
            <title>        d = self._process_toarray_args(order, out) (77,628,224 bytes, 0.40%)</title>
            <rect x="0.0018%" y="188" width="0.4049%" height="21" fill="rgb(255,240,240)" fg:x="337723" fg:w="77628224"/>
            <text x="0.2518%" y="201.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:1298 (_process_toarray_args) (77,628,224 bytes, 0.40%)</title>
            <rect x="0.0018%" y="210" width="0.4049%" height="21" fill="rgb(255,240,240)" fg:x="337723" fg:w="77628224"/>
            <text x="0.2518%" y="223.50"></text>
        </g>
        <g>
            <title>            return np.zeros(self.shape, dtype=self.dtype, order=order) (77,628,224 bytes, 0.40%)</title>
            <rect x="0.0018%" y="232" width="0.4049%" height="21" fill="rgb(255,240,240)" fg:x="337723" fg:w="77628224"/>
            <text x="0.2518%" y="245.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:873 (dispatch_one_batch) (42,150,976 bytes, 0.22%)</title>
            <rect x="0.4067%" y="562" width="0.2199%" height="21" fill="rgb(255,243,243)" fg:x="77965947" fg:w="42150976"/>
            <text x="0.6567%" y="575.50"></text>
        </g>
        <g>
            <title>                islice = list(itertools.islice(iterator, big_batch_size)) (42,150,976 bytes, 0.22%)</title>
            <rect x="0.4067%" y="584" width="0.2199%" height="21" fill="rgb(255,243,243)" fg:x="77965947" fg:w="42150976"/>
            <text x="0.6567%" y="597.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:59 (&lt;genexpr&gt;) (42,150,976 bytes, 0.22%)</title>
            <rect x="0.4067%" y="606" width="0.2199%" height="21" fill="rgb(255,243,243)" fg:x="77965947" fg:w="42150976"/>
            <text x="0.6567%" y="619.50"></text>
        </g>
        <g>
            <title>        iterable_with_config = ( (42,150,976 bytes, 0.22%)</title>
            <rect x="0.4067%" y="628" width="0.2199%" height="21" fill="rgb(255,243,243)" fg:x="77965947" fg:w="42150976"/>
            <text x="0.6567%" y="641.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/compose/_column_transformer.py:661 (&lt;genexpr&gt;) (42,150,976 bytes, 0.22%)</title>
            <rect x="0.4067%" y="650" width="0.2199%" height="21" fill="rgb(255,243,243)" fg:x="77965947" fg:w="42150976"/>
            <text x="0.6567%" y="663.50"></text>
        </g>
        <g>
            <title>                    X=_safe_indexing(X, column, axis=1), (42,150,976 bytes, 0.22%)</title>
            <rect x="0.4067%" y="672" width="0.2199%" height="21" fill="rgb(255,243,243)" fg:x="77965947" fg:w="42150976"/>
            <text x="0.6567%" y="685.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/__init__.py:356 (_safe_indexing) (42,150,976 bytes, 0.22%)</title>
            <rect x="0.4067%" y="694" width="0.2199%" height="21" fill="rgb(255,243,243)" fg:x="77965947" fg:w="42150976"/>
            <text x="0.6567%" y="707.50"></text>
        </g>
        <g>
            <title>        return _array_indexing(X, indices, indices_dtype, axis=axis) (42,150,976 bytes, 0.22%)</title>
            <rect x="0.4067%" y="716" width="0.2199%" height="21" fill="rgb(255,243,243)" fg:x="77965947" fg:w="42150976"/>
            <text x="0.6567%" y="729.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/__init__.py:185 (_array_indexing) (42,150,976 bytes, 0.22%)</title>
            <rect x="0.4067%" y="738" width="0.2199%" height="21" fill="rgb(255,243,243)" fg:x="77965947" fg:w="42150976"/>
            <text x="0.6567%" y="751.50"></text>
        </g>
        <g>
            <title>    return array[key] if axis == 0 else array[:, key] (42,150,976 bytes, 0.22%)</title>
            <rect x="0.4067%" y="760" width="0.2199%" height="21" fill="rgb(255,243,243)" fg:x="77965947" fg:w="42150976"/>
            <text x="0.6567%" y="773.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:1085 (__call__) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1310" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1323.50"></text>
        </g>
        <g>
            <title>            if self.dispatch_one_batch(iterator): (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1332" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1345.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:901 (dispatch_one_batch) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1354" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1367.50"></text>
        </g>
        <g>
            <title>                self._dispatch(tasks) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1376" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1389.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:819 (_dispatch) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1398" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1411.50"></text>
        </g>
        <g>
            <title>            job = self._backend.apply_async(batch, callback=cb) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1420" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1433.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:208 (apply_async) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1442" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1455.50"></text>
        </g>
        <g>
            <title>        result = ImmediateResult(func) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1464" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1477.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:597 (__init__) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1486" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1499.50"></text>
        </g>
        <g>
            <title>        self.results = batch() (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1508" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1521.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (__call__) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1530" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1543.50"></text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1552" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1565.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (&lt;listcomp&gt;) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1574" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1587.50"></text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1596" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1609.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:123 (__call__) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1618" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1631.50"></text>
        </g>
        <g>
            <title>            return self.function(*args, **kwargs) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1640" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1653.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:186 (_parallel_build_trees) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1662" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1675.50"></text>
        </g>
        <g>
            <title>        tree.fit(X, y, sample_weight=sample_weight, check_input=False) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1684" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1697.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/tree/_classes.py:889 (fit) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1706" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1719.50"></text>
        </g>
        <g>
            <title>        super().fit( (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1728" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1741.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/tree/_classes.py:379 (fit) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1750" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1763.50"></text>
        </g>
        <g>
            <title>        builder.build(self.tree_, X, y, sample_weight) (138,122,248 bytes, 0.72%)</title>
            <rect x="0.6266%" y="1772" width="0.7205%" height="21" fill="rgb(255,237,237)" fg:x="120116923" fg:w="138122248"/>
            <text x="0.8766%" y="1785.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/tree_embedder.py:216 (fit) (13,811,858,288 bytes, 72.05%)</title>
            <rect x="0.6266%" y="1178" width="72.0481%" height="21" fill="rgb(255,122,122)" fg:x="120116923" fg:w="13811858288"/>
            <text x="0.8766%" y="1191.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/tree_embedder.py:216..</text>
        </g>
        <g>
            <title>        self.estimator_.fit(X, y) (13,811,858,288 bytes, 72.05%)</title>
            <rect x="0.6266%" y="1200" width="72.0481%" height="21" fill="rgb(255,122,122)" fg:x="120116923" fg:w="13811858288"/>
            <text x="0.8766%" y="1213.50">        self.estimator_.fit(X, y)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:473 (fit) (13,811,858,288 bytes, 72.05%)</title>
            <rect x="0.6266%" y="1222" width="72.0481%" height="21" fill="rgb(255,122,122)" fg:x="120116923" fg:w="13811858288"/>
            <text x="0.8766%" y="1235.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages..</text>
        </g>
        <g>
            <title>            trees = Parallel( (13,811,858,288 bytes, 72.05%)</title>
            <rect x="0.6266%" y="1244" width="72.0481%" height="21" fill="rgb(255,122,122)" fg:x="120116923" fg:w="13811858288"/>
            <text x="0.8766%" y="1257.50">            trees = Parallel(</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:63 (__call__) (13,811,858,288 bytes, 72.05%)</title>
            <rect x="0.6266%" y="1266" width="72.0481%" height="21" fill="rgb(255,122,122)" fg:x="120116923" fg:w="13811858288"/>
            <text x="0.8766%" y="1279.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages..</text>
        </g>
        <g>
            <title>        return super().__call__(iterable_with_config) (13,811,858,288 bytes, 72.05%)</title>
            <rect x="0.6266%" y="1288" width="72.0481%" height="21" fill="rgb(255,122,122)" fg:x="120116923" fg:w="13811858288"/>
            <text x="0.8766%" y="1301.50">        return super().__call__(iterable_with_config)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:1088 (__call__) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1310" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1323.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-package..</text>
        </g>
        <g>
            <title>            while self.dispatch_one_batch(iterator): (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1332" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1345.50">            while self.dispatch_one_batch(iterator):</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:901 (dispatch_one_batch) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1354" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1367.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-package..</text>
        </g>
        <g>
            <title>                self._dispatch(tasks) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1376" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1389.50">                self._dispatch(tasks)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:819 (_dispatch) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1398" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1411.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-package..</text>
        </g>
        <g>
            <title>            job = self._backend.apply_async(batch, callback=cb) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1420" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1433.50">            job = self._backend.apply_async(batch, callback=cb)..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:208 (apply_async) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1442" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1455.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-package..</text>
        </g>
        <g>
            <title>        result = ImmediateResult(func) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1464" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1477.50">        result = ImmediateResult(func)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:597 (__init__) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1486" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1499.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-package..</text>
        </g>
        <g>
            <title>        self.results = batch() (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1508" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1521.50">        self.results = batch()</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (__call__) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1530" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1543.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-package..</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1552" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1565.50">            return [func(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (&lt;listcomp&gt;) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1574" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1587.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-package..</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1596" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1609.50">            return [func(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:123 (__call__) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1618" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1631.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-package..</text>
        </g>
        <g>
            <title>            return self.function(*args, **kwargs) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1640" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1653.50">            return self.function(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:186 (_parallel_build_trees) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1662" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1675.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-package..</text>
        </g>
        <g>
            <title>        tree.fit(X, y, sample_weight=sample_weight, check_input=False) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1684" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1697.50">        tree.fit(X, y, sample_weight=sample_weight, check_input=False)..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/tree/_classes.py:889 (fit) (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1706" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1719.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-package..</text>
        </g>
        <g>
            <title>        super().fit( (13,673,736,040 bytes, 71.33%)</title>
            <rect x="1.3471%" y="1728" width="71.3276%" height="21" fill="rgb(255,123,123)" fg:x="258239171" fg:w="13673736040"/>
            <text x="1.5971%" y="1741.50">        super().fit(</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/tree/_classes.py:379 (fit) (13,672,196,472 bytes, 71.32%)</title>
            <rect x="1.3551%" y="1750" width="71.3196%" height="21" fill="rgb(255,123,123)" fg:x="259778739" fg:w="13672196472"/>
            <text x="1.6051%" y="1763.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-package..</text>
        </g>
        <g>
            <title>        builder.build(self.tree_, X, y, sample_weight) (13,672,196,472 bytes, 71.32%)</title>
            <rect x="1.3551%" y="1772" width="71.3196%" height="21" fill="rgb(255,123,123)" fg:x="259778739" fg:w="13672196472"/>
            <text x="1.6051%" y="1785.50">        builder.build(self.tree_, X, y, sample_weight)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_construct.py:420 (_compressed_sparse_stack) (1,056,689,976 bytes, 5.51%)</title>
            <rect x="72.6747%" y="1398" width="5.5121%" height="21" fill="rgb(255,214,214)" fg:x="13931975211" fg:w="1056689976"/>
            <text x="72.9247%" y="1411.50">/home..</text>
        </g>
        <g>
            <title>    data = np.concatenate([b.data for b in blocks]) (1,056,689,976 bytes, 5.51%)</title>
            <rect x="72.6747%" y="1420" width="5.5121%" height="21" fill="rgb(255,214,214)" fg:x="13931975211" fg:w="1056689976"/>
            <text x="72.9247%" y="1433.50">    ..</text>
        </g>
        <g>
            <title>&lt;__array_function__ internals&gt;:200 (concatenate) (1,056,689,976 bytes, 5.51%)</title>
            <rect x="72.6747%" y="1442" width="5.5121%" height="21" fill="rgb(255,214,214)" fg:x="13931975211" fg:w="1056689976"/>
            <text x="72.9247%" y="1455.50">&lt;__ar..</text>
        </g>
        <g>
            <title> (1,056,689,976 bytes, 5.51%)</title>
            <rect x="72.6747%" y="1464" width="5.5121%" height="21" fill="rgb(255,214,214)" fg:x="13931975211" fg:w="1056689976"/>
            <text x="72.9247%" y="1477.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_construct.py:424 (_compressed_sparse_stack) (528,345,036 bytes, 2.76%)</title>
            <rect x="78.1868%" y="1398" width="2.7561%" height="21" fill="rgb(255,225,225)" fg:x="14988665187" fg:w="528345036"/>
            <text x="78.4368%" y="1411.50">/..</text>
        </g>
        <g>
            <title>    indices = np.empty(data.size, dtype=idx_dtype) (528,345,036 bytes, 2.76%)</title>
            <rect x="78.1868%" y="1420" width="2.7561%" height="21" fill="rgb(255,225,225)" fg:x="14988665187" fg:w="528345036"/>
            <text x="78.4368%" y="1433.50">..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:437 (fit_transform) (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="914" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="927.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pi..</text>
        </g>
        <g>
            <title>        Xt = self._fit(X, y, **fit_params_steps) (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="936" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="949.50">        Xt = self._fit(X, y, **fit_params_steps)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:359 (_fit) (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="958" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="971.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pi..</text>
        </g>
        <g>
            <title>            X, fitted_transformer = fit_transform_one_cached( (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="980" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="993.50">            X, fitted_transformer = fit_transform_one_cached(</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/memory.py:349 (__call__) (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="1002" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="1015.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/mem..</text>
        </g>
        <g>
            <title>        return self.func(*args, **kwargs) (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="1024" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="1037.50">        return self.func(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:893 (_fit_transform_one) (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="1046" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="1059.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pi..</text>
        </g>
        <g>
            <title>            res = transformer.fit_transform(X, y, **fit_params) (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="1068" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="1081.50">            res = transformer.fit_transform(X, y, **fit_params)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (wrapped) (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="1090" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="1103.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/ut..</text>
        </g>
        <g>
            <title>        data_to_wrap = f(self, X, *args, **kwargs) (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="1112" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="1125.50">        data_to_wrap = f(self, X, *args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/base.py:881 (fit_transform) (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="1134" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="1147.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/ba..</text>
        </g>
        <g>
            <title>            return self.fit(X, y, **fit_params).transform(X) (15,397,069,468 bytes, 80.32%)</title>
            <rect x="0.6266%" y="1156" width="80.3172%" height="21" fill="rgb(255,115,115)" fg:x="120116923" fg:w="15397069468"/>
            <text x="0.8766%" y="1169.50">            return self.fit(X, y, **fit_params).transform(X)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (wrapped) (1,585,211,180 bytes, 8.27%)</title>
            <rect x="72.6747%" y="1178" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="13931975211" fg:w="1585211180"/>
            <text x="72.9247%" y="1191.50">/home/pe..</text>
        </g>
        <g>
            <title>        data_to_wrap = f(self, X, *args, **kwargs) (1,585,211,180 bytes, 8.27%)</title>
            <rect x="72.6747%" y="1200" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="13931975211" fg:w="1585211180"/>
            <text x="72.9247%" y="1213.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/tree_embedder.py:256 (transform) (1,585,211,180 bytes, 8.27%)</title>
            <rect x="72.6747%" y="1222" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="13931975211" fg:w="1585211180"/>
            <text x="72.9247%" y="1235.50">/home/pe..</text>
        </g>
        <g>
            <title>        return _hstack(np.fromiter(embeddings_iter, dtype=&apos;object&apos;)) (1,585,211,180 bytes, 8.27%)</title>
            <rect x="72.6747%" y="1244" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="13931975211" fg:w="1585211180"/>
            <text x="72.9247%" y="1257.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/tree_embedder.py:41 (_hstack) (1,585,211,180 bytes, 8.27%)</title>
            <rect x="72.6747%" y="1266" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="13931975211" fg:w="1585211180"/>
            <text x="72.9247%" y="1279.50">/home/pe..</text>
        </g>
        <g>
            <title>        return scipy.sparse.hstack(Xs, format=&apos;csr&apos;) (1,585,211,180 bytes, 8.27%)</title>
            <rect x="72.6747%" y="1288" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="13931975211" fg:w="1585211180"/>
            <text x="72.9247%" y="1301.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_construct.py:535 (hstack) (1,585,211,180 bytes, 8.27%)</title>
            <rect x="72.6747%" y="1310" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="13931975211" fg:w="1585211180"/>
            <text x="72.9247%" y="1323.50">/home/pe..</text>
        </g>
        <g>
            <title>    return bmat([blocks], format=format, dtype=dtype) (1,585,211,180 bytes, 8.27%)</title>
            <rect x="72.6747%" y="1332" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="13931975211" fg:w="1585211180"/>
            <text x="72.9247%" y="1345.50">    ret..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_construct.py:632 (bmat) (1,585,211,180 bytes, 8.27%)</title>
            <rect x="72.6747%" y="1354" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="13931975211" fg:w="1585211180"/>
            <text x="72.9247%" y="1367.50">/home/pe..</text>
        </g>
        <g>
            <title>        A = _compressed_sparse_stack(blocks[:, 0], 0) (1,585,211,180 bytes, 8.27%)</title>
            <rect x="72.6747%" y="1376" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="13931975211" fg:w="1585211180"/>
            <text x="72.9247%" y="1389.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:516 (lobpcg) (67,108,864 bytes, 0.35%)</title>
            <rect x="80.9640%" y="1090" width="0.3501%" height="21" fill="rgb(255,241,241)" fg:x="15521050399" fg:w="67108864"/>
            <text x="81.2140%" y="1103.50"></text>
        </g>
        <g>
            <title>    blockVectorX, blockVectorBX, _, _ = _b_orthonormalize( (67,108,864 bytes, 0.35%)</title>
            <rect x="80.9640%" y="1112" width="0.3501%" height="21" fill="rgb(255,241,241)" fg:x="15521050399" fg:w="67108864"/>
            <text x="81.2140%" y="1125.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_compressed.py:1230 (_with_data) (528,345,084 bytes, 2.76%)</title>
            <rect x="86.8261%" y="1750" width="2.7561%" height="21" fill="rgb(255,225,225)" fg:x="16644849679" fg:w="528345084"/>
            <text x="87.0761%" y="1763.50">/..</text>
        </g>
        <g>
            <title>            return self.__class__((data, self.indices.copy(), (528,345,084 bytes, 2.76%)</title>
            <rect x="86.8261%" y="1772" width="2.7561%" height="21" fill="rgb(255,225,225)" fg:x="16644849679" fg:w="528345084"/>
            <text x="87.0761%" y="1785.50">..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (1,652,320,092 bytes, 8.62%)</title>
            <rect x="80.9640%" y="1046" width="8.6192%" height="21" fill="rgb(255,205,205)" fg:x="15521050399" fg:w="1652320092"/>
            <text x="81.2140%" y="1059.50">/home/pe..</text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (1,652,320,092 bytes, 8.62%)</title>
            <rect x="80.9640%" y="1068" width="8.6192%" height="21" fill="rgb(255,205,205)" fg:x="15521050399" fg:w="1652320092"/>
            <text x="81.2140%" y="1081.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:523 (lobpcg) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1090" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1103.50">/home/pe..</text>
        </g>
        <g>
            <title>    blockVectorAX = A(blockVectorX) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1112" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1125.50">    blo..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:65 (&lt;lambda&gt;) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1134" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1147.50">/home/pe..</text>
        </g>
        <g>
            <title>        return lambda v: m(v) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1156" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1169.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:390 (__call__) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1178" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1191.50">/home/pe..</text>
        </g>
        <g>
            <title>        return self*x (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1200" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1213.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:393 (__mul__) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1222" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1235.50">/home/pe..</text>
        </g>
        <g>
            <title>        return self.dot(x) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1244" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1257.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:420 (dot) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1266" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1279.50">/home/pe..</text>
        </g>
        <g>
            <title>                return self.matmat(x) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1288" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1301.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:337 (matmat) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1310" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1323.50">/home/pe..</text>
        </g>
        <g>
            <title>        Y = self._matmat(X) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1332" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1345.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:525 (_matmat) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1354" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1367.50">/home/pe..</text>
        </g>
        <g>
            <title>            return self.__matmat_impl(X) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1376" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1389.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:476 (matmat_XH_X) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1398" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1411.50">/home/pe..</text>
        </g>
        <g>
            <title>        return XH_mat(X_matmat(x)) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1420" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1433.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:377 (rmatmat) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1442" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1455.50">/home/pe..</text>
        </g>
        <g>
            <title>        Y = self._rmatmat(X) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1464" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1477.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:387 (_rmatmat) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1486" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1499.50">/home/pe..</text>
        </g>
        <g>
            <title>            return self.H.matmat(X) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1508" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1521.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:484 (adjoint) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1530" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1543.50">/home/pe..</text>
        </g>
        <g>
            <title>        return self._adjoint() (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1552" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1565.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:737 (_adjoint) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1574" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1587.50">/home/pe..</text>
        </g>
        <g>
            <title>            self.__adj = _AdjointMatrixOperator(self) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1596" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1609.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:742 (__init__) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1618" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1631.50">/home/pe..</text>
        </g>
        <g>
            <title>        self.A = adjoint.A.T.conj() (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1640" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1653.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:85 (conj) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1662" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1675.50">/home/pe..</text>
        </g>
        <g>
            <title>            return self.copy() (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1684" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1697.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:92 (copy) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1706" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1719.50">/home/pe..</text>
        </g>
        <g>
            <title>        return self._with_data(self.data.copy(), copy=True) (1,585,211,228 bytes, 8.27%)</title>
            <rect x="81.3140%" y="1728" width="8.2691%" height="21" fill="rgb(255,206,206)" fg:x="15588159263" fg:w="1585211228"/>
            <text x="81.5640%" y="1741.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:539 (svds) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1046" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1059.50">/h..</text>
        </g>
        <g>
            <title>    Av = X_matmat(eigvec) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1068" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1081.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:377 (rmatmat) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1090" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1103.50">/h..</text>
        </g>
        <g>
            <title>        Y = self._rmatmat(X) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1112" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1125.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:387 (_rmatmat) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1134" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1147.50">/h..</text>
        </g>
        <g>
            <title>            return self.H.matmat(X) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1156" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1169.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:337 (matmat) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1178" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1191.50">/h..</text>
        </g>
        <g>
            <title>        Y = self._matmat(X) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1200" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1213.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:733 (_matmat) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1222" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1235.50">/h..</text>
        </g>
        <g>
            <title>        return self.A.dot(X) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1244" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1257.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:416 (dot) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1266" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1279.50">/h..</text>
        </g>
        <g>
            <title>            return self @ other (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1288" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1301.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:630 (__matmul__) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1310" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1323.50">/h..</text>
        </g>
        <g>
            <title>        return self._mul_dispatch(other) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1332" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1345.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:532 (_mul_dispatch) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1354" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1367.50">/h..</text>
        </g>
        <g>
            <title>                return self._mul_multivector(other) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1376" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1389.50"> ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_compressed.py:497 (_mul_multivector) (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1398" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1411.50">/h..</text>
        </g>
        <g>
            <title>        result = np.zeros((M, n_vecs), (660,750,496 bytes, 3.45%)</title>
            <rect x="89.6014%" y="1420" width="3.4467%" height="21" fill="rgb(255,222,222)" fg:x="17176883147" fg:w="660750496"/>
            <text x="89.8514%" y="1433.50"> ..</text>
        </g>
        <g>
            <title>estimators.py:185 (&lt;module&gt;) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="122" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="135.50">estimators.py:185 (&lt;module&gt;)</text>
        </g>
        <g>
            <title>    cascade = cascade_weak_label_tree_embedder.fit(X, y) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="144" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="157.50">    cascade = cascade_weak_label_tree_embedder.fit(X, y)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/cascade.py:327 (fit) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="166" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="179.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/cascade.py:327 (fit)</text>
        </g>
        <g>
            <title>        Xt, yt = self._fit(X, y, **fit_params_steps) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="188" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="201.50">        Xt, yt = self._fit(X, y, **fit_params_steps)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/cascade.py:405 (_fit) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="210" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="223.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/cascade.py:405 (_fit)</text>
        </g>
        <g>
            <title>                new_X, fitted_transformer = fit_transform_one_cached( (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="232" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="245.50">                new_X, fitted_transformer = fit_transform_one_cached(</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/memory.py:349 (__call__) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="254" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="267.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/memory.py:349 (__call__)</text>
        </g>
        <g>
            <title>        return self.func(*args, **kwargs) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="276" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="289.50">        return self.func(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:893 (_fit_transform_one) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="298" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="311.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:893 (_fit_tran..</text>
        </g>
        <g>
            <title>            res = transformer.fit_transform(X, y, **fit_params) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="320" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="333.50">            res = transformer.fit_transform(X, y, **fit_params)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (wrapped) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="342" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="355.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (..</text>
        </g>
        <g>
            <title>        data_to_wrap = f(self, X, *args, **kwargs) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="364" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="377.50">        data_to_wrap = f(self, X, *args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/compose/_column_transformer.py:727 (fit_transform) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="386" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="399.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/compose/_column_transforme..</text>
        </g>
        <g>
            <title>        result = self._fit_transform(X, y, _fit_transform_one) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="408" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="421.50">        result = self._fit_transform(X, y, _fit_transform_one)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/compose/_column_transformer.py:658 (_fit_transform) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="430" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="443.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/compose/_column_transforme..</text>
        </g>
        <g>
            <title>            return Parallel(n_jobs=self.n_jobs)( (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="452" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="465.50">            return Parallel(n_jobs=self.n_jobs)(</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:63 (__call__) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="474" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="487.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:63 (__ca..</text>
        </g>
        <g>
            <title>        return super().__call__(iterable_with_config) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="496" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="509.50">        return super().__call__(iterable_with_config)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:1085 (__call__) (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="518" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="531.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:1085 (__call__)</text>
        </g>
        <g>
            <title>            if self.dispatch_one_batch(iterator): (19,081,175,232 bytes, 99.53%)</title>
            <rect x="0.4067%" y="540" width="99.5350%" height="21" fill="rgb(255,100,100)" fg:x="77965947" fg:w="19081175232"/>
            <text x="0.6567%" y="553.50">            if self.dispatch_one_batch(iterator):</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:901 (dispatch_one_batch) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="562" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="575.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:901 (dispatch_o..</text>
        </g>
        <g>
            <title>                self._dispatch(tasks) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="584" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="597.50">                self._dispatch(tasks)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:819 (_dispatch) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="606" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="619.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:819 (_dispatch)</text>
        </g>
        <g>
            <title>            job = self._backend.apply_async(batch, callback=cb) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="628" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="641.50">            job = self._backend.apply_async(batch, callback=cb)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:208 (apply_async) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="650" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="663.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:208 (..</text>
        </g>
        <g>
            <title>        result = ImmediateResult(func) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="672" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="685.50">        result = ImmediateResult(func)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:597 (__init__) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="694" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="707.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:597 (..</text>
        </g>
        <g>
            <title>        self.results = batch() (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="716" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="729.50">        self.results = batch()</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (__call__) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="738" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="751.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (__call__)</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="760" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="773.50">            return [func(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (&lt;listcomp&gt;) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="782" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="795.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (&lt;listcomp&gt;)</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="804" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="817.50">            return [func(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:123 (__call__) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="826" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="839.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:123 (__c..</text>
        </g>
        <g>
            <title>            return self.function(*args, **kwargs) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="848" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="861.50">            return self.function(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:893 (_fit_transform_one) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="870" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="883.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:893 (_fit_tran..</text>
        </g>
        <g>
            <title>            res = transformer.fit_transform(X, y, **fit_params) (19,039,024,256 bytes, 99.32%)</title>
            <rect x="0.6266%" y="892" width="99.3151%" height="21" fill="rgb(255,100,100)" fg:x="120116923" fg:w="19039024256"/>
            <text x="0.8766%" y="905.50">            res = transformer.fit_transform(X, y, **fit_params)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:445 (fit_transform) (3,641,954,788 bytes, 19.00%)</title>
            <rect x="80.9438%" y="914" width="18.9979%" height="21" fill="rgb(255,184,184)" fg:x="15517186391" fg:w="3641954788"/>
            <text x="81.1938%" y="927.50">/home/pedro/mestrado/b..</text>
        </g>
        <g>
            <title>                return last_step.fit_transform(Xt, y, **fit_params_last_step) (3,641,954,788 bytes, 19.00%)</title>
            <rect x="80.9438%" y="936" width="18.9979%" height="21" fill="rgb(255,184,184)" fg:x="15517186391" fg:w="3641954788"/>
            <text x="81.1938%" y="949.50">                retur..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (wrapped) (3,641,954,788 bytes, 19.00%)</title>
            <rect x="80.9438%" y="958" width="18.9979%" height="21" fill="rgb(255,184,184)" fg:x="15517186391" fg:w="3641954788"/>
            <text x="81.1938%" y="971.50">/home/pedro/mestrado/b..</text>
        </g>
        <g>
            <title>        data_to_wrap = f(self, X, *args, **kwargs) (3,641,954,788 bytes, 19.00%)</title>
            <rect x="80.9438%" y="980" width="18.9979%" height="21" fill="rgb(255,184,184)" fg:x="15517186391" fg:w="3641954788"/>
            <text x="81.1938%" y="993.50">        data_to_wrap ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/_lobpcg_truncated_svd.py:56 (fit_transform) (3,641,603,436 bytes, 19.00%)</title>
            <rect x="80.9456%" y="1002" width="18.9960%" height="21" fill="rgb(255,184,184)" fg:x="15517537743" fg:w="3641603436"/>
            <text x="81.1956%" y="1015.50">/home/pedro/mestrado/b..</text>
        </g>
        <g>
            <title>        U, Sigma, VT = svds(X, k=self.n_components, tol=self.tol, v0=v0, solver=&quot;lobpcg&quot;) (3,641,603,436 bytes, 19.00%)</title>
            <rect x="80.9456%" y="1024" width="18.9960%" height="21" fill="rgb(255,184,184)" fg:x="15517537743" fg:w="3641603436"/>
            <text x="81.1956%" y="1037.50">        U, Sigma, VT ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:546 (svds) (1,321,507,536 bytes, 6.89%)</title>
            <rect x="93.0482%" y="1046" width="6.8935%" height="21" fill="rgb(255,210,210)" fg:x="17837633643" fg:w="1321507536"/>
            <text x="93.2982%" y="1059.50">/home/..</text>
        </g>
        <g>
            <title>    u, s, vh = svd(Av, full_matrices=False, overwrite_a=True) (1,321,507,536 bytes, 6.89%)</title>
            <rect x="93.0482%" y="1068" width="6.8935%" height="21" fill="rgb(255,210,210)" fg:x="17837633643" fg:w="1321507536"/>
            <text x="93.2982%" y="1081.50">    u..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/linalg/_decomp_svd.py:127 (svd) (1,321,507,536 bytes, 6.89%)</title>
            <rect x="93.0482%" y="1090" width="6.8935%" height="21" fill="rgb(255,210,210)" fg:x="17837633643" fg:w="1321507536"/>
            <text x="93.2982%" y="1103.50">/home/..</text>
        </g>
        <g>
            <title>    u, s, v, info = gesXd(a1, compute_uv=compute_uv, lwork=lwork, (1,321,507,536 bytes, 6.89%)</title>
            <rect x="93.0482%" y="1112" width="6.8935%" height="21" fill="rgb(255,210,210)" fg:x="17837633643" fg:w="1321507536"/>
            <text x="93.2982%" y="1125.50">    u..</text>
        </g>
        <g>
            <title>all (19,170,319,397 bytes, 100%)</title>
            <rect x="0.0000%" y="100" width="100.0000%" height="21" fill="rgb(255,100,100)" fg:x="0" fg:w="19170319397"/>
            <text x="0.2500%" y="113.50"></text>
        </g>
    </svg>
</svg>