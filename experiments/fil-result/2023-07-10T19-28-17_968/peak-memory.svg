<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1908" onload="init(evt)" viewBox="0 0 1200 1908" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno">
    <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
    <!--NOTES: -->
    <defs>
        <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
            <stop stop-color="#eeeeee" offset="5%"/>
            <stop stop-color="#eeeeb0" offset="95%"/>
        </linearGradient>
    </defs>
    <style type="text/css">
text { font-family:monospace; font-size:16px }
#title { text-anchor:middle; font-size:21px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
    <script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 16;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
    <rect x="0" y="0" width="100%" height="1908" fill="url(#background)"/>
    <text id="title" fill="rgb(0,0,0)" x="50.0000%" y="32.00">Peak Tracked Memory Usage (4094.4 MiB)</text>
    <text id="subtitle" x="50.0000%" y="64.00">Made with the Fil profiler. <a href="https://pythonspeed.com/fil/" style="text-decoration: underline;" target="_parent">Try it on your code!</a></text>
    <text id="details" fill="rgb(0,0,0)" x="10" y="84.00"> </text>
    <text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="32.00">Reset Zoom</text>
    <text id="search" fill="rgb(0,0,0)" x="1190" y="32.00">Search</text>
    <text id="matched" fill="rgb(0,0,0)" x="1190" y="1895.00"> </text>
    <svg id="frames" x="10" width="1180" total_samples="4262077847">
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/tree_embedder.py:216 (fit) (642,563,360 bytes, 15.08%)</title>
            <rect x="0.1515%" y="1266" width="15.0763%" height="21" fill="rgb(255,191,191)" fg:x="6454982" fg:w="642563360"/>
            <text x="0.4015%" y="1279.50">/home/pedro/mestr..</text>
        </g>
        <g>
            <title>        self.estimator_.fit(X, y) (642,563,360 bytes, 15.08%)</title>
            <rect x="0.1515%" y="1288" width="15.0763%" height="21" fill="rgb(255,191,191)" fg:x="6454982" fg:w="642563360"/>
            <text x="0.4015%" y="1301.50">        self.est..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:473 (fit) (642,479,360 bytes, 15.07%)</title>
            <rect x="0.1534%" y="1310" width="15.0743%" height="21" fill="rgb(255,191,191)" fg:x="6538982" fg:w="642479360"/>
            <text x="0.4034%" y="1323.50">/home/pedro/mestr..</text>
        </g>
        <g>
            <title>            trees = Parallel( (642,479,360 bytes, 15.07%)</title>
            <rect x="0.1534%" y="1332" width="15.0743%" height="21" fill="rgb(255,191,191)" fg:x="6538982" fg:w="642479360"/>
            <text x="0.4034%" y="1345.50">            tree..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:63 (__call__) (642,479,360 bytes, 15.07%)</title>
            <rect x="0.1534%" y="1354" width="15.0743%" height="21" fill="rgb(255,191,191)" fg:x="6538982" fg:w="642479360"/>
            <text x="0.4034%" y="1367.50">/home/pedro/mestr..</text>
        </g>
        <g>
            <title>        return super().__call__(iterable_with_config) (642,479,360 bytes, 15.07%)</title>
            <rect x="0.1534%" y="1376" width="15.0743%" height="21" fill="rgb(255,191,191)" fg:x="6538982" fg:w="642479360"/>
            <text x="0.4034%" y="1389.50">        return s..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:1088 (__call__) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1398" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1411.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>            while self.dispatch_one_batch(iterator): (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1420" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1433.50">            whi..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:901 (dispatch_one_batch) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1442" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1455.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>                self._dispatch(tasks) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1464" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1477.50">               ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:819 (_dispatch) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1486" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1499.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>            job = self._backend.apply_async(batch, callback=cb) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1508" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1521.50">            job..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:208 (apply_async) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1530" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1543.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>        result = ImmediateResult(func) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1552" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1565.50">        result ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:597 (__init__) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1574" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1587.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>        self.results = batch() (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1596" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1609.50">        self.re..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (__call__) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1618" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1631.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1640" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1653.50">            ret..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (&lt;listcomp&gt;) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1662" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1675.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1684" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1697.50">            ret..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:123 (__call__) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1706" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1719.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>            return self.function(*args, **kwargs) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1728" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1741.50">            ret..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:186 (_parallel_build_trees) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1750" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1763.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>        tree.fit(X, y, sample_weight=sample_weight, check_input=False) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1772" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1785.50">        tree.fi..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/tree/_classes.py:889 (fit) (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1794" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1807.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>        super().fit( (636,101,800 bytes, 14.92%)</title>
            <rect x="0.3031%" y="1816" width="14.9247%" height="21" fill="rgb(255,192,192)" fg:x="12916542" fg:w="636101800"/>
            <text x="0.5531%" y="1829.50">        super()..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/tree/_classes.py:379 (fit) (635,035,240 bytes, 14.90%)</title>
            <rect x="0.3281%" y="1838" width="14.8997%" height="21" fill="rgb(255,192,192)" fg:x="13983102" fg:w="635035240"/>
            <text x="0.5781%" y="1851.50">/home/pedro/mest..</text>
        </g>
        <g>
            <title>        builder.build(self.tree_, X, y, sample_weight) (635,035,240 bytes, 14.90%)</title>
            <rect x="0.3281%" y="1860" width="14.8997%" height="21" fill="rgb(255,192,192)" fg:x="13983102" fg:w="635035240"/>
            <text x="0.5781%" y="1873.50">        builder..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_construct.py:420 (_compressed_sparse_stack) (37,822,904 bytes, 0.89%)</title>
            <rect x="15.2277%" y="1486" width="0.8874%" height="21" fill="rgb(255,235,235)" fg:x="649018342" fg:w="37822904"/>
            <text x="15.4777%" y="1499.50"></text>
        </g>
        <g>
            <title>    data = np.concatenate([b.data for b in blocks]) (37,822,904 bytes, 0.89%)</title>
            <rect x="15.2277%" y="1508" width="0.8874%" height="21" fill="rgb(255,235,235)" fg:x="649018342" fg:w="37822904"/>
            <text x="15.4777%" y="1521.50"></text>
        </g>
        <g>
            <title>&lt;__array_function__ internals&gt;:200 (concatenate) (37,822,904 bytes, 0.89%)</title>
            <rect x="15.2277%" y="1530" width="0.8874%" height="21" fill="rgb(255,235,235)" fg:x="649018342" fg:w="37822904"/>
            <text x="15.4777%" y="1543.50"></text>
        </g>
        <g>
            <title> (37,822,904 bytes, 0.89%)</title>
            <rect x="15.2277%" y="1552" width="0.8874%" height="21" fill="rgb(255,235,235)" fg:x="649018342" fg:w="37822904"/>
            <text x="15.4777%" y="1565.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:437 (fit_transform) (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1002" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1015.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        Xt = self._fit(X, y, **fit_params_steps) (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1024" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1037.50">        Xt = self..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:359 (_fit) (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1046" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1059.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>            X, fitted_transformer = fit_transform_one_cached( (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1068" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1081.50">            X, fi..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/memory.py:349 (__call__) (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1090" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1103.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        return self.func(*args, **kwargs) (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1112" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1125.50">        return se..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:893 (_fit_transform_one) (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1134" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1147.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>            res = transformer.fit_transform(X, y, **fit_params) (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1156" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1169.50">            res =..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (wrapped) (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1178" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1191.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>        data_to_wrap = f(self, X, *args, **kwargs) (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1200" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1213.50">        data_to_w..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/base.py:881 (fit_transform) (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1222" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1235.50">/home/pedro/mestra..</text>
        </g>
        <g>
            <title>            return self.fit(X, y, **fit_params).transform(X) (699,297,764 bytes, 16.41%)</title>
            <rect x="0.1515%" y="1244" width="16.4074%" height="21" fill="rgb(255,189,189)" fg:x="6454982" fg:w="699297764"/>
            <text x="0.4015%" y="1257.50">            retur..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (wrapped) (56,734,404 bytes, 1.33%)</title>
            <rect x="15.2277%" y="1266" width="1.3311%" height="21" fill="rgb(255,232,232)" fg:x="649018342" fg:w="56734404"/>
            <text x="15.4777%" y="1279.50"></text>
        </g>
        <g>
            <title>        data_to_wrap = f(self, X, *args, **kwargs) (56,734,404 bytes, 1.33%)</title>
            <rect x="15.2277%" y="1288" width="1.3311%" height="21" fill="rgb(255,232,232)" fg:x="649018342" fg:w="56734404"/>
            <text x="15.4777%" y="1301.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/tree_embedder.py:256 (transform) (56,734,404 bytes, 1.33%)</title>
            <rect x="15.2277%" y="1310" width="1.3311%" height="21" fill="rgb(255,232,232)" fg:x="649018342" fg:w="56734404"/>
            <text x="15.4777%" y="1323.50"></text>
        </g>
        <g>
            <title>        return _hstack(np.fromiter(embeddings_iter, dtype=&apos;object&apos;)) (56,734,404 bytes, 1.33%)</title>
            <rect x="15.2277%" y="1332" width="1.3311%" height="21" fill="rgb(255,232,232)" fg:x="649018342" fg:w="56734404"/>
            <text x="15.4777%" y="1345.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/tree_embedder.py:41 (_hstack) (56,734,404 bytes, 1.33%)</title>
            <rect x="15.2277%" y="1354" width="1.3311%" height="21" fill="rgb(255,232,232)" fg:x="649018342" fg:w="56734404"/>
            <text x="15.4777%" y="1367.50"></text>
        </g>
        <g>
            <title>        return scipy.sparse.hstack(Xs, format=&apos;csr&apos;) (56,734,404 bytes, 1.33%)</title>
            <rect x="15.2277%" y="1376" width="1.3311%" height="21" fill="rgb(255,232,232)" fg:x="649018342" fg:w="56734404"/>
            <text x="15.4777%" y="1389.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_construct.py:535 (hstack) (56,734,404 bytes, 1.33%)</title>
            <rect x="15.2277%" y="1398" width="1.3311%" height="21" fill="rgb(255,232,232)" fg:x="649018342" fg:w="56734404"/>
            <text x="15.4777%" y="1411.50"></text>
        </g>
        <g>
            <title>    return bmat([blocks], format=format, dtype=dtype) (56,734,404 bytes, 1.33%)</title>
            <rect x="15.2277%" y="1420" width="1.3311%" height="21" fill="rgb(255,232,232)" fg:x="649018342" fg:w="56734404"/>
            <text x="15.4777%" y="1433.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_construct.py:632 (bmat) (56,734,404 bytes, 1.33%)</title>
            <rect x="15.2277%" y="1442" width="1.3311%" height="21" fill="rgb(255,232,232)" fg:x="649018342" fg:w="56734404"/>
            <text x="15.4777%" y="1455.50"></text>
        </g>
        <g>
            <title>        A = _compressed_sparse_stack(blocks[:, 0], 0) (56,734,404 bytes, 1.33%)</title>
            <rect x="15.2277%" y="1464" width="1.3311%" height="21" fill="rgb(255,232,232)" fg:x="649018342" fg:w="56734404"/>
            <text x="15.4777%" y="1477.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_construct.py:424 (_compressed_sparse_stack) (18,911,500 bytes, 0.44%)</title>
            <rect x="16.1152%" y="1486" width="0.4437%" height="21" fill="rgb(255,240,240)" fg:x="686841246" fg:w="18911500"/>
            <text x="16.3652%" y="1499.50"></text>
        </g>
        <g>
            <title>    indices = np.empty(data.size, dtype=idx_dtype) (18,911,500 bytes, 0.44%)</title>
            <rect x="16.1152%" y="1508" width="0.4437%" height="21" fill="rgb(255,240,240)" fg:x="686841246" fg:w="18911500"/>
            <text x="16.3652%" y="1521.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:105 (_b_orthonormalize) (33,554,432 bytes, 0.79%)</title>
            <rect x="16.6043%" y="1222" width="0.7873%" height="21" fill="rgb(255,236,236)" fg:x="707686442" fg:w="33554432"/>
            <text x="16.8543%" y="1235.50"></text>
        </g>
        <g>
            <title>    VBV = blockVectorV.T.conj() @ blockVectorBV (33,554,432 bytes, 0.79%)</title>
            <rect x="16.6043%" y="1244" width="0.7873%" height="21" fill="rgb(255,236,236)" fg:x="707686442" fg:w="33554432"/>
            <text x="16.8543%" y="1257.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:516 (lobpcg) (67,108,864 bytes, 1.57%)</title>
            <rect x="16.6043%" y="1178" width="1.5746%" height="21" fill="rgb(255,231,231)" fg:x="707686442" fg:w="67108864"/>
            <text x="16.8543%" y="1191.50"></text>
        </g>
        <g>
            <title>    blockVectorX, blockVectorBX, _, _ = _b_orthonormalize( (67,108,864 bytes, 1.57%)</title>
            <rect x="16.6043%" y="1200" width="1.5746%" height="21" fill="rgb(255,231,231)" fg:x="707686442" fg:w="67108864"/>
            <text x="16.8543%" y="1213.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:108 (_b_orthonormalize) (33,554,432 bytes, 0.79%)</title>
            <rect x="17.3915%" y="1222" width="0.7873%" height="21" fill="rgb(255,236,236)" fg:x="741240874" fg:w="33554432"/>
            <text x="17.6415%" y="1235.50"></text>
        </g>
        <g>
            <title>        VBV = cholesky(VBV, overwrite_a=True) (33,554,432 bytes, 0.79%)</title>
            <rect x="17.3915%" y="1244" width="0.7873%" height="21" fill="rgb(255,236,236)" fg:x="741240874" fg:w="33554432"/>
            <text x="17.6415%" y="1257.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/linalg/_decomp_cholesky.py:89 (cholesky) (33,554,432 bytes, 0.79%)</title>
            <rect x="17.3915%" y="1266" width="0.7873%" height="21" fill="rgb(255,236,236)" fg:x="741240874" fg:w="33554432"/>
            <text x="17.6415%" y="1279.50"></text>
        </g>
        <g>
            <title>    c, lower = _cholesky(a, lower=lower, overwrite_a=overwrite_a, clean=True, (33,554,432 bytes, 0.79%)</title>
            <rect x="17.3915%" y="1288" width="0.7873%" height="21" fill="rgb(255,236,236)" fg:x="741240874" fg:w="33554432"/>
            <text x="17.6415%" y="1301.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/linalg/_decomp_cholesky.py:35 (_cholesky) (33,554,432 bytes, 0.79%)</title>
            <rect x="17.3915%" y="1310" width="0.7873%" height="21" fill="rgb(255,236,236)" fg:x="741240874" fg:w="33554432"/>
            <text x="17.6415%" y="1323.50"></text>
        </g>
        <g>
            <title>    c, info = potrf(a1, lower=lower, overwrite_a=overwrite_a, clean=clean) (33,554,432 bytes, 0.79%)</title>
            <rect x="17.3915%" y="1332" width="0.7873%" height="21" fill="rgb(255,236,236)" fg:x="741240874" fg:w="33554432"/>
            <text x="17.6415%" y="1345.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:491 (svds) (123,843,756 bytes, 2.91%)</title>
            <rect x="16.6043%" y="1134" width="2.9057%" height="21" fill="rgb(255,224,224)" fg:x="707686442" fg:w="123843756"/>
            <text x="16.8543%" y="1147.50">/..</text>
        </g>
        <g>
            <title>        _, eigvec = lobpcg(XH_X, X, tol=tol ** 2, maxiter=maxiter, (123,843,756 bytes, 2.91%)</title>
            <rect x="16.6043%" y="1156" width="2.9057%" height="21" fill="rgb(255,224,224)" fg:x="707686442" fg:w="123843756"/>
            <text x="16.8543%" y="1169.50">..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:523 (lobpcg) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1178" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1191.50"></text>
        </g>
        <g>
            <title>    blockVectorAX = A(blockVectorX) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1200" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1213.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/lobpcg/lobpcg.py:65 (&lt;lambda&gt;) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1222" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1235.50"></text>
        </g>
        <g>
            <title>        return lambda v: m(v) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1244" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1257.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:390 (__call__) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1266" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1279.50"></text>
        </g>
        <g>
            <title>        return self*x (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1288" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1301.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:393 (__mul__) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1310" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1323.50"></text>
        </g>
        <g>
            <title>        return self.dot(x) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1332" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1345.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:420 (dot) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1354" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1367.50"></text>
        </g>
        <g>
            <title>                return self.matmat(x) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1376" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1389.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:337 (matmat) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1398" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1411.50"></text>
        </g>
        <g>
            <title>        Y = self._matmat(X) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1420" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1433.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:525 (_matmat) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1442" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1455.50"></text>
        </g>
        <g>
            <title>            return self.__matmat_impl(X) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1464" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1477.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:476 (matmat_XH_X) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1486" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1499.50"></text>
        </g>
        <g>
            <title>        return XH_mat(X_matmat(x)) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1508" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1521.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:377 (rmatmat) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1530" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1543.50"></text>
        </g>
        <g>
            <title>        Y = self._rmatmat(X) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1552" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1565.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:387 (_rmatmat) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1574" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1587.50"></text>
        </g>
        <g>
            <title>            return self.H.matmat(X) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1596" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1609.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:484 (adjoint) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1618" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1631.50"></text>
        </g>
        <g>
            <title>        return self._adjoint() (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1640" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1653.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:737 (_adjoint) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1662" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1675.50"></text>
        </g>
        <g>
            <title>            self.__adj = _AdjointMatrixOperator(self) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1684" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1697.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:742 (__init__) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1706" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1719.50"></text>
        </g>
        <g>
            <title>        self.A = adjoint.A.T.conj() (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1728" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1741.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:85 (conj) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1750" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1763.50"></text>
        </g>
        <g>
            <title>            return self.copy() (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1772" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1785.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_data.py:92 (copy) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1794" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1807.50"></text>
        </g>
        <g>
            <title>        return self._with_data(self.data.copy(), copy=True) (56,734,892 bytes, 1.33%)</title>
            <rect x="18.1788%" y="1816" width="1.3312%" height="21" fill="rgb(255,232,232)" fg:x="774795306" fg:w="56734892"/>
            <text x="18.4288%" y="1829.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_compressed.py:1230 (_with_data) (18,911,548 bytes, 0.44%)</title>
            <rect x="19.0663%" y="1838" width="0.4437%" height="21" fill="rgb(255,240,240)" fg:x="812618650" fg:w="18911548"/>
            <text x="19.3163%" y="1851.50"></text>
        </g>
        <g>
            <title>            return self.__class__((data, self.indices.copy(), (18,911,548 bytes, 0.44%)</title>
            <rect x="19.0663%" y="1860" width="0.4437%" height="21" fill="rgb(255,240,240)" fg:x="812618650" fg:w="18911548"/>
            <text x="19.3163%" y="1873.50"></text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:539 (svds) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1134" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1147.50">/home/pe..</text>
        </g>
        <g>
            <title>    Av = X_matmat(eigvec) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1156" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1169.50">    Av ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:377 (rmatmat) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1178" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1191.50">/home/pe..</text>
        </g>
        <g>
            <title>        Y = self._rmatmat(X) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1200" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1213.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:387 (_rmatmat) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1222" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1235.50">/home/pe..</text>
        </g>
        <g>
            <title>            return self.H.matmat(X) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1244" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1257.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:337 (matmat) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1266" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1279.50">/home/pe..</text>
        </g>
        <g>
            <title>        Y = self._matmat(X) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1288" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1301.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_interface.py:733 (_matmat) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1310" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1323.50">/home/pe..</text>
        </g>
        <g>
            <title>        return self.A.dot(X) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1332" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1345.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:416 (dot) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1354" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1367.50">/home/pe..</text>
        </g>
        <g>
            <title>            return self @ other (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1376" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1389.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:630 (__matmul__) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1398" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1411.50">/home/pe..</text>
        </g>
        <g>
            <title>        return self._mul_dispatch(other) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1420" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1433.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_base.py:532 (_mul_dispatch) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1442" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1455.50">/home/pe..</text>
        </g>
        <g>
            <title>                return self._mul_multivector(other) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1464" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1477.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/_compressed.py:497 (_mul_multivector) (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1486" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1499.50">/home/pe..</text>
        </g>
        <g>
            <title>        result = np.zeros((M, n_vecs), (357,467,296 bytes, 8.39%)</title>
            <rect x="19.5572%" y="1508" width="8.3872%" height="21" fill="rgb(255,206,206)" fg:x="833543990" fg:w="357467296"/>
            <text x="19.8072%" y="1521.50">       ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:1085 (__call__) (3,377,613,672 bytes, 79.25%)</title>
            <rect x="0.0594%" y="606" width="79.2481%" height="21" fill="rgb(255,116,116)" fg:x="2529582" fg:w="3377613672"/>
            <text x="0.3094%" y="619.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/p..</text>
        </g>
        <g>
            <title>            if self.dispatch_one_batch(iterator): (3,377,613,672 bytes, 79.25%)</title>
            <rect x="0.0594%" y="628" width="79.2481%" height="21" fill="rgb(255,116,116)" fg:x="2529582" fg:w="3377613672"/>
            <text x="0.3094%" y="641.50">            if self.dispatch_one_batch(iterator):</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:901 (dispatch_one_batch) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="650" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="663.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/p..</text>
        </g>
        <g>
            <title>                self._dispatch(tasks) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="672" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="685.50">                self._dispatch(tasks)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:819 (_dispatch) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="694" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="707.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/p..</text>
        </g>
        <g>
            <title>            job = self._backend.apply_async(batch, callback=cb) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="716" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="729.50">            job = self._backend.apply_async(batch, callback=cb)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:208 (apply_async) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="738" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="751.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_..</text>
        </g>
        <g>
            <title>        result = ImmediateResult(func) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="760" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="773.50">        result = ImmediateResult(func)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:597 (__init__) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="782" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="795.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_..</text>
        </g>
        <g>
            <title>        self.results = batch() (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="804" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="817.50">        self.results = batch()</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (__call__) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="826" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="839.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/p..</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="848" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="861.50">            return [func(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (&lt;listcomp&gt;) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="870" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="883.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/p..</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="892" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="905.50">            return [func(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:123 (__call__) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="914" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="927.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/..</text>
        </g>
        <g>
            <title>            return self.function(*args, **kwargs) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="936" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="949.50">            return self.function(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:893 (_fit_transform_one) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="958" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="971.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/..</text>
        </g>
        <g>
            <title>            res = transformer.fit_transform(X, y, **fit_params) (3,373,688,272 bytes, 79.16%)</title>
            <rect x="0.1515%" y="980" width="79.1560%" height="21" fill="rgb(255,116,116)" fg:x="6454982" fg:w="3373688272"/>
            <text x="0.4015%" y="993.50">            res = transformer.fit_transform(X, y, **fit_params)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:445 (fit_transform) (2,674,390,508 bytes, 62.75%)</title>
            <rect x="16.5589%" y="1002" width="62.7485%" height="21" fill="rgb(255,131,131)" fg:x="705752746" fg:w="2674390508"/>
            <text x="16.8089%" y="1015.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/s..</text>
        </g>
        <g>
            <title>                return last_step.fit_transform(Xt, y, **fit_params_last_step) (2,674,390,508 bytes, 62.75%)</title>
            <rect x="16.5589%" y="1024" width="62.7485%" height="21" fill="rgb(255,131,131)" fg:x="705752746" fg:w="2674390508"/>
            <text x="16.8089%" y="1037.50">                return last_step.fit_transform(Xt, y, **fit_params_last_step..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (wrapped) (2,674,390,508 bytes, 62.75%)</title>
            <rect x="16.5589%" y="1046" width="62.7485%" height="21" fill="rgb(255,131,131)" fg:x="705752746" fg:w="2674390508"/>
            <text x="16.8089%" y="1059.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/s..</text>
        </g>
        <g>
            <title>        data_to_wrap = f(self, X, *args, **kwargs) (2,674,390,508 bytes, 62.75%)</title>
            <rect x="16.5589%" y="1068" width="62.7485%" height="21" fill="rgb(255,131,131)" fg:x="705752746" fg:w="2674390508"/>
            <text x="16.8089%" y="1081.50">        data_to_wrap = f(self, X, *args, **kwargs)..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/_lobpcg_truncated_svd.py:57 (fit_transform) (2,674,390,508 bytes, 62.75%)</title>
            <rect x="16.5589%" y="1090" width="62.7485%" height="21" fill="rgb(255,131,131)" fg:x="705752746" fg:w="2674390508"/>
            <text x="16.8089%" y="1103.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/_lobpcg_..</text>
        </g>
        <g>
            <title>        U, Sigma, VT = svds(X, k=self.n_components, tol=self.tol, v0=v0, solver=&quot;lobpcg&quot;) (2,674,390,508 bytes, 62.75%)</title>
            <rect x="16.5589%" y="1112" width="62.7485%" height="21" fill="rgb(255,131,131)" fg:x="705752746" fg:w="2674390508"/>
            <text x="16.8089%" y="1125.50">        U, Sigma, VT = svds(X, k=self.n_components, tol=self.tol, v0=v0, sol..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:546 (svds) (2,189,131,968 bytes, 51.36%)</title>
            <rect x="27.9444%" y="1134" width="51.3630%" height="21" fill="rgb(255,142,142)" fg:x="1191011286" fg:w="2189131968"/>
            <text x="28.1944%" y="1147.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/li..</text>
        </g>
        <g>
            <title>    u, s, vh = svd(Av, full_matrices=False, overwrite_a=True) (2,189,131,968 bytes, 51.36%)</title>
            <rect x="27.9444%" y="1156" width="51.3630%" height="21" fill="rgb(255,142,142)" fg:x="1191011286" fg:w="2189131968"/>
            <text x="28.1944%" y="1169.50">    u, s, vh = svd(Av, full_matrices=False, overwrite_a=True)..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/linalg/_decomp_svd.py:127 (svd) (2,189,131,968 bytes, 51.36%)</title>
            <rect x="27.9444%" y="1178" width="51.3630%" height="21" fill="rgb(255,142,142)" fg:x="1191011286" fg:w="2189131968"/>
            <text x="28.1944%" y="1191.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/li..</text>
        </g>
        <g>
            <title>    u, s, v, info = gesXd(a1, compute_uv=compute_uv, lwork=lwork, (2,189,131,968 bytes, 51.36%)</title>
            <rect x="27.9444%" y="1200" width="51.3630%" height="21" fill="rgb(255,142,142)" fg:x="1191011286" fg:w="2189131968"/>
            <text x="28.1944%" y="1213.50">    u, s, v, info = gesXd(a1, compute_uv=compute_uv, lwork=lwo..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:437 (fit_transform) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1002" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1015.50">/hom..</text>
        </g>
        <g>
            <title>        Xt = self._fit(X, y, **fit_params_steps) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1024" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1037.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:359 (_fit) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1046" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1059.50">/hom..</text>
        </g>
        <g>
            <title>            X, fitted_transformer = fit_transform_one_cached( (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1068" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1081.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/memory.py:349 (__call__) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1090" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1103.50">/hom..</text>
        </g>
        <g>
            <title>        return self.func(*args, **kwargs) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1112" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1125.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:893 (_fit_transform_one) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1134" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1147.50">/hom..</text>
        </g>
        <g>
            <title>            res = transformer.fit_transform(X, y, **fit_params) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1156" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1169.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (wrapped) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1178" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1191.50">/hom..</text>
        </g>
        <g>
            <title>        data_to_wrap = f(self, X, *args, **kwargs) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1200" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1213.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/base.py:881 (fit_transform) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1222" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1235.50">/hom..</text>
        </g>
        <g>
            <title>            return self.fit(X, y, **fit_params).transform(X) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1244" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1257.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/tree_embedder.py:216 (fit) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1266" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1279.50">/hom..</text>
        </g>
        <g>
            <title>        self.estimator_.fit(X, y) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1288" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1301.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:473 (fit) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1310" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1323.50">/hom..</text>
        </g>
        <g>
            <title>            trees = Parallel( (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1332" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1345.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:63 (__call__) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1354" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1367.50">/hom..</text>
        </g>
        <g>
            <title>        return super().__call__(iterable_with_config) (223,977,040 bytes, 5.26%)</title>
            <rect x="79.3074%" y="1376" width="5.2551%" height="21" fill="rgb(255,215,215)" fg:x="3380143254" fg:w="223977040"/>
            <text x="79.5574%" y="1389.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:1088 (__call__) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1398" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1411.50">/hom..</text>
        </g>
        <g>
            <title>            while self.dispatch_one_batch(iterator): (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1420" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1433.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:901 (dispatch_one_batch) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1442" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1455.50">/hom..</text>
        </g>
        <g>
            <title>                self._dispatch(tasks) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1464" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1477.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:819 (_dispatch) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1486" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1499.50">/hom..</text>
        </g>
        <g>
            <title>            job = self._backend.apply_async(batch, callback=cb) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1508" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1521.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:208 (apply_async) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1530" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1543.50">/hom..</text>
        </g>
        <g>
            <title>        result = ImmediateResult(func) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1552" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1565.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:597 (__init__) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1574" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1587.50">/hom..</text>
        </g>
        <g>
            <title>        self.results = batch() (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1596" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1609.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (__call__) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1618" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1631.50">/hom..</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1640" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1653.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (&lt;listcomp&gt;) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1662" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1675.50">/hom..</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1684" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1697.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:123 (__call__) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1706" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1719.50">/hom..</text>
        </g>
        <g>
            <title>            return self.function(*args, **kwargs) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1728" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1741.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:184 (_parallel_build_trees) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1750" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1763.50">/hom..</text>
        </g>
        <g>
            <title>        tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1772" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1785.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/tree/_classes.py:889 (fit) (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1794" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1807.50">/hom..</text>
        </g>
        <g>
            <title>        super().fit( (221,763,360 bytes, 5.20%)</title>
            <rect x="79.3593%" y="1816" width="5.2032%" height="21" fill="rgb(255,215,215)" fg:x="3382356934" fg:w="221763360"/>
            <text x="79.6093%" y="1829.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/tree/_classes.py:379 (fit) (220,987,200 bytes, 5.18%)</title>
            <rect x="79.3776%" y="1838" width="5.1850%" height="21" fill="rgb(255,215,215)" fg:x="3383133094" fg:w="220987200"/>
            <text x="79.6276%" y="1851.50">/hom..</text>
        </g>
        <g>
            <title>        builder.build(self.tree_, X, y, sample_weight) (220,987,200 bytes, 5.18%)</title>
            <rect x="79.3776%" y="1860" width="5.1850%" height="21" fill="rgb(255,215,215)" fg:x="3383133094" fg:w="220987200"/>
            <text x="79.6276%" y="1873.50">   ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/compose/_column_transformer.py:727 (fit_transform) (4,238,771,480 bytes, 99.45%)</title>
            <rect x="0.0594%" y="474" width="99.4532%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4238771480"/>
            <text x="0.3094%" y="487.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/compose/_column_transforme..</text>
        </g>
        <g>
            <title>        result = self._fit_transform(X, y, _fit_transform_one) (4,238,771,480 bytes, 99.45%)</title>
            <rect x="0.0594%" y="496" width="99.4532%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4238771480"/>
            <text x="0.3094%" y="509.50">        result = self._fit_transform(X, y, _fit_transform_one)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/compose/_column_transformer.py:658 (_fit_transform) (4,238,771,480 bytes, 99.45%)</title>
            <rect x="0.0594%" y="518" width="99.4532%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4238771480"/>
            <text x="0.3094%" y="531.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/compose/_column_transforme..</text>
        </g>
        <g>
            <title>            return Parallel(n_jobs=self.n_jobs)( (4,238,771,480 bytes, 99.45%)</title>
            <rect x="0.0594%" y="540" width="99.4532%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4238771480"/>
            <text x="0.3094%" y="553.50">            return Parallel(n_jobs=self.n_jobs)(</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:63 (__call__) (4,238,771,480 bytes, 99.45%)</title>
            <rect x="0.0594%" y="562" width="99.4532%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4238771480"/>
            <text x="0.3094%" y="575.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:63 (__ca..</text>
        </g>
        <g>
            <title>        return super().__call__(iterable_with_config) (4,238,771,480 bytes, 99.45%)</title>
            <rect x="0.0594%" y="584" width="99.4532%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4238771480"/>
            <text x="0.3094%" y="597.50">        return super().__call__(iterable_with_config)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:1088 (__call__) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="606" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="619.50">/home/pedro/mestrado/bi..</text>
        </g>
        <g>
            <title>            while self.dispatch_one_batch(iterator): (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="628" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="641.50">            while self..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:901 (dispatch_one_batch) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="650" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="663.50">/home/pedro/mestrado/bi..</text>
        </g>
        <g>
            <title>                self._dispatch(tasks) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="672" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="685.50">                self._..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:819 (_dispatch) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="694" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="707.50">/home/pedro/mestrado/bi..</text>
        </g>
        <g>
            <title>            job = self._backend.apply_async(batch, callback=cb) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="716" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="729.50">            job = self..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:208 (apply_async) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="738" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="751.50">/home/pedro/mestrado/bi..</text>
        </g>
        <g>
            <title>        result = ImmediateResult(func) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="760" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="773.50">        result = Immed..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/_parallel_backends.py:597 (__init__) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="782" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="795.50">/home/pedro/mestrado/bi..</text>
        </g>
        <g>
            <title>        self.results = batch() (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="804" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="817.50">        self.results =..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (__call__) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="826" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="839.50">/home/pedro/mestrado/bi..</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="848" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="861.50">            return [fu..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/parallel.py:288 (&lt;listcomp&gt;) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="870" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="883.50">/home/pedro/mestrado/bi..</text>
        </g>
        <g>
            <title>            return [func(*args, **kwargs) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="892" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="905.50">            return [fu..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/parallel.py:123 (__call__) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="914" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="927.50">/home/pedro/mestrado/bi..</text>
        </g>
        <g>
            <title>            return self.function(*args, **kwargs) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="936" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="949.50">            return sel..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:893 (_fit_transform_one) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="958" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="971.50">/home/pedro/mestrado/bi..</text>
        </g>
        <g>
            <title>            res = transformer.fit_transform(X, y, **fit_params) (861,157,808 bytes, 20.21%)</title>
            <rect x="79.3074%" y="980" width="20.2051%" height="21" fill="rgb(255,182,182)" fg:x="3380143254" fg:w="861157808"/>
            <text x="79.5574%" y="993.50">            res = tran..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:445 (fit_transform) (637,180,768 bytes, 14.95%)</title>
            <rect x="84.5625%" y="1002" width="14.9500%" height="21" fill="rgb(255,192,192)" fg:x="3604120294" fg:w="637180768"/>
            <text x="84.8125%" y="1015.50">/home/pedro/mestr..</text>
        </g>
        <g>
            <title>                return last_step.fit_transform(Xt, y, **fit_params_last_step) (637,180,768 bytes, 14.95%)</title>
            <rect x="84.5625%" y="1024" width="14.9500%" height="21" fill="rgb(255,192,192)" fg:x="3604120294" fg:w="637180768"/>
            <text x="84.8125%" y="1037.50">                ..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (wrapped) (637,180,768 bytes, 14.95%)</title>
            <rect x="84.5625%" y="1046" width="14.9500%" height="21" fill="rgb(255,192,192)" fg:x="3604120294" fg:w="637180768"/>
            <text x="84.8125%" y="1059.50">/home/pedro/mestr..</text>
        </g>
        <g>
            <title>        data_to_wrap = f(self, X, *args, **kwargs) (637,180,768 bytes, 14.95%)</title>
            <rect x="84.5625%" y="1068" width="14.9500%" height="21" fill="rgb(255,192,192)" fg:x="3604120294" fg:w="637180768"/>
            <text x="84.8125%" y="1081.50">        data_to_..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/_lobpcg_truncated_svd.py:57 (fit_transform) (637,180,768 bytes, 14.95%)</title>
            <rect x="84.5625%" y="1090" width="14.9500%" height="21" fill="rgb(255,192,192)" fg:x="3604120294" fg:w="637180768"/>
            <text x="84.8125%" y="1103.50">/home/pedro/mestr..</text>
        </g>
        <g>
            <title>        U, Sigma, VT = svds(X, k=self.n_components, tol=self.tol, v0=v0, solver=&quot;lobpcg&quot;) (637,180,768 bytes, 14.95%)</title>
            <rect x="84.5625%" y="1112" width="14.9500%" height="21" fill="rgb(255,192,192)" fg:x="3604120294" fg:w="637180768"/>
            <text x="84.8125%" y="1125.50">        U, Sigma..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/sparse/linalg/_eigen/_svds.py:546 (svds) (637,180,768 bytes, 14.95%)</title>
            <rect x="84.5625%" y="1134" width="14.9500%" height="21" fill="rgb(255,192,192)" fg:x="3604120294" fg:w="637180768"/>
            <text x="84.8125%" y="1147.50">/home/pedro/mestr..</text>
        </g>
        <g>
            <title>    u, s, vh = svd(Av, full_matrices=False, overwrite_a=True) (637,180,768 bytes, 14.95%)</title>
            <rect x="84.5625%" y="1156" width="14.9500%" height="21" fill="rgb(255,192,192)" fg:x="3604120294" fg:w="637180768"/>
            <text x="84.8125%" y="1169.50">    u, s, vh = s..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/scipy/linalg/_decomp_svd.py:127 (svd) (637,180,768 bytes, 14.95%)</title>
            <rect x="84.5625%" y="1178" width="14.9500%" height="21" fill="rgb(255,192,192)" fg:x="3604120294" fg:w="637180768"/>
            <text x="84.8125%" y="1191.50">/home/pedro/mestr..</text>
        </g>
        <g>
            <title>    u, s, v, info = gesXd(a1, compute_uv=compute_uv, lwork=lwork, (637,180,768 bytes, 14.95%)</title>
            <rect x="84.5625%" y="1200" width="14.9500%" height="21" fill="rgb(255,192,192)" fg:x="3604120294" fg:w="637180768"/>
            <text x="84.8125%" y="1213.50">    u, s, v, inf..</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/memory.py:779 (call) (4,242,638,776 bytes, 99.54%)</title>
            <rect x="0.0594%" y="342" width="99.5439%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242638776"/>
            <text x="0.3094%" y="355.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/memory.py:779 (call)</text>
        </g>
        <g>
            <title>        output = self.func(*args, **kwargs) (4,242,638,776 bytes, 99.54%)</title>
            <rect x="0.0594%" y="364" width="99.5439%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242638776"/>
            <text x="0.3094%" y="377.50">        output = self.func(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:893 (_fit_transform_one) (4,242,638,776 bytes, 99.54%)</title>
            <rect x="0.0594%" y="386" width="99.5439%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242638776"/>
            <text x="0.3094%" y="399.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/pipeline.py:893 (_fit_tran..</text>
        </g>
        <g>
            <title>            res = transformer.fit_transform(X, y, **fit_params) (4,242,638,776 bytes, 99.54%)</title>
            <rect x="0.0594%" y="408" width="99.5439%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242638776"/>
            <text x="0.3094%" y="421.50">            res = transformer.fit_transform(X, y, **fit_params)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (wrapped) (4,242,638,776 bytes, 99.54%)</title>
            <rect x="0.0594%" y="430" width="99.5439%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242638776"/>
            <text x="0.3094%" y="443.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140 (..</text>
        </g>
        <g>
            <title>        data_to_wrap = f(self, X, *args, **kwargs) (4,242,638,776 bytes, 99.54%)</title>
            <rect x="0.0594%" y="452" width="99.5439%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242638776"/>
            <text x="0.3094%" y="465.50">        data_to_wrap = f(self, X, *args, **kwargs)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/cascade.py:405 (_fit) (4,242,750,224 bytes, 99.55%)</title>
            <rect x="0.0594%" y="210" width="99.5465%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242750224"/>
            <text x="0.3094%" y="223.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/cascade.py:405 (_fit)</text>
        </g>
        <g>
            <title>                new_X, fitted_transformer = fit_transform_one_cached( (4,242,750,224 bytes, 99.55%)</title>
            <rect x="0.0594%" y="232" width="99.5465%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242750224"/>
            <text x="0.3094%" y="245.50">                new_X, fitted_transformer = fit_transform_one_cached(</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/memory.py:594 (__call__) (4,242,750,224 bytes, 99.55%)</title>
            <rect x="0.0594%" y="254" width="99.5465%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242750224"/>
            <text x="0.3094%" y="267.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/memory.py:594 (__call__)</text>
        </g>
        <g>
            <title>        return self._cached_call(args, kwargs)[0] (4,242,750,224 bytes, 99.55%)</title>
            <rect x="0.0594%" y="276" width="99.5465%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242750224"/>
            <text x="0.3094%" y="289.50">        return self._cached_call(args, kwargs)[0]</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/memory.py:537 (_cached_call) (4,242,750,224 bytes, 99.55%)</title>
            <rect x="0.0594%" y="298" width="99.5465%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242750224"/>
            <text x="0.3094%" y="311.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/env/lib/python3.10/site-packages/joblib/memory.py:537 (_cached_call)</text>
        </g>
        <g>
            <title>            out, metadata = self.call(*args, **kwargs) (4,242,750,224 bytes, 99.55%)</title>
            <rect x="0.0594%" y="320" width="99.5465%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4242750224"/>
            <text x="0.3094%" y="333.50">            out, metadata = self.call(*args, **kwargs)</text>
        </g>
        <g>
            <title>estimators.py:186 (&lt;module&gt;) (4,248,879,960 bytes, 99.69%)</title>
            <rect x="0.0594%" y="122" width="99.6903%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4248879960"/>
            <text x="0.3094%" y="135.50">estimators.py:186 (&lt;module&gt;)</text>
        </g>
        <g>
            <title>    cascade = cascade_weak_label_tree_embedder.fit(X, y) (4,248,879,960 bytes, 99.69%)</title>
            <rect x="0.0594%" y="144" width="99.6903%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4248879960"/>
            <text x="0.3094%" y="157.50">    cascade = cascade_weak_label_tree_embedder.fit(X, y)</text>
        </g>
        <g>
            <title>/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/cascade.py:327 (fit) (4,248,879,960 bytes, 99.69%)</title>
            <rect x="0.0594%" y="166" width="99.6903%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4248879960"/>
            <text x="0.3094%" y="179.50">/home/pedro/mestrado/biomal_repo/scripts/cascade_forests/deep_forest/cascade.py:327 (fit)</text>
        </g>
        <g>
            <title>        Xt, yt = self._fit(X, y, **fit_params_steps) (4,248,879,960 bytes, 99.69%)</title>
            <rect x="0.0594%" y="188" width="99.6903%" height="21" fill="rgb(255,100,100)" fg:x="2529582" fg:w="4248879960"/>
            <text x="0.3094%" y="201.50">        Xt, yt = self._fit(X, y, **fit_params_steps)</text>
        </g>
        <g>
            <title>all (4,262,077,847 bytes, 100%)</title>
            <rect x="0.0000%" y="100" width="100.0000%" height="21" fill="rgb(255,100,100)" fg:x="0" fg:w="4262077847"/>
            <text x="0.2500%" y="113.50"></text>
        </g>
    </svg>
</svg>