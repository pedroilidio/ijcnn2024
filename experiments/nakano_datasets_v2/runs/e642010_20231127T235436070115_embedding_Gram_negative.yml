active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwCamZmZmdk/ADMzMzMz478AmpmZmZnZPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+gmZmZmZnpP4CZmZmZmcm/gJmZmZmZyb+AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ2T8wMzMzMzPjvzAzMzMzM+O/oJmZmZmZ2T+gmZmZmZnZPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MDMzMzMz478wMzMzMzPjv6CZmZmZmdk/aGZmZmZm9j8wMzMzMzPjvw==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz4z+YmZmZmZnZv2ZmZmZmZva/NDMzMzMz4z80MzMzMzPjPw==
        ? !!python/tuple
        - 7
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          wJmZmZmZEUAAmZmZmZn5vwCcmZmZmdk/ADIzMzMz47+AzMzMzMwEwA==
      n_labels: 8
      n_samples: 1392
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_negative
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_negative.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 23:59:47.510154
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt_embedder
                - call: sklearn.pipeline.Pipeline
                  params:
                    memory: null
                    steps:
                    - - xt
                      - call: deep_forest.tree_embedder.ForestEmbedder
                        params:
                          estimator:
                            call: sklearn.ensemble._forest.ExtraTreesRegressor
                            params:
                              bootstrap: true
                              ccp_alpha: 0.0
                              criterion: squared_error
                              max_depth: null
                              max_features: sqrt
                              max_leaf_nodes: null
                              max_samples: 0.5
                              min_impurity_decrease: 0.0
                              min_samples_leaf: 5
                              min_samples_split: 2
                              min_weight_fraction_leaf: 0.0
                              n_estimators: 150
                              n_jobs: 14
                              oob_score: false
                              random_state: 0
                              verbose: true
                              warm_start: false
                          max_node_size: 0.8
                          max_pvalue: 1.0
                          method: path
                          node_weights: log_node_size
                    - - densifier
                      - call: nakano_datasets_v2.estimators.Densifier
                        params: {}
                    - - pca
                      - call: sklearn.decomposition._pca.PCA
                        params:
                          copy: true
                          iterated_power: auto
                          n_components: 0.8
                          n_oversamples: 10
                          power_iteration_normalizer: auto
                          random_state: 0
                          svd_solver: auto
                          tol: 0.0
                          whiten: false
                    verbose: false
              - - rf_embedder
                - call: sklearn.pipeline.Pipeline
                  params:
                    memory: null
                    steps:
                    - - rf
                      - call: deep_forest.tree_embedder.ForestEmbedder
                        params:
                          estimator:
                            call: sklearn.ensemble._forest.RandomForestRegressor
                            params:
                              bootstrap: true
                              ccp_alpha: 0.0
                              criterion: squared_error
                              max_depth: null
                              max_features: sqrt
                              max_leaf_nodes: null
                              max_samples: 0.5
                              min_impurity_decrease: 0.0
                              min_samples_leaf: 5
                              min_samples_split: 2
                              min_weight_fraction_leaf: 0.0
                              n_estimators: 150
                              n_jobs: 14
                              oob_score: false
                              random_state: 0
                              verbose: true
                              warm_start: false
                          max_node_size: 0.95
                          max_pvalue: 1.0
                          method: path
                          node_weights: log_node_size
                    - - densifier
                      - call: nakano_datasets_v2.estimators.Densifier
                        params: {}
                    - - pca
                      - call: sklearn.decomposition._pca.PCA
                        params:
                          copy: true
                          iterated_power: auto
                          n_components: 0.8
                          n_oversamples: 10
                          power_iteration_normalizer: auto
                          random_state: 0
                          svd_solver: auto
                          tol: 0.0
                          whiten: false
                    verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding
  params:
    memory: estimators_cache
hash: e6420106e3acae700c75f5fd740cf9483f122fab5e3b14c88792f9da8aa9ef86
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/e642010_20231127T235436070115_embedding_Gram_negative.yml
results:
  fit_time:
  - 201.7427806854248
  - 193.76777243614197
  - 196.1436960697174
  - 179.84069919586182
  - 164.94809913635254
  score_time:
  - 105.49916005134583
  - 106.48969888687134
  - 106.36677598953247
  - 101.80616807937622
  - 99.45297265052795
  test_average_precision_macro:
  - 0.868512841060294
  - 0.9178078468251399
  - 0.8357323400802206
  - 0.8385407049212124
  - 0.9660130397882678
  test_average_precision_micro:
  - 0.9588384223294317
  - 0.9811210415775177
  - 0.9541572698782914
  - 0.9429813348398189
  - 0.9553074376189953
  test_average_precision_samples:
  - 0.9711070559610707
  - 0.9828571428571428
  - 0.9625385405960946
  - 0.9606929510155315
  - 0.9748517200474496
  test_average_precision_weighted:
  - 0.96059632708264
  - 0.9843725205868907
  - 0.9462558900375388
  - 0.9395282555006745
  - 0.9616825030655016
  test_coverage_error:
  - -1.1496350364963503
  - -1.1178571428571429
  - -1.2266187050359711
  - -1.1612903225806452
  - -1.1245551601423487
  test_f1_macro:
  - 0.15266682601860374
  - 0.2152998455064165
  - 0.14072124551547843
  - 0.1269246402057152
  - 0.19113103435354073
  test_f1_micro:
  - 0.2729970326409496
  - 0.4331550802139038
  - 0.33048433048433046
  - 0.31486880466472306
  - 0.3465909090909091
  test_f1_samples:
  - 0.16423357664233576
  - 0.28809523809523807
  - 0.20743405275779375
  - 0.1923536439665472
  - 0.21352313167259787
  test_f1_weighted:
  - 0.26332740786886916
  - 0.40364602203030514
  - 0.3074633857650418
  - 0.29472669296659804
  - 0.3264763782284281
  test_hamming_loss:
  - -0.11177007299270073
  - -0.09464285714285714
  - -0.10566546762589928
  - -0.10528673835125447
  - -0.10231316725978648
  test_jaccard_macro:
  - 0.09163768727021739
  - 0.14042537746806039
  - 0.08682496520911155
  - 0.077647841656988
  - 0.1161523108474328
  test_jaccard_micro:
  - 0.15807560137457044
  - 0.2764505119453925
  - 0.19795221843003413
  - 0.18685121107266436
  - 0.20962199312714777
  test_jaccard_samples:
  - 0.1624087591240876
  - 0.2875
  - 0.2068345323741007
  - 0.1917562724014337
  - 0.2117437722419929
  test_jaccard_weighted:
  - 0.15832987120897385
  - 0.2764505119453925
  - 0.19795221843003413
  - 0.18685121107266436
  - 0.20962199312714777
  test_label_ranking_average_precision_score:
  - 0.9711070559610705
  - 0.9828571428571428
  - 0.9625385405960946
  - 0.9606929510155315
  - 0.9748517200474496
  test_label_ranking_loss:
  - 0.011079249217935348
  - 0.007440476190476189
  - 0.021111682082905103
  - 0.01693975081071855
  - 0.010803253685815964
  test_matthews_corrcoef_macro:
  - 0.18467067952934146
  - 0.25219972847911487
  - 0.1879902769545107
  - 0.16313528413064746
  - 0.2557461582041064
  test_matthews_corrcoef_micro:
  - 0.36979378958064313
  - 0.49930435477975593
  - 0.42008976186986946
  - 0.4082774758636661
  - 0.4331012571274645
  test_matthews_corrcoef_samples:
  - 0.16358067105571822
  - 0.28805233453824275
  - 0.20739084054211504
  - 0.19231058663336192
  - 0.21339487904670437
  test_matthews_corrcoef_weighted:
  - 0.30493607327920796
  - 0.42927385374052524
  - 0.3499677645495007
  - 0.33207531751303687
  - 0.3753285884617127
  test_ndgc:
  - 0.9794766784553551
  - 0.9884621572071377
  - 0.9730405227154686
  - 0.9711392274675965
  - 0.9821833560961096
  test_precision_macro:
  - 0.484375
  - 0.625
  - 0.625
  - 0.5
  - 0.75
  test_precision_micro:
  - 0.9787234042553191
  - 1.0
  - 1.0
  - 1.0
  - 1.0
  test_precision_samples:
  - 0.1678832116788321
  - 0.2892857142857143
  - 0.20863309352517986
  - 0.1935483870967742
  - 0.21708185053380782
  test_precision_weighted:
  - 0.8439655172413794
  - 0.9590443686006825
  - 0.9590443686006825
  - 0.8823529411764706
  - 0.9862542955326461
  test_recall_macro:
  - 0.09176625030283567
  - 0.14042537746806039
  - 0.08682496520911155
  - 0.077647841656988
  - 0.1161523108474328
  test_recall_micro:
  - 0.15862068965517243
  - 0.2764505119453925
  - 0.19795221843003413
  - 0.18685121107266436
  - 0.20962199312714777
  test_recall_samples:
  - 0.1624087591240876
  - 0.2875
  - 0.2068345323741007
  - 0.1917562724014337
  - 0.2117437722419929
  test_recall_weighted:
  - 0.15862068965517243
  - 0.2764505119453925
  - 0.19795221843003413
  - 0.18685121107266436
  - 0.20962199312714777
  test_roc_auc_macro:
  - 0.9908366149312464
  - 0.9945029687838577
  - 0.9595670170359938
  - 0.982950023857353
  - 0.9905287048221991
  test_roc_auc_micro:
  - 0.9925251096849051
  - 0.9946289995459892
  - 0.9848908503790321
  - 0.9892266979147931
  - 0.989992747859038
  test_roc_auc_samples:
  - 0.9889207507820647
  - 0.9925595238095237
  - 0.978888317917095
  - 0.9830602491892815
  - 0.9891967463141841
  test_roc_auc_weighted:
  - 0.9847758956794045
  - 0.9930147494260818
  - 0.9796318371587813
  - 0.9790329080303134
  - 0.981907381892529
start: 2023-11-27 23:54:36.070115
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
