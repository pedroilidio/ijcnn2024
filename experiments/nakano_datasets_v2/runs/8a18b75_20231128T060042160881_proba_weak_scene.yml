active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwAzMzMzM+O/AJqZmZmZ2T8AmpmZmZnZPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyb8AmpmZmZnJvwCamZmZmcm/AJqZmZmZyb+AmZmZmZnpPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZ2T8AmpmZmZnZPwAzMzMzM+O/ADMzMzMz478AmpmZmZnZPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gDMzMzMz4z8AmZmZmZnZv4AzMzMzM+M/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b+AMzMzMzPjP4AzMzMzM+M/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT8AmpmZmZnJPwCamZmZmck/AJqZmZmZyT+AmZmZmZnpvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJyZmZmZ2T+AMzMzMzMLQIAzMzMzMwNAADIzMzMz479AZmZmZmYWwA==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-11-28 06:01:37.862829
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.9
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler:
            call: deep_forest.weak_labels.PositiveUnlabeledImputer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesClassifier
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  class_weight: null
                  criterion: gini
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: 0.9
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: true
                  random_state: 0
                  verbose: true
                  warm_start: false
              sampling_strategy: auto
              threshold: 0.8
              use_oob_proba: true
              verbose: true
              weight_proba: true
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba_weak
  params:
    memory: estimators_cache
hash: 8a18b7538c785c388cbb55b8be201ab223239eb967e8b79278afda64bdb19c4d
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/8a18b75_20231128T060042160881_proba_weak_scene.yml
results:
  fit_time:
  - 42.63529849052429
  - 45.60618615150452
  - 45.44200587272644
  - 44.92987084388733
  - 44.918845415115356
  score_time:
  - 9.931254863739014
  - 8.844473361968994
  - 8.818467140197754
  - 8.687752962112427
  - 8.727830648422241
  test_average_precision_macro:
  - 0.6951265147875146
  - 0.708981896498241
  - 0.6731043890857529
  - 0.6626630246845026
  - 0.6863413395203278
  test_average_precision_micro:
  - 0.6932750999477263
  - 0.675578185276194
  - 0.6629573513042997
  - 0.6479681403492197
  - 0.6798611780316794
  test_average_precision_samples:
  - 0.8407484407484407
  - 0.8399581589958159
  - 0.8266875434933889
  - 0.7992047026279391
  - 0.8345653661875426
  test_average_precision_weighted:
  - 0.6794484333176044
  - 0.6892784518404312
  - 0.657124812654009
  - 0.6448313731900662
  - 0.6699307395117802
  test_coverage_error:
  - -1.5343035343035343
  - -1.5292887029288702
  - -1.5782881002087683
  - -1.6721991701244814
  - -1.5236139630390144
  test_f1_macro:
  - 0.0038314176245210726
  - 0.006903143585386576
  - 0.0
  - 0.0
  - 0.0
  test_f1_micro:
  - 0.0038684719535783366
  - 0.0077071290944123304
  - 0.0
  - 0.0
  - 0.0
  test_f1_samples:
  - 0.001386001386001386
  - 0.0034867503486750344
  - 0.0
  - 0.0
  - 0.0
  test_f1_weighted:
  - 0.003831417624521073
  - 0.007656830055101896
  - 0.0
  - 0.0
  - 0.0
  test_hamming_loss:
  - -0.17844767844767845
  - -0.1795676429567643
  - -0.17988865692414752
  - -0.17911479944674966
  - -0.17693360711841205
  test_jaccard_macro:
  - 0.001937984496124031
  - 0.0034880358562856934
  - 0.0
  - 0.0
  - 0.0
  test_jaccard_micro:
  - 0.001937984496124031
  - 0.0038684719535783366
  - 0.0
  - 0.0
  - 0.0
  test_jaccard_samples:
  - 0.0010395010395010396
  - 0.0031380753138075313
  - 0.0
  - 0.0
  - 0.0
  test_jaccard_weighted:
  - 0.001937984496124031
  - 0.0038684719535783366
  - 0.0
  - 0.0
  - 0.0
  test_label_ranking_average_precision_score:
  - 0.8407484407484406
  - 0.8399581589958158
  - 0.8266875434933887
  - 0.7992047026279389
  - 0.8345653661875426
  test_label_ranking_loss:
  - 0.08986486486486485
  - 0.08755230125523011
  - 0.09603340292275574
  - 0.11737551867219917
  - 0.09034907597535935
  test_matthews_corrcoef_macro:
  - 0.016303372563174708
  - 0.030473545118515757
  - 0.0
  - 0.0
  - 0.0
  test_matthews_corrcoef_micro:
  - 0.039900323188876055
  - 0.05633236023009993
  - 0.0
  - 0.0
  - 0.0
  test_matthews_corrcoef_samples:
  - 0.0013148763659743782
  - 0.003415178937308946
  - 0.0
  - 0.0
  - 0.0
  test_matthews_corrcoef_weighted:
  - 0.016303372563174708
  - 0.03392052297348396
  - 0.0
  - 0.0
  - 0.0
  test_ndgc:
  - 0.8824325494307574
  - 0.8818791537123121
  - 0.8728140255218895
  - 0.8511463112091557
  - 0.8778425104716376
  test_precision_macro:
  - 0.16666666666666666
  - 0.3333333333333333
  - 0.0
  - 0.0
  - 0.0
  test_precision_micro:
  - 1.0
  - 1.0
  - 0.0
  - 0.0
  - 0.0
  test_precision_samples:
  - 0.002079002079002079
  - 0.0041841004184100415
  - 0.0
  - 0.0
  - 0.0
  test_precision_weighted:
  - 0.16666666666666666
  - 0.3733075435203095
  - 0.0
  - 0.0
  - 0.0
  test_recall_macro:
  - 0.001937984496124031
  - 0.0034880358562856934
  - 0.0
  - 0.0
  - 0.0
  test_recall_micro:
  - 0.001937984496124031
  - 0.0038684719535783366
  - 0.0
  - 0.0
  - 0.0
  test_recall_samples:
  - 0.0010395010395010396
  - 0.0031380753138075313
  - 0.0
  - 0.0
  - 0.0
  test_recall_weighted:
  - 0.001937984496124031
  - 0.0038684719535783366
  - 0.0
  - 0.0
  - 0.0
  test_roc_auc_macro:
  - 0.8901841723812121
  - 0.8909961271271952
  - 0.8702682262296358
  - 0.8656366624226037
  - 0.8814524218551859
  test_roc_auc_micro:
  - 0.902256075622281
  - 0.8992605311374147
  - 0.8792218577692358
  - 0.8742986276684676
  - 0.8913916445831339
  test_roc_auc_samples:
  - 0.9101351351351352
  - 0.9124476987447698
  - 0.9039665970772442
  - 0.882624481327801
  - 0.9098562628336756
  test_roc_auc_weighted:
  - 0.8815601064995624
  - 0.8810265885485354
  - 0.861228617047274
  - 0.8558432999215159
  - 0.8718878154291393
start: 2023-11-28 06:00:42.160881
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop90
  params:
    drop: 0.9
    random_state: 0
