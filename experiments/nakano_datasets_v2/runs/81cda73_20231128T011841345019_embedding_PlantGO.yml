active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            wJmZmZmZyT/AmZmZmZnJP8CZmZmZmck/kJmZmZmZ6b/AmZmZmZnJPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ2T8wMzMzMzPjvzAzMzMzM+O/oJmZmZmZ2T+gmZmZmZnZPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT+AmZmZmZnpvwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2T+AmZmZmZnZP0AzMzMzM+O/QDMzMzMz47+AmZmZmZnZPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MDMzMzMz47+gmZmZmZnZP6CZmZmZmdk/oJmZmZmZ2T8wMzMzMzPjvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ2T8wMzMzMzPjv6CZmZmZmdk/MDMzMzMz47+gmZmZmZnZPw==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ6b+gmZmZmZnJP6CZmZmZmck/oJmZmZmZyT+gmZmZmZnJPw==
        ? !!python/tuple
        - 7
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 8
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            IDMzMzMz47/AmZmZmZnZP8CZmZmZmdk/wJmZmZmZ2T8gMzMzMzPjvw==
        ? !!python/tuple
        - 9
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZyT+gmZmZmZnJP6CZmZmZmck/oJmZmZmZyT+YmZmZmZnpvw==
        ? !!python/tuple
        - 10
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ6T+AmZmZmZnJv4CZmZmZmcm/gJmZmZmZyb+AmZmZmZnJvw==
        ? !!python/tuple
        - 11
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MDMzMzMz478wMzMzMzPjv6CZmZmZmdk/oJmZmZmZ2T+gmZmZmZnZPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AM3MzMzMDECAmZmZmZkRwABmZmZmZva/AJqZmZmZ+T8ANDMzMzPjPw==
      n_labels: 12
      n_samples: 978
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: PlantGO
  params:
    path: nakano_datasets_v2/datasets/MLC/PlantGO.csv
directory: nakano_datasets_v2/runs
end: 2023-11-28 01:23:18.679743
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt_embedder
                - call: sklearn.pipeline.Pipeline
                  params:
                    memory: null
                    steps:
                    - - xt
                      - call: deep_forest.tree_embedder.ForestEmbedder
                        params:
                          estimator:
                            call: sklearn.ensemble._forest.ExtraTreesRegressor
                            params:
                              bootstrap: true
                              ccp_alpha: 0.0
                              criterion: squared_error
                              max_depth: null
                              max_features: sqrt
                              max_leaf_nodes: null
                              max_samples: 0.5
                              min_impurity_decrease: 0.0
                              min_samples_leaf: 5
                              min_samples_split: 2
                              min_weight_fraction_leaf: 0.0
                              n_estimators: 150
                              n_jobs: 14
                              oob_score: false
                              random_state: 0
                              verbose: true
                              warm_start: false
                          max_node_size: 0.8
                          max_pvalue: 1.0
                          method: path
                          node_weights: log_node_size
                    - - densifier
                      - call: nakano_datasets_v2.estimators.Densifier
                        params: {}
                    - - pca
                      - call: sklearn.decomposition._pca.PCA
                        params:
                          copy: true
                          iterated_power: auto
                          n_components: 0.8
                          n_oversamples: 10
                          power_iteration_normalizer: auto
                          random_state: 0
                          svd_solver: auto
                          tol: 0.0
                          whiten: false
                    verbose: false
              - - rf_embedder
                - call: sklearn.pipeline.Pipeline
                  params:
                    memory: null
                    steps:
                    - - rf
                      - call: deep_forest.tree_embedder.ForestEmbedder
                        params:
                          estimator:
                            call: sklearn.ensemble._forest.RandomForestRegressor
                            params:
                              bootstrap: true
                              ccp_alpha: 0.0
                              criterion: squared_error
                              max_depth: null
                              max_features: sqrt
                              max_leaf_nodes: null
                              max_samples: 0.5
                              min_impurity_decrease: 0.0
                              min_samples_leaf: 5
                              min_samples_split: 2
                              min_weight_fraction_leaf: 0.0
                              n_estimators: 150
                              n_jobs: 14
                              oob_score: false
                              random_state: 0
                              verbose: true
                              warm_start: false
                          max_node_size: 0.95
                          max_pvalue: 1.0
                          method: path
                          node_weights: log_node_size
                    - - densifier
                      - call: nakano_datasets_v2.estimators.Densifier
                        params: {}
                    - - pca
                      - call: sklearn.decomposition._pca.PCA
                        params:
                          copy: true
                          iterated_power: auto
                          n_components: 0.8
                          n_oversamples: 10
                          power_iteration_normalizer: auto
                          random_state: 0
                          svd_solver: auto
                          tol: 0.0
                          whiten: false
                    verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding
  params:
    memory: estimators_cache
hash: 81cda73f6f6940bb8fc1ebfa83e00ad62754b45a71efe1791aeb7549ee34db39
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/81cda73_20231128T011841345019_embedding_PlantGO.yml
results:
  fit_time:
  - 167.64458632469177
  - 163.62598943710327
  - 161.28507900238037
  - 169.83971571922302
  - 148.31369733810425
  score_time:
  - 105.23157691955566
  - 107.62930250167847
  - 106.91318368911743
  - 88.27294087409973
  - 99.11600041389465
  test_average_precision_macro:
  - 0.7152806284108273
  - 0.7364466850156309
  - 0.681133239482426
  - 0.7367635718535985
  - 0.6882918310016692
  test_average_precision_micro:
  - 0.7328125017551121
  - 0.7071748530495184
  - 0.7120310077022196
  - 0.7632124153854174
  - 0.7245145854685702
  test_average_precision_samples:
  - 0.8370267030423281
  - 0.8408154761904761
  - 0.819627749576988
  - 0.8276531887356628
  - 0.821849816849817
  test_average_precision_weighted:
  - 0.8017152273549716
  - 0.7842027238380949
  - 0.7707249671434505
  - 0.8088991231878259
  - 0.7992037212168668
  test_coverage_error:
  - -1.765625
  - -1.665
  - -1.766497461928934
  - -1.8814432989690721
  - -1.841025641025641
  test_f1_macro:
  - 0.005649717514124293
  - 0.03896103896103897
  - 0.005555555555555556
  - 0.03095238095238095
  - 0.008201202843083651
  test_f1_micro:
  - 0.018779342723004695
  - 0.1145374449339207
  - 0.018779342723004695
  - 0.11607142857142856
  - 0.01869158878504673
  test_f1_samples:
  - 0.010416666666666666
  - 0.065
  - 0.01015228426395939
  - 0.06701030927835051
  - 0.010256410256410256
  test_f1_weighted:
  - 0.018314724074222823
  - 0.10389610389610392
  - 0.018095238095238095
  - 0.10033852403520648
  - 0.01833027137819076
  test_hamming_loss:
  - -0.09071180555555555
  - -0.08375
  - -0.08840947546531303
  - -0.08505154639175258
  - -0.08974358974358974
  test_jaccard_macro:
  - 0.0029239766081871343
  - 0.022222222222222223
  - 0.0028735632183908046
  - 0.019005847953216373
  - 0.00421455938697318
  test_jaccard_micro:
  - 0.009478672985781991
  - 0.06074766355140187
  - 0.009478672985781991
  - 0.061611374407582936
  - 0.009433962264150943
  test_jaccard_samples:
  - 0.010416666666666666
  - 0.065
  - 0.01015228426395939
  - 0.06701030927835051
  - 0.010256410256410256
  test_jaccard_weighted:
  - 0.009478672985781991
  - 0.059748427672955975
  - 0.00935960591133005
  - 0.061611374407582936
  - 0.009396960287628698
  test_label_ranking_average_precision_score:
  - 0.8370267030423281
  - 0.8408154761904763
  - 0.819627749576988
  - 0.8276531887356628
  - 0.8218498168498171
  test_label_ranking_loss:
  - 0.05765379489337822
  - 0.05181818181818182
  - 0.06035823548513904
  - 0.06923617619493908
  - 0.06466200466200467
  test_matthews_corrcoef_macro:
  - 0.013157894736842105
  - 0.0496896812657124
  - 0.008623045526080127
  - 0.0346237416389183
  - 0.017905106675186924
  test_matthews_corrcoef_micro:
  - 0.09283371380288996
  - 0.21751375231271974
  - 0.07239871138526924
  - 0.23736428849296684
  - 0.07211309950880439
  test_matthews_corrcoef_samples:
  - 0.010416666666666666
  - 0.06409090909090909
  - 0.009690816797415782
  - 0.06701030927835051
  - 0.009790209790209791
  test_matthews_corrcoef_weighted:
  - 0.04265402843601896
  - 0.12433378777240126
  - 0.028086491142089554
  - 0.11223999659251241
  - 0.03649733607595901
  test_ndgc:
  - 0.8787381741304015
  - 0.8823489153102725
  - 0.8657208143107897
  - 0.8713986443038292
  - 0.8677988485228575
  test_precision_macro:
  - 0.08333333333333333
  - 0.1527777777777778
  - 0.05555555555555555
  - 0.08333333333333333
  - 0.125
  test_precision_micro:
  - 1.0
  - 0.8666666666666667
  - 0.6666666666666666
  - 1.0
  - 0.6666666666666666
  test_precision_samples:
  - 0.010416666666666666
  - 0.065
  - 0.01015228426395939
  - 0.06701030927835051
  - 0.010256410256410256
  test_precision_weighted:
  - 0.27014218009478674
  - 0.369496855345912
  - 0.18095238095238095
  - 0.27014218009478674
  - 0.2772511848341232
  test_recall_macro:
  - 0.0029239766081871343
  - 0.022701149425287354
  - 0.0029239766081871343
  - 0.019005847953216373
  - 0.004239766081871345
  test_recall_micro:
  - 0.009478672985781991
  - 0.06132075471698113
  - 0.009523809523809525
  - 0.061611374407582936
  - 0.009478672985781991
  test_recall_samples:
  - 0.010416666666666666
  - 0.065
  - 0.01015228426395939
  - 0.06701030927835051
  - 0.010256410256410256
  test_recall_weighted:
  - 0.009478672985781991
  - 0.06132075471698113
  - 0.009523809523809525
  - 0.061611374407582936
  - 0.009478672985781991
  test_roc_auc_macro:
  - 0.9595961708594928
  - 0.9563418726974867
  - 0.9570978657829782
  - 0.9592428909327865
  - 0.9677424971857418
  test_roc_auc_micro:
  - 0.9508064570912295
  - 0.9525542409713359
  - 0.9493014104434718
  - 0.9521387459227602
  - 0.950584236196599
  test_roc_auc_samples:
  - 0.9423462051066217
  - 0.9481818181818181
  - 0.9396417645148609
  - 0.9307638238050608
  - 0.9353379953379952
  test_roc_auc_weighted:
  - 0.9608119393775759
  - 0.9569679982376341
  - 0.9574500443831296
  - 0.9646077344961029
  - 0.9669184121041139
start: 2023-11-28 01:18:41.345019
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
