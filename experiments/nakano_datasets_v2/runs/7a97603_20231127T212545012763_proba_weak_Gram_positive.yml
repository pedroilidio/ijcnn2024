active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/wJmZmZmZ6T8AmZmZmZnJvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ2b80MzMzMzPjP5iZmZmZmdm/NDMzMzMz4z+YmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJiZmZmZyb8AmpmZmZnpP4CZmZmZmQHAgGZmZmZmDkCAmZmZmZkBwA==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_positive
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_positive.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 21:26:56.920163
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler:
            call: deep_forest.weak_labels.PositiveUnlabeledImputer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesClassifier
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  class_weight: null
                  criterion: gini
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: 0.9
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: true
                  random_state: 0
                  verbose: true
                  warm_start: false
              sampling_strategy: auto
              threshold: 0.8
              use_oob_proba: true
              verbose: true
              weight_proba: true
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba_weak
  params:
    memory: estimators_cache
hash: 7a97603c2ed436b4f52335897a6bd14954d0d39cddff80fe97e9c6c28368931b
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/7a97603_20231127T212545012763_proba_weak_Gram_positive.yml
results:
  fit_time:
  - 47.24390149116516
  - 46.254899978637695
  - 44.15093779563904
  - 45.29673671722412
  - 45.54915237426758
  score_time:
  - 24.126882791519165
  - 20.792442798614502
  - 15.808879137039185
  - 18.282708883285522
  - 18.659140586853027
  test_average_precision_macro:
  - 0.8491817961273967
  - 0.9388210490096728
  - 0.9651915193262197
  - 0.8816242044336463
  - 0.91462662225289
  test_average_precision_micro:
  - 0.8310265926713725
  - 0.9180907168007878
  - 0.9805498821738939
  - 0.9035027051419797
  - 0.9527410450765135
  test_average_precision_samples:
  - 0.9439102564102563
  - 0.9741100323624595
  - 0.979559748427673
  - 0.9541666666666667
  - 0.9630503144654089
  test_average_precision_weighted:
  - 0.8887176739443491
  - 0.9734082360659811
  - 0.9882789105648973
  - 0.9716676780376571
  - 0.9719478282684645
  test_coverage_error:
  - -1.1346153846153846
  - -1.0679611650485437
  - -1.0471698113207548
  - -1.14
  - -1.0943396226415094
  test_f1_macro:
  - 0.011904761904761904
  - 0.0
  - 0.04347826086956521
  - 0.05263157894736842
  - 0.0
  test_f1_micro:
  - 0.01886792452830189
  - 0.0
  - 0.07272727272727272
  - 0.07547169811320754
  - 0.0
  test_f1_samples:
  - 0.009615384615384616
  - 0.0
  - 0.03773584905660377
  - 0.04
  - 0.0
  test_f1_weighted:
  - 0.018594104308390022
  - 0.0
  - 0.06890894175553731
  - 0.07017543859649122
  - 0.0
  test_hamming_loss:
  - -0.25
  - -0.2524271844660194
  - -0.24056603773584906
  - -0.245
  - -0.25
  test_jaccard_macro:
  - 0.006097560975609756
  - 0.0
  - 0.023809523809523808
  - 0.029411764705882353
  - 0.0
  test_jaccard_micro:
  - 0.009523809523809525
  - 0.0
  - 0.03773584905660377
  - 0.0392156862745098
  - 0.0
  test_jaccard_samples:
  - 0.009615384615384616
  - 0.0
  - 0.03773584905660377
  - 0.04
  - 0.0
  test_jaccard_weighted:
  - 0.009523809523809525
  - 0.0
  - 0.03773584905660377
  - 0.0392156862745098
  - 0.0
  test_label_ranking_average_precision_score:
  - 0.9439102564102565
  - 0.9741100323624596
  - 0.9795597484276729
  - 0.9541666666666666
  - 0.9630503144654088
  test_label_ranking_loss:
  - 0.041666666666666664
  - 0.019417475728155338
  - 0.015723270440251572
  - 0.04
  - 0.031446540880503145
  test_matthews_corrcoef_macro:
  - 0.030535127847745962
  - 0.0
  - 0.061113233135214086
  - 0.07109955737431514
  - 0.0
  test_matthews_corrcoef_micro:
  - 0.08448147671652198
  - 0.0
  - 0.1690308509457033
  - 0.17178706067884322
  - 0.0
  test_matthews_corrcoef_samples:
  - 0.009615384615384616
  - 0.0
  - 0.03773584905660377
  - 0.04
  - 0.0
  test_matthews_corrcoef_weighted:
  - 0.04769296159076512
  - 0.0
  - 0.09685870911996196
  - 0.09479940983242019
  - 0.0
  test_ndgc:
  - 0.9584458440590684
  - 0.9808128059639402
  - 0.9848376345350414
  - 0.9658532532593068
  - 0.9725030691125536
  test_precision_macro:
  - 0.25
  - 0.0
  - 0.25
  - 0.25
  - 0.0
  test_precision_micro:
  - 1.0
  - 0.0
  - 1.0
  - 1.0
  - 0.0
  test_precision_samples:
  - 0.009615384615384616
  - 0.0
  - 0.03773584905660377
  - 0.04
  - 0.0
  test_precision_weighted:
  - 0.3904761904761905
  - 0.0
  - 0.39622641509433965
  - 0.3333333333333333
  - 0.0
  test_recall_macro:
  - 0.006097560975609756
  - 0.0
  - 0.023809523809523808
  - 0.029411764705882353
  - 0.0
  test_recall_micro:
  - 0.009523809523809525
  - 0.0
  - 0.03773584905660377
  - 0.0392156862745098
  - 0.0
  test_recall_samples:
  - 0.009615384615384616
  - 0.0
  - 0.03773584905660377
  - 0.04
  - 0.0
  test_recall_weighted:
  - 0.009523809523809525
  - 0.0
  - 0.03773584905660377
  - 0.0392156862745098
  - 0.0
  test_roc_auc_macro:
  - 0.9710403174059847
  - 0.9888281555618719
  - 0.995658683286173
  - 0.9860666503869475
  - 0.9909822796163328
  test_roc_auc_micro:
  - 0.9676006737099984
  - 0.9834228271728271
  - 0.994749021003916
  - 0.9773654428214238
  - 0.9912187017918594
  test_roc_auc_samples:
  - 0.9583333333333334
  - 0.9805825242718447
  - 0.9842767295597485
  - 0.96
  - 0.9685534591194968
  test_roc_auc_weighted:
  - 0.9669353102948511
  - 0.9889726199273425
  - 0.9959860359299574
  - 0.9912540504292108
  - 0.99138194865401
start: 2023-11-27 21:25:45.012763
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
