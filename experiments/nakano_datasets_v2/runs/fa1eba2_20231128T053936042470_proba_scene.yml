active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            ADMzMzMz478AmpmZmZnZPwCamZmZmdk/ADMzMzMz478AmpmZmZnZPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyb8AmpmZmZnJvwCamZmZmcm/AJqZmZmZyb+AmZmZmZnpPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ADMzMzMz478AMzMzMzPjvwCamZmZmdk/AJqZmZmZ2T8AmpmZmZnZPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b+AMzMzMzPjP4AzMzMzM+M/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b+AMzMzMzPjP4AzMzMzM+M/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT+AmZmZmZnpvwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          QGZmZmZmFsAAmZmZmZn5vwAyMzMzM+O/wJmZmZmZFUCAMzMzMzMDQA==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-11-28 05:40:47.737735
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.9
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba
  params:
    memory: estimators_cache
hash: fa1eba27f9f30e57ed511cb5e8a784ca12abb43c97811ace4085d6c5b37e49c2
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/fa1eba2_20231128T053936042470_proba_scene.yml
results:
  fit_time:
  - 38.77096128463745
  - 39.04767203330994
  - 39.3317084312439
  - 38.60955572128296
  - 38.20974516868591
  score_time:
  - 31.034558057785034
  - 31.64682102203369
  - 31.06474018096924
  - 20.12305974960327
  - 17.197267293930054
  test_average_precision_macro:
  - 0.637931341828483
  - 0.6623818759909033
  - 0.6865781622184121
  - 0.6896855513006148
  - 0.6550603863999905
  test_average_precision_micro:
  - 0.6187403857043345
  - 0.6585372604015534
  - 0.6757930888845826
  - 0.6934073144336328
  - 0.6523216629108762
  test_average_precision_samples:
  - 0.7895961670088979
  - 0.8036749482401655
  - 0.8313623789764868
  - 0.8324754901960784
  - 0.8333333333333333
  test_average_precision_weighted:
  - 0.6181485153607983
  - 0.6446757804641435
  - 0.6674975399947579
  - 0.6729396644501142
  - 0.6361123909777061
  test_coverage_error:
  - -1.6960985626283367
  - -1.6770186335403727
  - -1.5684647302904564
  - -1.6050420168067228
  - -1.5949895615866387
  test_f1_macro:
  - 0.0045045045045045045
  - 0.003875968992248062
  - 0.007707386616769135
  - 0.0030864197530864196
  - 0.0
  test_f1_micro:
  - 0.003846153846153846
  - 0.003861003861003861
  - 0.007736943907156673
  - 0.0038535645472061652
  - 0.0
  test_f1_samples:
  - 0.002053388090349076
  - 0.002070393374741201
  - 0.004149377593360996
  - 0.0021008403361344537
  - 0.0
  test_f1_weighted:
  - 0.0038014893506222985
  - 0.003823489721559984
  - 0.007677195495726961
  - 0.003825253825253825
  - 0.0
  test_hamming_loss:
  - -0.17727583846680356
  - -0.17805383022774326
  - -0.17738589211618258
  - -0.18102240896358543
  - -0.17954070981210857
  test_jaccard_macro:
  - 0.00228310502283105
  - 0.00196078431372549
  - 0.003898768809849521
  - 0.001557632398753894
  - 0.0
  test_jaccard_micro:
  - 0.0019267822736030828
  - 0.0019342359767891683
  - 0.003883495145631068
  - 0.0019305019305019305
  - 0.0
  test_jaccard_samples:
  - 0.002053388090349076
  - 0.002070393374741201
  - 0.004149377593360996
  - 0.0021008403361344537
  - 0.0
  test_jaccard_weighted:
  - 0.0019267822736030828
  - 0.0019342359767891683
  - 0.003883495145631068
  - 0.0019305019305019303
  - 0.0
  test_label_ranking_average_precision_score:
  - 0.7895961670088976
  - 0.8036749482401653
  - 0.8313623789764867
  - 0.8324754901960779
  - 0.833333333333333
  test_label_ranking_loss:
  - 0.12397330595482546
  - 0.11873706004140785
  - 0.09589672660212079
  - 0.09994747899159663
  - 0.10156576200417537
  test_matthews_corrcoef_macro:
  - 0.018004014560049724
  - 0.016426963935658078
  - 0.03273037865118677
  - 0.01420114098628509
  - 0.0
  test_matthews_corrcoef_micro:
  - 0.0398132313918511
  - 0.039871280034673905
  - 0.05651673347808496
  - 0.03976072705939806
  - 0.0
  test_matthews_corrcoef_samples:
  - 0.002053388090349076
  - 0.002070393374741201
  - 0.004149377593360996
  - 0.0021008403361344537
  - 0.0
  test_matthews_corrcoef_weighted:
  - 0.015194139455302078
  - 0.016204548563221705
  - 0.03260259267272907
  - 0.017600641917364917
  - 0.0
  test_ndgc:
  - 0.843875866749594
  - 0.8545425947494791
  - 0.8759530829992455
  - 0.8766840847965679
  - 0.8765732006837816
  test_precision_macro:
  - 0.16666666666666666
  - 0.16666666666666666
  - 0.3333333333333333
  - 0.16666666666666666
  - 0.0
  test_precision_micro:
  - 1.0
  - 1.0
  - 1.0
  - 1.0
  - 0.0
  test_precision_samples:
  - 0.002053388090349076
  - 0.002070393374741201
  - 0.004149377593360996
  - 0.0021008403361344537
  - 0.0
  test_precision_weighted:
  - 0.14065510597302505
  - 0.1644100580270793
  - 0.3320388349514563
  - 0.20656370656370657
  - 0.0
  test_recall_macro:
  - 0.00228310502283105
  - 0.00196078431372549
  - 0.003898768809849521
  - 0.001557632398753894
  - 0.0
  test_recall_micro:
  - 0.0019267822736030828
  - 0.0019342359767891683
  - 0.003883495145631068
  - 0.0019305019305019305
  - 0.0
  test_recall_samples:
  - 0.002053388090349076
  - 0.002070393374741201
  - 0.004149377593360996
  - 0.0021008403361344537
  - 0.0
  test_recall_weighted:
  - 0.0019267822736030828
  - 0.0019342359767891683
  - 0.003883495145631068
  - 0.0019305019305019303
  - 0.0
  test_roc_auc_macro:
  - 0.8526186896444612
  - 0.864440421615326
  - 0.879898628372558
  - 0.8777652647302872
  - 0.8678060042504052
  test_roc_auc_micro:
  - 0.8614817541015285
  - 0.87309876626452
  - 0.8903484444371832
  - 0.8862415819216504
  - 0.8787329625027122
  test_roc_auc_samples:
  - 0.8760266940451745
  - 0.8815217391304347
  - 0.9041032733978792
  - 0.9000525210084034
  - 0.8986430062630482
  test_roc_auc_weighted:
  - 0.8408965148048937
  - 0.8558204879599522
  - 0.8689756925914485
  - 0.8685402999182654
  - 0.8578652052424673
start: 2023-11-28 05:39:36.042470
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop90
  params:
    drop: 0.9
    random_state: 0
