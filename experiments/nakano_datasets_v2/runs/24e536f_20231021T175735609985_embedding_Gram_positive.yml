active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb/AmZmZmZnpPwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ2b+YmZmZmZnZv5iZmZmZmdm/NDMzMzMz4z80MzMzMzPjPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJqZmZmZ6T8AMzMzMzPzv4CZmZmZmQHAAM3MzMzM/D8AmpmZmZnpPw==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_positive
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_positive.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:59:20.174190
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding
  params:
    memory: estimators_cache
hash: 24e536fe97491fb8683885c174f9d87738b316a151c78fca68fd9a300f9cadbc
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/24e536f_20231021T175735609985_embedding_Gram_positive.yml
results:
  fit_time:
  - 56.09390211105347
  - 51.14019989967346
  - 56.96163558959961
  - 55.06922912597656
  - 57.530184507369995
  score_time:
  - 42.14610242843628
  - 49.17991638183594
  - 46.91178369522095
  - 45.23424005508423
  - 41.37762093544006
  test_average_precision_macro:
  - 0.9017117890724444
  - 0.8878868178907509
  - 0.9698486171236171
  - 0.8637830861704661
  - 0.9719209745331948
  test_average_precision_micro:
  - 0.9781152974066464
  - 0.9713327845151741
  - 0.9891952634261467
  - 0.9850186347101922
  - 0.9879854798674546
  test_average_precision_samples:
  - 0.9530744336569579
  - 0.9523809523809523
  - 0.9677672955974843
  - 0.9681372549019608
  - 0.970873786407767
  test_average_precision_weighted:
  - 0.9719749439992754
  - 0.9657650546650014
  - 0.9935945937361031
  - 0.9758121189777498
  - 0.9894956088681203
  test_coverage_error:
  - -1.145631067961165
  - -1.1238095238095238
  - -1.0849056603773586
  - -1.0980392156862746
  - -1.0679611650485437
  test_f1_macro:
  - 0.6977699530516432
  - 0.7045247274385442
  - 0.7185174069627851
  - 0.6944630747447649
  - 0.7032028534845437
  test_f1_micro:
  - 0.926829268292683
  - 0.9275362318840579
  - 0.9417475728155339
  - 0.9238578680203046
  - 0.9253731343283582
  test_f1_samples:
  - 0.9190938511326862
  - 0.9142857142857143
  - 0.9150943396226415
  - 0.8856209150326798
  - 0.9029126213592233
  test_f1_weighted:
  - 0.9088569880823403
  - 0.9096349462970531
  - 0.9241285193322611
  - 0.9090096132349654
  - 0.9121037413290936
  test_hamming_loss:
  - -0.03640776699029126
  - -0.03571428571428571
  - -0.02830188679245283
  - -0.03676470588235294
  - -0.03640776699029126
  test_jaccard_macro:
  - 0.6583011583011583
  - 0.6654220779220779
  - 0.6898226773226773
  - 0.6493725868725869
  - 0.6622048878146439
  test_jaccard_micro:
  - 0.8636363636363636
  - 0.8648648648648649
  - 0.8899082568807339
  - 0.8584905660377359
  - 0.8611111111111112
  test_jaccard_samples:
  - 0.9174757281553398
  - 0.9142857142857143
  - 0.9150943396226415
  - 0.8823529411764706
  - 0.9029126213592233
  test_jaccard_weighted:
  - 0.8683174933174933
  - 0.8641991341991343
  - 0.8891674363372475
  - 0.8573284823284824
  - 0.8601774851774853
  test_label_ranking_average_precision_score:
  - 0.9530744336569579
  - 0.9523809523809523
  - 0.9677672955974842
  - 0.9681372549019608
  - 0.970873786407767
  test_label_ranking_loss:
  - 0.04530744336569579
  - 0.04126984126984127
  - 0.02830188679245283
  - 0.024509803921568627
  - 0.019417475728155338
  test_matthews_corrcoef_macro:
  - 0.679611874097954
  - 0.686185393272595
  - 0.7048975314846705
  - 0.6775847528417513
  - 0.6828766220445167
  test_matthews_corrcoef_micro:
  - 0.9027748347891064
  - 0.9040133315325639
  - 0.9237604307034012
  - 0.90216724174186
  - 0.9022916468885193
  test_matthews_corrcoef_samples:
  - 0.8988092259144623
  - 0.8952380952380953
  - 0.9056603773584906
  - 0.877333665408947
  - 0.8899676375404532
  test_matthews_corrcoef_weighted:
  - 0.8897688243496477
  - 0.8873791990607599
  - 0.906297180346944
  - 0.8871626799954803
  - 0.8852648074889597
  test_ndgc:
  - 0.9649036129168216
  - 0.9645510608680665
  - 0.9759848638901815
  - 0.977086214085949
  - 0.9785007623439683
  test_precision_macro:
  - 0.6944444444444444
  - 0.7019777097902098
  - 0.7279554263565892
  - 0.7361111111111112
  - 0.7161111111111111
  test_precision_micro:
  - 0.9405940594059405
  - 0.9411764705882353
  - 0.97
  - 0.978494623655914
  - 0.9587628865979382
  test_precision_samples:
  - 0.9223300970873787
  - 0.9142857142857143
  - 0.9150943396226415
  - 0.8921568627450981
  - 0.9029126213592233
  test_precision_weighted:
  - 0.9043803418803419
  - 0.9061313686313687
  - 0.9340079713324557
  - 0.952457264957265
  - 0.9332264957264957
  test_recall_macro:
  - 0.7011904761904763
  - 0.7079411764705882
  - 0.7097619047619047
  - 0.6625
  - 0.6923693379790941
  test_recall_micro:
  - 0.9134615384615384
  - 0.9142857142857143
  - 0.9150943396226415
  - 0.875
  - 0.8942307692307693
  test_recall_samples:
  - 0.9174757281553398
  - 0.9142857142857143
  - 0.9150943396226415
  - 0.8823529411764706
  - 0.9029126213592233
  test_recall_weighted:
  - 0.9134615384615384
  - 0.9142857142857143
  - 0.9150943396226415
  - 0.875
  - 0.8942307692307693
  test_roc_auc_macro:
  - 0.9891041034749151
  - 0.9830060441800172
  - 0.9979940671169355
  - 0.9812855987296286
  - 0.9961128232083247
  test_roc_auc_micro:
  - 0.9902597402597403
  - 0.984066515495087
  - 0.9951940192239231
  - 0.991966093117409
  - 0.9956918081918082
  test_roc_auc_samples:
  - 0.9546925566343042
  - 0.9587301587301587
  - 0.9716981132075472
  - 0.9754901960784313
  - 0.9805825242718448
  test_roc_auc_weighted:
  - 0.9922750472824932
  - 0.9842063829358887
  - 0.9989214616393501
  - 0.9946451510601914
  - 0.9961803582857077
start: 2023-10-21 17:57:35.609985
wrapper: null
