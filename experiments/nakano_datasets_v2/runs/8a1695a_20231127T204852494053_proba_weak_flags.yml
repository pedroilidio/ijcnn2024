active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MDMzMzMz8z+AmZmZmZnJP4CZmZmZmck/gJmZmZmZyT/QzMzMzMz8vw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZAcAwMzMzMzPzv2hmZmZmZg5A0MzMzMzM/D+YmZmZmZkBwA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyT+gmZmZmZnpvzAzMzMzM/M/gJmZmZmZyT+gmZmZmZnpvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT9AMzMzMzPzPwCamZmZmck/YGZmZmZmBsBAMzMzMzPzPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            zMzMzMzMBMA0MzMzMzMDQKCZmZmZmdk/ZmZmZmZmFsCamZmZmZkVQA==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mpmZmZmZCUA0MzMzMzPzPzQzMzMzM/M/zMzMzMzM/L9mZmZmZmYOwA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/IDMzMzMz87/gzMzMzMz8Pw==
      n_labels: 7
      n_samples: 194
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: flags
  params:
    path: nakano_datasets_v2/datasets/MLC/flags.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 20:50:03.884817
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler:
            call: deep_forest.weak_labels.PositiveUnlabeledImputer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesClassifier
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  class_weight: null
                  criterion: gini
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: 0.9
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: true
                  random_state: 0
                  verbose: true
                  warm_start: false
              sampling_strategy: auto
              threshold: 0.8
              use_oob_proba: true
              verbose: true
              weight_proba: true
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba_weak
  params:
    memory: estimators_cache
hash: 8a1695afd4aecdbd205facaed1d16f3b5ac015a72257f41d9c6b3e6f43c0aef0
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/8a1695a_20231127T204852494053_proba_weak_flags.yml
results:
  fit_time:
  - 43.0444278717041
  - 48.73074817657471
  - 44.042837619781494
  - 47.277567863464355
  - 42.42818212509155
  score_time:
  - 8.592900037765503
  - 22.266830921173096
  - 12.89420199394226
  - 20.465099096298218
  - 8.75862193107605
  test_average_precision_macro:
  - 0.6872226669963888
  - 0.5711922919739161
  - 0.6029734943029057
  - 0.66158213974497
  - 0.693382238479501
  test_average_precision_micro:
  - 0.6432173743204006
  - 0.5799065536425276
  - 0.5839111694208926
  - 0.6799973805059303
  - 0.7085399092344554
  test_average_precision_samples:
  - 0.7096530321530321
  - 0.6745258445258445
  - 0.6898107448107448
  - 0.7056587301587302
  - 0.7753625053625054
  test_average_precision_weighted:
  - 0.7258417123960865
  - 0.6640103580208653
  - 0.6785616997022068
  - 0.7093330952196466
  - 0.763618264990386
  test_coverage_error:
  - -5.487179487179487
  - -5.564102564102564
  - -5.102564102564102
  - -5.5
  - -5.4324324324324325
  test_f1_macro:
  - 0.16489705347502012
  - 0.18624017308227833
  - 0.2061938061938062
  - 0.2470392808286105
  - 0.1811188811188811
  test_f1_micro:
  - 0.19736842105263158
  - 0.22085889570552145
  - 0.21333333333333335
  - 0.3181818181818182
  - 0.2625
  test_f1_samples:
  - 0.153968253968254
  - 0.18290598290598292
  - 0.1663003663003663
  - 0.2567857142857143
  - 0.2254826254826255
  test_f1_weighted:
  - 0.18982220962901175
  - 0.21112610586294794
  - 0.20470489510489512
  - 0.3039888198880021
  - 0.24588769439515706
  test_hamming_loss:
  - -0.4468864468864469
  - -0.4652014652014652
  - -0.43223443223443225
  - -0.42857142857142855
  - -0.4555984555984556
  test_jaccard_macro:
  - 0.09453583881104888
  - 0.10820228091236493
  - 0.12209311156679578
  - 0.15450415812257917
  - 0.10912671288611138
  test_jaccard_micro:
  - 0.10948905109489052
  - 0.12413793103448276
  - 0.11940298507462686
  - 0.1891891891891892
  - 0.1510791366906475
  test_jaccard_samples:
  - 0.10769230769230767
  - 0.12655677655677655
  - 0.11452991452991454
  - 0.17351190476190476
  - 0.16531531531531532
  test_jaccard_weighted:
  - 0.10942611777535442
  - 0.12294769070418865
  - 0.11803551302498672
  - 0.1920897731575505
  - 0.1491697357368999
  test_label_ranking_average_precision_score:
  - 0.7096530321530323
  - 0.6745258445258447
  - 0.6898107448107448
  - 0.7056587301587302
  - 0.7753625053625054
  test_label_ranking_loss:
  - 0.36025641025641025
  - 0.4141025641025641
  - 0.33888888888888896
  - 0.36375
  - 0.3207207207207207
  test_matthews_corrcoef_macro:
  - 0.08442923812795734
  - -0.031600131239965995
  - 0.07949365605566173
  - 0.09806671906252458
  - 0.056887990539658935
  test_matthews_corrcoef_micro:
  - 0.1354595195594306
  - 0.04297534900899073
  - 0.11606183152024013
  - 0.2031701920700058
  - 0.19407729100866838
  test_matthews_corrcoef_samples:
  - 0.0848779104978202
  - 0.003935997242181809
  - 0.06734130175149451
  - 0.1187072398382822
  - 0.15067253940213726
  test_matthews_corrcoef_weighted:
  - 0.06409105719622929
  - -0.07799438545663233
  - 0.027299333790779052
  - 0.11133342925152379
  - 0.05780042678395108
  test_ndgc:
  - 0.8127424711748418
  - 0.794407496873248
  - 0.8031645867597177
  - 0.8192981478685685
  - 0.8641828142047109
  test_precision_macro:
  - 0.6887755102040816
  - 0.3726190476190476
  - 0.5738095238095238
  - 0.5999999999999999
  - 0.5811688311688312
  test_precision_micro:
  - 0.7142857142857143
  - 0.5294117647058824
  - 0.64
  - 0.7567567567567568
  - 0.8076923076923077
  test_precision_samples:
  - 0.32051282051282054
  - 0.3333333333333333
  - 0.3333333333333333
  - 0.4875
  - 0.4189189189189189
  test_precision_weighted:
  - 0.759814612868048
  - 0.46027131782945735
  - 0.6294666666666666
  - 0.6906474820143885
  - 0.725067842605156
  test_recall_macro:
  - 0.09953280886343767
  - 0.13304863541341833
  - 0.13191786911279157
  - 0.16279761904761905
  - 0.11420381704155656
  test_recall_micro:
  - 0.11450381679389313
  - 0.13953488372093023
  - 0.128
  - 0.2014388489208633
  - 0.15671641791044777
  test_recall_samples:
  - 0.10982905982905983
  - 0.13034188034188032
  - 0.11794871794871795
  - 0.17726190476190476
  - 0.1698198198198198
  test_recall_weighted:
  - 0.11450381679389313
  - 0.13953488372093023
  - 0.128
  - 0.2014388489208633
  - 0.15671641791044777
  test_roc_auc_macro:
  - 0.664920221198223
  - 0.5730685433268504
  - 0.6427182819134123
  - 0.6450276682642754
  - 0.6395916236793633
  test_roc_auc_micro:
  - 0.6711106332652403
  - 0.6395887166236004
  - 0.6664864864864865
  - 0.6648298382570539
  - 0.6989253731343285
  test_roc_auc_samples:
  - 0.6397435897435897
  - 0.5858974358974358
  - 0.6611111111111112
  - .nan
  - 0.6792792792792792
  test_roc_auc_weighted:
  - 0.6023832919656898
  - 0.5353623308424509
  - 0.6008152144706866
  - 0.6387126662306518
  - 0.5999459547500593
start: 2023-11-27 20:48:52.494053
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
