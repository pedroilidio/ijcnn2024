active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb/AmZmZmZnpPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz4z+YmZmZmZnZvzQzMzMzM+M/mJmZmZmZ2b+YmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z9AMzMzMzPjPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          ADMzMzMz878AMzMzMzPzvwCYmZmZmcm/AJqZmZmZ6T8AzczMzMz8Pw==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: GrampositivePseAAC
  params:
    path: nakano_datasets_v2/datasets/MLC/GrampositivePseAAC.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 21:51:20.839469
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_tree_embedder_pvalue
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler:
      call: deep_forest.weak_labels.PositiveUnlabeledImputer
      params:
        estimator:
          call: sklearn.ensemble._forest.ExtraTreesClassifier
          params:
            bootstrap: true
            ccp_alpha: 0.0
            class_weight: null
            criterion: gini
            max_depth: null
            max_features: sqrt
            max_leaf_nodes: null
            max_samples: 0.9
            min_impurity_decrease: 0.0
            min_samples_leaf: 5
            min_samples_split: 2
            min_weight_fraction_leaf: 0.0
            n_estimators: 150
            n_jobs: 14
            oob_score: true
            random_state: 0
            verbose: true
            warm_start: false
        sampling_strategy: auto
        threshold: 0.8
        use_oob_proba: true
        verbose: true
        weight_proba: true
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_weak_chi2
  params:
    memory: estimators_cache
hash: a83cd38e2f64e7b01a709ba2d7e55089d69b9b4f11724481289d0cafb0026420
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/a83cd38_20231127T214841726816_embedding_weak_chi2_GrampositivePseAAC.yml
results:
  fit_time:
  - 78.84614634513855
  - 74.46253752708435
  - 73.93278360366821
  - 77.59925818443298
  - 76.22148084640503
  score_time:
  - 78.53481316566467
  - 69.18154311180115
  - 75.32053780555725
  - 71.66523146629333
  - 65.24406671524048
  test_average_precision_macro:
  - 0.4166907361485013
  - 0.37779283437491207
  - 0.3810637716607929
  - 0.3836815284780063
  - 0.4890615326984639
  test_average_precision_micro:
  - 0.5213196619031428
  - 0.44848340069223974
  - 0.4557952693942522
  - 0.44735393896566084
  - 0.5439568505452479
  test_average_precision_samples:
  - 0.7309523809523808
  - 0.6873015873015873
  - 0.6915064102564101
  - 0.6658576051779935
  - 0.7189542483660128
  test_average_precision_weighted:
  - 0.5438350443444996
  - 0.4586058395218484
  - 0.45659664644887493
  - 0.454925739957407
  - 0.5576736389767605
  test_coverage_error:
  - -1.7142857142857142
  - -1.8476190476190477
  - -1.7980769230769231
  - -1.9029126213592233
  - -1.7549019607843137
  test_f1_macro:
  - 0.26704545454545453
  - 0.2272534013605442
  - 0.21940059482955848
  - 0.22897465437788017
  - 0.2729173008625064
  test_f1_micro:
  - 0.4534883720930233
  - 0.40229885057471265
  - 0.38095238095238093
  - 0.38418079096045193
  - 0.42307692307692313
  test_f1_samples:
  - 0.37142857142857144
  - 0.3333333333333333
  - 0.30448717948717946
  - 0.3268608414239482
  - 0.3202614379084967
  test_f1_weighted:
  - 0.3939393939393939
  - 0.33395691609977324
  - 0.3255090368336765
  - 0.33540706605222737
  - 0.38610492924098455
  test_hamming_loss:
  - -0.22380952380952382
  - -0.24761904761904763
  - -0.25
  - -0.2645631067961165
  - -0.22058823529411764
  test_jaccard_macro:
  - 0.18253968253968253
  - 0.14910714285714285
  - 0.14135338345864662
  - 0.14849806201550386
  - 0.17973484848484847
  test_jaccard_micro:
  - 0.2932330827067669
  - 0.2517985611510791
  - 0.23529411764705882
  - 0.23776223776223776
  - 0.2682926829268293
  test_jaccard_samples:
  - 0.37142857142857144
  - 0.3333333333333333
  - 0.30288461538461536
  - 0.32524271844660196
  - 0.31862745098039214
  test_jaccard_weighted:
  - 0.26984126984126977
  - 0.22003401360544217
  - 0.21037593984962405
  - 0.21744186046511627
  - 0.2555163283318623
  test_label_ranking_average_precision_score:
  - 0.7309523809523807
  - 0.6873015873015872
  - 0.6915064102564106
  - 0.6658576051779941
  - 0.7189542483660128
  test_label_ranking_loss:
  - 0.23809523809523805
  - 0.28253968253968254
  - 0.26282051282051283
  - 0.29530744336569575
  - 0.24673202614379086
  test_matthews_corrcoef_macro:
  - 0.15303907298009517
  - 0.10859126527140416
  - 0.10256144613485411
  - 0.07660261278965057
  - 0.196226421281344
  test_matthews_corrcoef_micro:
  - 0.33412165601321214
  - 0.26340233329937013
  - 0.24851226490205222
  - 0.22953847120685014
  - 0.3292613032995251
  test_matthews_corrcoef_samples:
  - 0.28253968253968254
  - 0.22539682539682537
  - 0.20426939361400281
  - 0.20301634565556276
  - 0.2540263098286564
  test_matthews_corrcoef_weighted:
  - 0.22129229072860068
  - 0.15489267851044897
  - 0.14303070050949052
  - 0.1026739127994781
  - 0.2567249270162734
  test_ndgc:
  - 0.799374702475573
  - 0.7666280959198096
  - 0.7703145340584451
  - 0.7514046192793613
  - 0.7912191013332116
  test_precision_macro:
  - 0.302536231884058
  - 0.2788961038961039
  - 0.3002450980392157
  - 0.25770308123249297
  - 0.565625
  test_precision_micro:
  - 0.582089552238806
  - 0.5072463768115942
  - 0.5079365079365079
  - 0.4722222222222222
  - 0.6226415094339622
  test_precision_samples:
  - 0.37142857142857144
  - 0.3333333333333333
  - 0.3076923076923077
  - 0.3300970873786408
  - 0.3235294117647059
  test_precision_weighted:
  - 0.43961352657004826
  - 0.3988744588744589
  - 0.43039215686274507
  - 0.37105508870214754
  - 0.6879854368932039
  test_recall_macro:
  - 0.2488095238095238
  - 0.22282229965156794
  - 0.2011904761904762
  - 0.21785714285714286
  - 0.2231139406982305
  test_recall_micro:
  - 0.37142857142857144
  - 0.3333333333333333
  - 0.3047619047619048
  - 0.3238095238095238
  - 0.32038834951456313
  test_recall_samples:
  - 0.37142857142857144
  - 0.3333333333333333
  - 0.30288461538461536
  - 0.32524271844660196
  - 0.31862745098039214
  test_recall_weighted:
  - 0.37142857142857144
  - 0.3333333333333333
  - 0.3047619047619048
  - 0.3238095238095238
  - 0.32038834951456313
  test_roc_auc_macro:
  - 0.6241095382597484
  - 0.6447121271111682
  - 0.6824340744660103
  - 0.6391441115235105
  - 0.6707661826619558
  test_roc_auc_micro:
  - 0.7841572184429328
  - 0.7454875283446711
  - 0.7424896646761598
  - 0.7255467659376453
  - 0.7757440713035174
  test_roc_auc_samples:
  - 0.7619047619047619
  - 0.7174603174603175
  - 0.7371794871794872
  - 0.7046925566343043
  - 0.7532679738562089
  test_roc_auc_weighted:
  - 0.7011365657374061
  - 0.6412467165083856
  - 0.6216254306281477
  - 0.5949319060777382
  - 0.6822415617650724
start: 2023-11-27 21:48:41.726816
wrapper: null
