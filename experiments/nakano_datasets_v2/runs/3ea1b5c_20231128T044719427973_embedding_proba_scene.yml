active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AmpmZmZnZPwCamZmZmdk/ADMzMzMz478AMzMzMzPjvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyb8AmpmZmZnJvwCamZmZmcm/AJqZmZmZyb+AmZmZmZnpPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ADMzMzMz478AMzMzMzPjvwCamZmZmdk/AJqZmZmZ2T8AmpmZmZnZPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b8AmZmZmZnZv4AzMzMzM+M/AJmZmZmZ2b+AMzMzMzPjPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gDMzMzMz4z8AmZmZmZnZv4AzMzMzM+M/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT+AmZmZmZnpvwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gDMzMzMzA0AAMjMzMzPjvwCcmZmZmdk/AJmZmZmZ+b8AMjMzMzPjvw==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-11-28 04:58:18.223721
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 3ea1b5cb89836a87916d9bbbdb981e32bd37d976a71f5b741699859639e9bab0
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/3ea1b5c_20231128T044719427973_embedding_proba_scene.yml
results:
  fit_time:
  - 384.90249037742615
  - 428.3056993484497
  - 471.18869042396545
  - 475.06864404678345
  - 482.94912004470825
  score_time:
  - 162.61472868919373
  - 153.66293048858643
  - 143.30676078796387
  - 158.33112835884094
  - 160.30550336837769
  test_average_precision_macro:
  - 0.4886069232120018
  - 0.4713134605270432
  - 0.4732418118105161
  - 0.4706989082372864
  - 0.5163551320253793
  test_average_precision_micro:
  - 0.4613039673087143
  - 0.44865223162679113
  - 0.44763691338690403
  - 0.4494518887364897
  - 0.48512227275992637
  test_average_precision_samples:
  - 0.7076896311760613
  - 0.6838174273858921
  - 0.68501386001386
  - 0.6914251207729469
  - 0.728630705394191
  test_average_precision_weighted:
  - 0.4754348516718195
  - 0.4595311381416917
  - 0.4594961589351424
  - 0.46069154315447275
  - 0.5041322103413752
  test_coverage_error:
  - -2.139874739039666
  - -2.1701244813278007
  - -2.0935550935550937
  - -2.1387163561076603
  - -1.987551867219917
  test_f1_macro:
  - 0.06752215051817644
  - 0.06158262157998604
  - 0.045824977486653574
  - 0.05209435903262377
  - 0.06670886867277627
  test_f1_micro:
  - 0.06716417910447761
  - 0.06343283582089551
  - 0.045540796963946875
  - 0.05628517823639775
  - 0.0707635009310987
  test_f1_samples:
  - 0.037578288100208766
  - 0.03457814661134163
  - 0.02356202356202356
  - 0.031055900621118012
  - 0.03872752420470262
  test_f1_weighted:
  - 0.06587577567390225
  - 0.0625910716051129
  - 0.04477025890036068
  - 0.054878504212760214
  - 0.06952625153911875
  test_hamming_loss:
  - -0.17397355601948503
  - -0.173582295988935
  - -0.1742896742896743
  - -0.173567977915804
  - -0.17254495159059474
  test_jaccard_macro:
  - 0.035656878770062655
  - 0.03223996208083311
  - 0.023907244048328304
  - 0.027490851797853304
  - 0.03516216697852624
  test_jaccard_micro:
  - 0.03474903474903475
  - 0.03275529865125241
  - 0.02330097087378641
  - 0.02895752895752896
  - 0.03667953667953668
  test_jaccard_samples:
  - 0.037578288100208766
  - 0.03423236514522822
  - 0.02286902286902287
  - 0.031055900621118012
  - 0.038381742738589214
  test_jaccard_weighted:
  - 0.03472586272347657
  - 0.03275529865125241
  - 0.02330097087378641
  - 0.02895752895752896
  - 0.036669488253289376
  test_label_ranking_average_precision_score:
  - 0.7076896311760607
  - 0.6838174273858914
  - 0.6850138600138592
  - 0.6914251207729463
  - 0.7286307053941905
  test_label_ranking_loss:
  - 0.20931338436557645
  - 0.21571576763485475
  - 0.20223492723492725
  - 0.21009316770186337
  - 0.1807572614107884
  test_matthews_corrcoef_macro:
  - 0.14558358147677378
  - 0.1542446635044354
  - 0.12102130459657302
  - 0.12587666937825903
  - 0.1399161953087349
  test_matthews_corrcoef_micro:
  - 0.16300554515961327
  - 0.16442608879998277
  - 0.13864665735457754
  - 0.15461332040948736
  - 0.1622491522065744
  test_matthews_corrcoef_samples:
  - 0.037160751565762005
  - 0.034507169153596834
  - 0.023419773521969545
  - 0.031055900621118012
  - 0.03782667122828563
  test_matthews_corrcoef_weighted:
  - 0.14247809319554203
  - 0.1556789499825661
  - 0.1207354501023802
  - 0.13064172157842444
  - 0.14328766578588614
  test_ndgc:
  - 0.7821474680302559
  - 0.7642698733402448
  - 0.7651997379807802
  - 0.7702115562881122
  - 0.7978706335898068
  test_precision_macro:
  - 0.8055555555555557
  - 1.0
  - 0.8333333333333334
  - 0.8333333333333334
  - 0.753968253968254
  test_precision_micro:
  - 0.9473684210526315
  - 1.0
  - 1.0
  - 1.0
  - 0.9047619047619048
  test_precision_samples:
  - 0.037578288100208766
  - 0.035269709543568464
  - 0.02494802494802495
  - 0.031055900621118012
  - 0.03941908713692946
  test_precision_weighted:
  - 0.7975499677627338
  - 1.0
  - 0.8466019417475729
  - 0.8474903474903475
  - 0.7617201919527501
  test_recall_macro:
  - 0.03573035199641897
  - 0.03223996208083311
  - 0.023907244048328304
  - 0.027490851797853304
  - 0.03529325347951733
  test_recall_micro:
  - 0.03481624758220503
  - 0.03275529865125241
  - 0.02330097087378641
  - 0.02895752895752896
  - 0.03682170542635659
  test_recall_samples:
  - 0.037578288100208766
  - 0.03423236514522822
  - 0.02286902286902287
  - 0.031055900621118012
  - 0.038381742738589214
  test_recall_weighted:
  - 0.03481624758220503
  - 0.03275529865125241
  - 0.02330097087378641
  - 0.02895752895752896
  - 0.03682170542635659
  test_roc_auc_macro:
  - 0.7157880052321125
  - 0.7477817330393918
  - 0.7366926187806194
  - 0.753605058241343
  - 0.7774781056341805
  test_roc_auc_micro:
  - 0.7179987345812999
  - 0.7440781690615441
  - 0.7473480117766049
  - 0.7545869699231043
  - 0.777470685537546
  test_roc_auc_samples:
  - 0.7915216887033172
  - 0.7842842323651452
  - 0.7977650727650727
  - 0.7899068322981366
  - 0.8192427385892117
  test_roc_auc_weighted:
  - 0.7013966765205193
  - 0.7347519582458715
  - 0.722230323796567
  - 0.743043772636256
  - 0.7664463586415583
start: 2023-11-28 04:47:19.427973
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
