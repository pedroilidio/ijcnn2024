active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ6b8AmpmZmZnJPwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJv8CZmZmZmek/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb/AmZmZmZnpPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJmZmZmZ2b/gzMzMzMwEQACZmZmZmdm/IDMzMzMzC8DAmZmZmZn5Pw==
      n_labels: 6
      n_samples: 593
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: emotions
  params:
    path: nakano_datasets_v2/datasets/MLC/emotions.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:34:24.445946
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding
  params:
    memory: estimators_cache
hash: dfdf83c75ee5cb6266cfc6314bbef9d22043ec37fb304a2680725b071dfad2a8
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/dfdf83c_20231021T183225537580_embedding_emotions.yml
results:
  fit_time:
  - 63.78334951400757
  - 59.32196402549744
  - 57.742106914520264
  - 60.8206467628479
  - 58.75168061256409
  score_time:
  - 37.666006326675415
  - 39.356241941452026
  - 57.13474225997925
  - 55.955241680145264
  - 29.361393928527832
  test_average_precision_macro:
  - 0.7258521468512736
  - 0.7475884224012003
  - 0.7564165253573606
  - 0.7401130299983819
  - 0.6968477391869127
  test_average_precision_micro:
  - 0.7285981414206119
  - 0.7590521751172437
  - 0.7464304773515392
  - 0.7362944770206138
  - 0.7110437351153444
  test_average_precision_samples:
  - 0.7970821661998132
  - 0.826125478927203
  - 0.8298319327731091
  - 0.7935109289617486
  - 0.7722222222222224
  test_average_precision_weighted:
  - 0.7260057110690592
  - 0.7429760641882212
  - 0.7565514107569076
  - 0.7393844108041275
  - 0.7044258477462614
  test_coverage_error:
  - -2.8151260504201683
  - -2.7586206896551726
  - -2.5294117647058822
  - -2.680327868852459
  - -2.8632478632478633
  test_f1_macro:
  - 0.5755493944698095
  - 0.662485608540497
  - 0.5749401977218528
  - 0.6297503354149206
  - 0.5725158083536812
  test_f1_micro:
  - 0.6393861892583119
  - 0.6995073891625616
  - 0.6385224274406333
  - 0.6734177215189874
  - 0.6272493573264781
  test_f1_samples:
  - 0.5823529411764705
  - 0.6396551724137931
  - 0.5605042016806723
  - 0.5827868852459016
  - 0.5586894586894586
  test_f1_weighted:
  - 0.5923678483980973
  - 0.6717671567585803
  - 0.5920177927755196
  - 0.6420211390477368
  - 0.5892596869418124
  test_hamming_loss:
  - -0.19747899159663865
  - -0.1752873563218391
  - -0.19187675070028012
  - -0.1762295081967213
  - -0.20655270655270655
  test_jaccard_macro:
  - 0.43649465805645354
  - 0.5193055002355732
  - 0.4380936962332311
  - 0.48545229689210806
  - 0.4325266975669279
  test_jaccard_micro:
  - 0.4699248120300752
  - 0.5378787878787878
  - 0.4689922480620155
  - 0.5076335877862596
  - 0.45692883895131087
  test_jaccard_samples:
  - 0.5049019607843137
  - 0.5761494252873564
  - 0.484593837535014
  - 0.5211748633879781
  - 0.49786324786324787
  test_jaccard_weighted:
  - 0.45268654742429015
  - 0.5280370480342483
  - 0.4538732332178421
  - 0.4969652939844132
  - 0.4487875397222966
  test_label_ranking_average_precision_score:
  - 0.7970821661998131
  - 0.8261254789272029
  - 0.8298319327731093
  - 0.7935109289617487
  - 0.772222222222222
  test_label_ranking_loss:
  - 0.16841736694677872
  - 0.14626436781609195
  - 0.1196311858076564
  - 0.15960837887067394
  - 0.1839981006647673
  test_matthews_corrcoef_macro:
  - 0.49389174099569705
  - 0.5788111270419111
  - 0.5016634455068011
  - 0.5556597159852248
  - 0.4652856038688735
  test_matthews_corrcoef_micro:
  - 0.5177353273469208
  - 0.5823694995755763
  - 0.525002685137328
  - 0.5642641413518547
  - 0.49498845107168876
  test_matthews_corrcoef_samples:
  - 0.509487384433769
  - 0.5603328067007344
  - 0.5013178448872914
  - 0.5212479519500219
  - 0.4711351991144447
  test_matthews_corrcoef_weighted:
  - 0.49784757758813397
  - 0.5744229311044383
  - 0.5046004369565299
  - 0.5552103237658857
  - 0.471558705729042
  test_ndgc:
  - 0.8620667516704966
  - 0.8841151358552966
  - 0.883138283942398
  - 0.8545589255363338
  - 0.8425965949875914
  test_precision_macro:
  - 0.8109196602617654
  - 0.82769413592943
  - 0.8293876262626263
  - 0.830499964516358
  - 0.7046322960904496
  test_precision_micro:
  - 0.7485029940119761
  - 0.7717391304347826
  - 0.7610062893081762
  - 0.7732558139534884
  - 0.7176470588235294
  test_precision_samples:
  - 0.658263305322129
  - 0.699712643678161
  - 0.6512605042016807
  - 0.6366120218579235
  - 0.6210826210826211
  test_precision_weighted:
  - 0.7988725534073279
  - 0.8115114703349998
  - 0.8147296831955924
  - 0.815509995407812
  - 0.7017962141947155
  test_recall_macro:
  - 0.5290498258224177
  - 0.6151090980576669
  - 0.5191911975193708
  - 0.5719900641186931
  - 0.5287014849474186
  test_recall_micro:
  - 0.5580357142857143
  - 0.6396396396396397
  - 0.55
  - 0.5964125560538116
  - 0.5570776255707762
  test_recall_samples:
  - 0.5770308123249299
  - 0.6293103448275862
  - 0.5504201680672268
  - 0.5860655737704918
  - 0.5555555555555556
  test_recall_weighted:
  - 0.5580357142857143
  - 0.6396396396396397
  - 0.55
  - 0.5964125560538116
  - 0.5570776255707762
  test_roc_auc_macro:
  - 0.8373049954661728
  - 0.8489165345686039
  - 0.875544539709617
  - 0.8665814770689365
  - 0.8268348215677244
  test_roc_auc_micro:
  - 0.8592110058309038
  - 0.8708328581746303
  - 0.8853422892896576
  - 0.87815729426379
  - 0.8477173676697203
  test_roc_auc_samples:
  - 0.8315826330532212
  - 0.853735632183908
  - 0.8803688141923435
  - 0.840391621129326
  - 0.8160018993352326
  test_roc_auc_weighted:
  - 0.8353717531634907
  - 0.8454446929074343
  - 0.8728779001242893
  - 0.8649902027825508
  - 0.8306411273392212
start: 2023-10-21 18:32:25.537580
wrapper: null
