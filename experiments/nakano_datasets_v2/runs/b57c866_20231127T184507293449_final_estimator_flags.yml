active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP0AzMzMzM+M/gJmZmZmZ2b+AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyT+AmZmZmZnJPzAzMzMzM/M/MDMzMzMz8z9oZmZmZmYGwA==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ6T+gmZmZmZnpP2hmZmZmZgZAMDMzMzMz87+YmZmZmZkJwA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ6b+AmZmZmZnJP4CZmZmZmck/gJmZmZmZyT+AmZmZmZnJPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT+AmZmZmZnpvwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MDMzMzMz47+gmZmZmZnZP2ZmZmZmZhLANDMzMzMzA0A0MzMzMzMDQA==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZyT9mZmZmZmYGwJqZmZmZmQFAoJmZmZmZyT+gmZmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          4MzMzMzM/D/gzMzMzMz8P5CZmZmZmQHAIDMzMzMz878AmZmZmZnJvw==
      n_labels: 7
      n_samples: 194
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: flags
  params:
    path: nakano_datasets_v2/datasets/MLC/flags.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 18:45:11.426000
estimator:
  call: nakano_datasets_v2.estimators.final_estimator
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
        params:
          estimators:
          - - rf
            - call: sklearn.ensemble._forest.RandomForestClassifier
              params:
                bootstrap: true
                ccp_alpha: 0.0
                class_weight: null
                criterion: gini
                max_depth: null
                max_features: sqrt
                max_leaf_nodes: null
                max_samples: 0.9
                min_impurity_decrease: 0.0
                min_samples_leaf: 5
                min_samples_split: 2
                min_weight_fraction_leaf: 0.0
                n_estimators: 150
                n_jobs: 14
                oob_score: true
                random_state: 0
                verbose: true
                warm_start: false
          - - xt
            - call: sklearn.ensemble._forest.ExtraTreesClassifier
              params:
                bootstrap: true
                ccp_alpha: 0.0
                class_weight: null
                criterion: gini
                max_depth: null
                max_features: sqrt
                max_leaf_nodes: null
                max_samples: 0.9
                min_impurity_decrease: 0.0
                min_samples_leaf: 5
                min_samples_split: 2
                min_weight_fraction_leaf: 0.0
                n_estimators: 150
                n_jobs: 14
                oob_score: true
                random_state: 0
                verbose: true
                warm_start: false
    verbose: false
  name: final_estimator
  params: {}
hash: b57c866e58499422257d4e2b1158e80ba6a79ccf15f9879feecd1929fa208eb5
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/b57c866_20231127T184507293449_final_estimator_flags.yml
results:
  fit_time:
  - 1.16513991355896
  - 1.1616737842559814
  - 1.16477370262146
  - 1.1509664058685303
  - 1.231126308441162
  score_time:
  - 2.675206184387207
  - 2.7821340560913086
  - 2.8759801387786865
  - 2.7662720680236816
  - 2.759028673171997
  test_average_precision_macro:
  - 0.7294012918683344
  - 0.8433968524065436
  - 0.6492746692463479
  - 0.6761577543627248
  - 0.7414060477730144
  test_average_precision_micro:
  - 0.8193829487644199
  - 0.8157783139753452
  - 0.7238680911549831
  - 0.7604852696698866
  - 0.8007463678621757
  test_average_precision_samples:
  - 0.8485671385671385
  - 0.8603700128700129
  - 0.7935830429732867
  - 0.8234920634920634
  - 0.8258007733007733
  test_average_precision_weighted:
  - 0.7834778791239597
  - 0.8423308613600258
  - 0.7183898299948437
  - 0.7449459183567807
  - 0.807321034178125
  test_coverage_error:
  - -4.702702702702703
  - -4.675675675675675
  - -4.560975609756097
  - -4.6
  - -4.6923076923076925
  test_f1_macro:
  - 0.08276643990929707
  - 0.015037593984962405
  - 0.07404786475993906
  - 0.023966165413533833
  - 0.0441017316017316
  test_f1_micro:
  - 0.12587412587412586
  - 0.014925373134328356
  - 0.10294117647058823
  - 0.030534351145038167
  - 0.07142857142857142
  test_f1_samples:
  - 0.0981981981981982
  - 0.007722007722007721
  - 0.06747967479674796
  - 0.020833333333333336
  - 0.04212454212454212
  test_f1_weighted:
  - 0.11285473785473787
  - 0.014246141669964385
  - 0.09903707437007171
  - 0.029707262341901262
  - 0.06811167227833895
  test_hamming_loss:
  - -0.4826254826254826
  - -0.5096525096525096
  - -0.4250871080139373
  - -0.45357142857142857
  - -0.47619047619047616
  test_jaccard_macro:
  - 0.04952035260565207
  - 0.007936507936507936
  - 0.04031359670304903
  - 0.012544802867383511
  - 0.02399491498490386
  test_jaccard_micro:
  - 0.06716417910447761
  - 0.007518796992481203
  - 0.05426356589147287
  - 0.015503875968992248
  - 0.037037037037037035
  test_jaccard_samples:
  - 0.06756756756756757
  - 0.0045045045045045045
  - 0.044715447154471545
  - 0.013333333333333332
  - 0.025641025641025637
  test_jaccard_weighted:
  - 0.06818181818181818
  - 0.007518796992481203
  - 0.05426356589147287
  - 0.015503875968992248
  - 0.037037037037037035
  test_label_ranking_average_precision_score:
  - 0.8485671385671384
  - 0.8603700128700129
  - 0.7935830429732867
  - 0.8234920634920636
  - 0.8258007733007731
  test_label_ranking_loss:
  - 0.17117117117117114
  - 0.17612612612612616
  - 0.22845528455284553
  - 0.18708333333333332
  - 0.18333333333333335
  test_matthews_corrcoef_macro:
  - -0.008140001826185628
  - 0.02446196032924197
  - 0.09534342313800859
  - 0.03761541873276986
  - 0.041089084996671583
  test_matthews_corrcoef_micro:
  - 0.12998039906481265
  - 0.06059678724350826
  - 0.17498615670606546
  - 0.09176693326417537
  - 0.13809891424658716
  test_matthews_corrcoef_samples:
  - 0.06416624999641277
  - 0.0045045045045045045
  - 0.059349771723641295
  - 0.01824008526345482
  - 0.029181312498915347
  test_matthews_corrcoef_weighted:
  - -0.038377552297525284
  - 0.023174488732966077
  - 0.11886336076940991
  - 0.045435484589053894
  - 0.06353555327753578
  test_ndgc:
  - 0.9116941642522276
  - 0.9162071880818293
  - 0.8721369101551121
  - 0.9018982816932406
  - 0.8936311090562348
  test_precision_macro:
  - 0.2857142857142857
  - 0.14285714285714285
  - 0.5714285714285714
  - 0.2857142857142857
  - 0.2857142857142857
  test_precision_micro:
  - 0.8181818181818182
  - 1.0
  - 1.0
  - 1.0
  - 1.0
  test_precision_samples:
  - 0.1891891891891892
  - 0.02702702702702703
  - 0.14634146341463414
  - 0.05
  - 0.1282051282051282
  test_precision_weighted:
  - 0.36363636363636365
  - 0.13533834586466165
  - 0.7286821705426356
  - 0.3798449612403101
  - 0.4444444444444444
  test_recall_macro:
  - 0.04952035260565207
  - 0.007936507936507936
  - 0.04031359670304903
  - 0.012544802867383511
  - 0.02399491498490386
  test_recall_micro:
  - 0.06818181818181818
  - 0.007518796992481203
  - 0.05426356589147287
  - 0.015503875968992248
  - 0.037037037037037035
  test_recall_samples:
  - 0.06756756756756757
  - 0.0045045045045045045
  - 0.044715447154471545
  - 0.013333333333333332
  - 0.025641025641025637
  test_recall_weighted:
  - 0.06818181818181818
  - 0.007518796992481203
  - 0.05426356589147287
  - 0.015503875968992248
  - 0.037037037037037035
  test_roc_auc_macro:
  - 0.7031044662832174
  - 0.7794882320744391
  - 0.6587343897911525
  - 0.6963059876954915
  - 0.7287680997232174
  test_roc_auc_micro:
  - 0.833303507516106
  - 0.8461033536221505
  - 0.7813757236777549
  - 0.8100005133733764
  - 0.8332259796027911
  test_roc_auc_samples:
  - .nan
  - 0.8238738738738739
  - 0.7715447154471544
  - .nan
  - 0.8166666666666667
  test_roc_auc_weighted:
  - 0.6731049317398001
  - 0.7171823994347635
  - 0.6246954135038857
  - 0.6474685364290096
  - 0.709606602099223
start: 2023-11-27 18:45:07.293449
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
