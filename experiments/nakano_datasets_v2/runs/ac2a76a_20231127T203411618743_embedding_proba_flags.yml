active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyT+gmZmZmZnpv4CZmZmZmck/gJmZmZmZyT+AmZmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb8wMzMzMzPzv8zMzMzMzBDANDMzMzMzF0CAmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMzG8CYmZmZmZkBQJiZmZmZmQFAgJmZmZmZyT+YmZmZmZkBQA==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT8AmpmZmZnJPwCamZmZmck/AJqZmZmZyT+AmZmZmZnpvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            zMzMzMzMBMA0MzMzMzMDQGhmZmZmZvY/mJmZmZmZ+b+gmZmZmZnZPw==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ6b+YmZmZmZnpv6CZmZmZmck/NDMzMzMz8z+gmZmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          yMzMzMzMEMDAmZmZmZnpPyAzMzMzM/O/4MzMzMzM/D9wZmZmZmYGQA==
      n_labels: 7
      n_samples: 194
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: flags
  params:
    path: nakano_datasets_v2/datasets/MLC/flags.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 20:35:58.367286
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: ac2a76a6731239eb79335f237958a6a4ba229dd2536d186fade58afa7a2caef0
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/ac2a76a_20231127T203411618743_embedding_proba_flags.yml
results:
  fit_time:
  - 48.287761926651
  - 49.43316125869751
  - 48.44046092033386
  - 52.860336780548096
  - 49.783785343170166
  score_time:
  - 55.612682580947876
  - 55.51686120033264
  - 56.25295853614807
  - 51.25403141975403
  - 56.49143075942993
  test_average_precision_macro:
  - 0.575259100140319
  - 0.6341120976911663
  - 0.6743677795037627
  - 0.6036966018873026
  - 0.6947456314118973
  test_average_precision_micro:
  - 0.6027070009826236
  - 0.659784885444346
  - 0.6763554800692249
  - 0.6469975723994901
  - 0.7753109926425187
  test_average_precision_samples:
  - 0.6921834625322998
  - 0.7010933583959901
  - 0.7372142857142856
  - 0.6589564564564565
  - 0.8201973104056437
  test_average_precision_weighted:
  - 0.6441384728063786
  - 0.7094127574161049
  - 0.7165506311749962
  - 0.6819083089200486
  - 0.7939895365864474
  test_coverage_error:
  - -5.488372093023256
  - -5.684210526315789
  - -5.225
  - -5.486486486486487
  - -5.111111111111111
  test_f1_macro:
  - 0.26957298510093547
  - 0.2891360639500248
  - 0.32434083978418954
  - 0.2606376052887681
  - 0.4035425261338883
  test_f1_micro:
  - 0.3769633507853403
  - 0.4180790960451978
  - 0.4285714285714286
  - 0.35714285714285715
  - 0.5161290322580645
  test_f1_samples:
  - 0.3241786637135474
  - 0.3725563909774436
  - 0.3634920634920635
  - 0.29002574002574005
  - 0.501984126984127
  test_f1_weighted:
  - 0.3529092576245057
  - 0.3877736766883485
  - 0.4088526272577997
  - 0.34044880432229263
  - 0.4984979719147876
  test_hamming_loss:
  - -0.3953488372093023
  - -0.38721804511278196
  - -0.37142857142857144
  - -0.416988416988417
  - -0.35714285714285715
  test_jaccard_macro:
  - 0.17434051881622215
  - 0.1922665805452616
  - 0.21371076500775749
  - 0.16224823262638388
  - 0.2821067821067821
  test_jaccard_micro:
  - 0.23225806451612904
  - 0.2642857142857143
  - 0.2727272727272727
  - 0.21739130434782608
  - 0.34782608695652173
  test_jaccard_samples:
  - 0.2295127353266888
  - 0.2609649122807018
  - 0.2670238095238095
  - 0.20765765765765765
  - 0.37222222222222223
  test_jaccard_weighted:
  - 0.2302942977558445
  - 0.26156185005178345
  - 0.2699038790157211
  - 0.2148403361344538
  - 0.3480808080808081
  test_label_ranking_average_precision_score:
  - 0.6921834625322997
  - 0.70109335839599
  - 0.7372142857142856
  - 0.6589564564564565
  - 0.8201973104056438
  test_label_ranking_loss:
  - 0.3643410852713178
  - 0.36622807017543857
  - 0.2970833333333333
  - 0.37927927927927924
  - 0.27731481481481485
  test_matthews_corrcoef_macro:
  - 0.08612004948052009
  - 0.0793852675973631
  - 0.13437993011294275
  - 0.030002521087044782
  - 0.19738999407963523
  test_matthews_corrcoef_micro:
  - 0.2322559025622084
  - 0.26840392363884535
  - 0.28821528114491013
  - 0.19201581885653007
  - 0.365016786667038
  test_matthews_corrcoef_samples:
  - 0.18331674270046552
  - 0.21944403879030397
  - 0.22101073078440409
  - 0.13178563301108565
  - 0.37708272677371196
  test_matthews_corrcoef_weighted:
  - 0.11121504388996843
  - 0.08961531362325251
  - 0.13544681904439426
  - -0.0008541853716947543
  - 0.22634723078170962
  test_ndgc:
  - 0.8098105450789265
  - 0.816175587235997
  - 0.8446595926434135
  - 0.7734786910550342
  - 0.9063646339072721
  test_precision_macro:
  - 0.484608843537415
  - 0.5003401360544218
  - 0.5655623787976729
  - 0.5
  - 0.6188775510204082
  test_precision_micro:
  - 0.7346938775510204
  - 0.7708333333333334
  - 0.78
  - 0.6976744186046512
  - 0.8571428571428571
  test_precision_samples:
  - 0.5658914728682171
  - 0.6447368421052632
  - 0.6041666666666667
  - 0.4864864864864865
  - 0.8217592592592592
  test_precision_weighted:
  - 0.6138455734406438
  - 0.6404761904761904
  - 0.7061634443987385
  - 0.62
  - 0.779010989010989
  test_recall_macro:
  - 0.19170895351095574
  - 0.2103219872340951
  - 0.23317685435316135
  - 0.1806161545077801
  - 0.3021249359959037
  test_recall_micro:
  - 0.2535211267605634
  - 0.2868217054263566
  - 0.29545454545454547
  - 0.24
  - 0.36923076923076925
  test_recall_samples:
  - 0.24224806201550386
  - 0.27149122807017545
  - 0.27994047619047613
  - 0.21666666666666665
  - 0.39537037037037037
  test_recall_weighted:
  - 0.2535211267605634
  - 0.2868217054263566
  - 0.29545454545454547
  - 0.24
  - 0.36923076923076925
  test_roc_auc_macro:
  - 0.6004101931347525
  - 0.6586091076525319
  - 0.6656632122798894
  - 0.6013186722721053
  - 0.6797251981391766
  test_roc_auc_micro:
  - 0.6531136504561964
  - 0.6950715781135065
  - 0.7166257166257166
  - 0.6760000000000002
  - 0.7402900378310214
  test_roc_auc_samples:
  - 0.6356589147286822
  - 0.6337719298245614
  - .nan
  - 0.6207207207207207
  - 0.7226851851851852
  test_roc_auc_weighted:
  - 0.6003540475126513
  - 0.616590679395777
  - 0.6199322729106453
  - 0.540566114891973
  - 0.6553127717333673
start: 2023-11-27 20:34:11.618743
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
