active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            NDMzMzMz4z80MzMzMzPjP5iZmZmZmdm/mJmZmZmZ2b+YmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            kJmZmZmZ2b84MzMzMzPjP5CZmZmZmdm/ODMzMzMz4z+QmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            IDMzMzMz478gMzMzMzPjv8CZmZmZmdk/wJmZmZmZ2T/AmZmZmZnZPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+AmZmZmZnJv4CZmZmZmcm/gJmZmZmZyb+gmZmZmZnpPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          QDMzMzMzC0BAMzMzMzMLQGBmZmZmZhLAgJmZmZmZ+b8AMzMzMzPjvw==
      n_labels: 6
      n_samples: 207
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: VirusGO
  params:
    path: nakano_datasets_v2/datasets/MLC/VirusGO.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:29:47.160631
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - rf
          - call: deep_forest.estimator_adapters.EstimatorAsTransformer
            params:
              estimator:
                call: sklearn.ensemble._forest.RandomForestRegressor
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  criterion: squared_error
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: null
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: false
                  random_state: 0
                  verbose: true
                  warm_start: false
        - - xt
          - call: deep_forest.estimator_adapters.EstimatorAsTransformer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesRegressor
                params:
                  bootstrap: false
                  ccp_alpha: 0.0
                  criterion: squared_error
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: null
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: false
                  random_state: 0
                  verbose: true
                  warm_start: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: proba
  params:
    memory: estimators_cache
hash: b9ea7c5f125c791ead58d4e461ee47f535d67e7daf4ca6a1b861bc5f84255383
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/b9ea7c5_20231021T172853289176_proba_VirusGO.yml
results:
  fit_time:
  - 34.72067952156067
  - 34.54540276527405
  - 33.44051551818848
  - 35.64950776100159
  - 36.253710985183716
  score_time:
  - 16.06275463104248
  - 13.878580808639526
  - 19.85872197151184
  - 8.182654857635498
  - 15.17428469657898
  test_average_precision_macro:
  - 0.9099186079660623
  - 0.9051016775526578
  - 0.9562791063223588
  - 0.912988578806251
  - 0.9214790423583317
  test_average_precision_micro:
  - 0.9124587589401956
  - 0.8737856416094674
  - 0.8725109203107151
  - 0.8418672009249216
  - 0.8682185300171134
  test_average_precision_samples:
  - 0.9368421052631579
  - 0.9364035087719299
  - 0.857608695652174
  - 0.8941860465116278
  - 0.9194444444444445
  test_average_precision_weighted:
  - 0.9324405906153314
  - 0.9123118400118401
  - 0.9566408456979392
  - 0.9198692497843601
  - 0.9182658822658822
  test_coverage_error:
  - -1.7105263157894737
  - -1.5526315789473684
  - -1.5217391304347827
  - -1.4651162790697674
  - -1.4285714285714286
  test_f1_macro:
  - 0.31341991341991343
  - 0.3313834154351396
  - 0.2957516339869281
  - 0.30476190476190473
  - 0.3588325652841782
  test_f1_micro:
  - 0.761904761904762
  - 0.7012987012987013
  - 0.7126436781609194
  - 0.7441860465116279
  - 0.6582278481012658
  test_f1_samples:
  - 0.6403508771929824
  - 0.587719298245614
  - 0.572463768115942
  - 0.627906976744186
  - 0.5436507936507936
  test_f1_weighted:
  - 0.6458874458874457
  - 0.630665024630542
  - 0.5915032679738562
  - 0.6217142857142857
  - 0.5977327188940091
  test_hamming_loss:
  - -0.08771929824561403
  - -0.10087719298245613
  - -0.09057971014492754
  - -0.08527131782945736
  - -0.10714285714285714
  test_jaccard_macro:
  - 0.2962962962962963
  - 0.2750544662309368
  - 0.2671957671957672
  - 0.2807017543859649
  - 0.28439153439153436
  test_jaccard_micro:
  - 0.6153846153846154
  - 0.54
  - 0.5535714285714286
  - 0.5925925925925926
  - 0.49056603773584906
  test_jaccard_samples:
  - 0.631578947368421
  - 0.5789473684210527
  - 0.5543478260869565
  - 0.6162790697674418
  - 0.5198412698412698
  test_jaccard_weighted:
  - 0.6111111111111112
  - 0.54
  - 0.5343915343915344
  - 0.5726315789473684
  - 0.4833333333333333
  test_label_ranking_average_precision_score:
  - 0.9368421052631577
  - 0.9364035087719297
  - 0.857608695652174
  - 0.8941860465116279
  - 0.9194444444444445
  test_label_ranking_loss:
  - 0.053947368421052626
  - 0.039473684210526314
  - 0.08097826086956524
  - 0.06162790697674418
  - 0.044576719576719576
  test_matthews_corrcoef_macro:
  - 0.29817431553063384
  - 0.32330217046031057
  - 0.27274336835333557
  - 0.28551223034065704
  - 0.3273220728119702
  test_matthews_corrcoef_micro:
  - 0.7364597995079443
  - 0.6915265397827336
  - 0.6748947576580414
  - 0.7081399801326228
  - 0.6312891670937452
  test_matthews_corrcoef_samples:
  - 0.6385502911596671
  - 0.5859187122122987
  - 0.564397340438443
  - 0.6208689906070006
  - 0.5383212203730556
  test_matthews_corrcoef_weighted:
  - 0.6149447957002838
  - 0.5921120538308018
  - 0.5454867367066711
  - 0.5824449498949403
  - 0.531918994161236
  test_ndgc:
  - 0.9597567238355907
  - 0.9565154380843655
  - 0.8946469223794853
  - 0.9210232145380848
  - 0.9412647165204197
  test_precision_macro:
  - 0.3229166666666667
  - 0.5
  - 0.2884416924664603
  - 0.2962962962962963
  - 0.4603174603174603
  test_precision_micro:
  - 0.9696969696969697
  - 1.0
  - 0.8611111111111112
  - 0.8888888888888888
  - 0.896551724137931
  test_precision_samples:
  - 0.6447368421052632
  - 0.6052631578947368
  - 0.5652173913043478
  - 0.6162790697674418
  - 0.5595238095238095
  test_precision_weighted:
  - 0.6654411764705882
  - 0.82
  - 0.5768833849329205
  - 0.6044444444444445
  - 0.7223809523809525
  test_recall_macro:
  - 0.3044662309368192
  - 0.2750544662309368
  - 0.30392156862745096
  - 0.3137254901960784
  - 0.30304621848739494
  test_recall_micro:
  - 0.6274509803921569
  - 0.54
  - 0.6078431372549019
  - 0.64
  - 0.52
  test_recall_samples:
  - 0.6447368421052632
  - 0.5789473684210527
  - 0.5978260869565217
  - 0.6511627906976745
  - 0.5555555555555556
  test_recall_weighted:
  - 0.6274509803921569
  - 0.54
  - 0.6078431372549019
  - 0.64
  - 0.52
  test_roc_auc_macro:
  - 0.978225429956929
  - 0.9470182170090258
  - 0.9878639784826397
  - 0.9577677224736049
  - 0.9567368718742557
  test_roc_auc_micro:
  - 0.9613382075994239
  - 0.9481460674157303
  - 0.9583442265795207
  - 0.9449038461538461
  - 0.9540594059405941
  test_roc_auc_samples:
  - 0.9460526315789475
  - 0.9605263157894737
  - 0.9190217391304347
  - 0.9383720930232559
  - 0.9554232804232805
  test_roc_auc_weighted:
  - 0.9721473662203655
  - 0.9285337885154062
  - 0.982353684179242
  - 0.9538461538461537
  - 0.9404097165991904
start: 2023-10-21 17:28:53.289176
wrapper: null
