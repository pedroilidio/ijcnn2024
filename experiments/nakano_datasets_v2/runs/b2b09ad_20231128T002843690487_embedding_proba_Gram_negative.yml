active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwAzMzMzM+O/AJqZmZmZ2T8AmpmZmZnZPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+AmZmZmZnJv6CZmZmZmek/gJmZmZmZyb+AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z9AMzMzMzPjPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MDMzMzMz478wMzMzMzPjv6CZmZmZmdk/oJmZmZmZ2T+gmZmZmZnZPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MDMzMzMz47+YmZmZmZn5v6CZmZmZmdk/MDMzMzMz4780MzMzMzMDQA==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz4z9mZmZmZmb2vzQzMzMzM+M/mJmZmZmZ2b80MzMzMzPjPw==
        ? !!python/tuple
        - 7
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          ADIzMzMz478AMjMzMzPjv4DMzMzMzATAgDMzMzMzA0AAZ2ZmZmb2Pw==
      n_labels: 8
      n_samples: 1392
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_negative
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_negative.csv
directory: nakano_datasets_v2/runs
end: 2023-11-28 00:33:59.235242
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: b2b09ad99e01faaebced3939b0eed47cd82e9c6c651298c3ef5db1e5d1a8e3f6
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/b2b09ad_20231128T002843690487_embedding_proba_Gram_negative.yml
results:
  fit_time:
  - 162.14243030548096
  - 169.83861327171326
  - 177.38245630264282
  - 188.05574893951416
  - 187.99363732337952
  score_time:
  - 117.90113091468811
  - 117.17820715904236
  - 122.30814051628113
  - 123.5263524055481
  - 123.12974643707275
  test_average_precision_macro:
  - 0.7549970477255692
  - 0.7514628970086619
  - 0.8651862388421838
  - 0.7729778495383935
  - 0.7589412465546698
  test_average_precision_micro:
  - 0.8793283745879632
  - 0.8557123434858361
  - 0.8708131930981772
  - 0.877766335463911
  - 0.8448604504517249
  test_average_precision_samples:
  - 0.9077402287079707
  - 0.898758320532514
  - 0.9337824097610573
  - 0.9176069703243616
  - 0.9021660649819494
  test_average_precision_weighted:
  - 0.8933328806013963
  - 0.8648681019998289
  - 0.8767637676316618
  - 0.889371048957046
  - 0.8511206297302515
  test_coverage_error:
  - -1.3225806451612903
  - -1.4014336917562724
  - -1.217081850533808
  - -1.2934782608695652
  - -1.3104693140794224
  test_f1_macro:
  - 0.13063284233497002
  - 0.10608045336306206
  - 0.06956167813925855
  - 0.09910381156511187
  - 0.12404730575977935
  test_f1_micro:
  - 0.1806853582554517
  - 0.1834862385321101
  - 0.12861736334405144
  - 0.22492401215805466
  - 0.17142857142857146
  test_f1_samples:
  - 0.1003584229390681
  - 0.1063321385902031
  - 0.06998813760379596
  - 0.13405797101449277
  - 0.0950661853188929
  test_f1_weighted:
  - 0.17668691941498704
  - 0.18173616760573283
  - 0.12666744987706852
  - 0.21543004001272173
  - 0.16370663980331682
  test_hamming_loss:
  - -0.117831541218638
  - -0.1196236559139785
  - -0.12055160142348754
  - -0.11548913043478261
  - -0.1177797833935018
  test_jaccard_macro:
  - 0.07435499523914159
  - 0.05848477242302543
  - 0.03757042057117359
  - 0.057450794167661634
  - 0.07328474816279694
  test_jaccard_micro:
  - 0.09931506849315068
  - 0.10101010101010101
  - 0.06872852233676977
  - 0.1267123287671233
  - 0.09375
  test_jaccard_samples:
  - 0.0985663082437276
  - 0.1057347670250896
  - 0.0693950177935943
  - 0.13405797101449277
  - 0.09386281588447654
  test_jaccard_weighted:
  - 0.09931506849315068
  - 0.10098502116574407
  - 0.06859160781055255
  - 0.1263611145613381
  - 0.0930442637759711
  test_label_ranking_average_precision_score:
  - 0.907740228707971
  - 0.8987583205325143
  - 0.9337824097610575
  - 0.9176069703243618
  - 0.9021660649819497
  test_label_ranking_loss:
  - 0.03780508619218296
  - 0.044546850998463894
  - 0.02452974072191154
  - 0.030926501035196684
  - 0.03799209214371668
  test_matthews_corrcoef_macro:
  - 0.19136767124940773
  - 0.1647176571748693
  - 0.11673673787241838
  - 0.1379114415080077
  - 0.17839868956700283
  test_matthews_corrcoef_micro:
  - 0.2957339538122982
  - 0.29222556140359823
  - 0.2385280413716666
  - 0.32935114546899824
  - 0.28124608487566366
  test_matthews_corrcoef_samples:
  - 0.1002292509395123
  - 0.10577704848692054
  - 0.06943699831975386
  - 0.13354037267080746
  - 0.09446371912837116
  test_matthews_corrcoef_weighted:
  - 0.26131877024608097
  - 0.2554051422475748
  - 0.20009164193406453
  - 0.2677238269948298
  - 0.24605405256579363
  test_ndgc:
  - 0.9318080283074188
  - 0.9257903125982887
  - 0.9516260638159384
  - 0.9401901632983242
  - 0.9279058590478165
  test_precision_macro:
  - 0.625
  - 0.6125
  - 0.4875
  - 0.49375
  - 0.6111111111111112
  test_precision_micro:
  - 1.0
  - 0.967741935483871
  - 0.9523809523809523
  - 0.9736842105263158
  - 0.9642857142857143
  test_precision_samples:
  - 0.1039426523297491
  - 0.10752688172043011
  - 0.0711743772241993
  - 0.13405797101449277
  - 0.09747292418772563
  test_precision_weighted:
  - 0.9623287671232876
  - 0.925
  - 0.8579310344827586
  - 0.8587628865979381
  - 0.9655439411536971
  test_recall_macro:
  - 0.07435499523914159
  - 0.0586500677506775
  - 0.037735715898825656
  - 0.05779975097048268
  - 0.07470924958729837
  test_recall_micro:
  - 0.09931506849315068
  - 0.10135135135135136
  - 0.06896551724137931
  - 0.12714776632302405
  - 0.09407665505226481
  test_recall_samples:
  - 0.0985663082437276
  - 0.1057347670250896
  - 0.0693950177935943
  - 0.13405797101449277
  - 0.09386281588447654
  test_recall_weighted:
  - 0.09931506849315068
  - 0.10135135135135136
  - 0.06896551724137931
  - 0.12714776632302405
  - 0.09407665505226481
  test_roc_auc_macro:
  - 0.9646842876387645
  - 0.9299108276406144
  - 0.9713997605081809
  - 0.9695984155586347
  - .nan
  test_roc_auc_micro:
  - 0.9715153226945347
  - 0.9646483066227385
  - 0.9753293297171639
  - 0.976036440099167
  - 0.9679700807228024
  test_roc_auc_samples:
  - 0.9621949138078171
  - 0.9556024918928144
  - 0.9754702592780886
  - 0.9690734989648033
  - 0.9620079078562833
  test_roc_auc_weighted:
  - 0.9581148348371942
  - 0.9403086701946085
  - 0.9566200208978707
  - 0.9537862696727603
  - .nan
start: 2023-11-28 00:28:43.690487
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
