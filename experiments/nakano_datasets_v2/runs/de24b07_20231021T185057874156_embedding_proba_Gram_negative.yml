active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwCamZmZmdk/ADMzMzMz478AmpmZmZnZPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+AmZmZmZnJv6CZmZmZmek/gJmZmZmZyb+AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ2T8wMzMzMzPjvzAzMzMzM+O/oJmZmZmZ2T+gmZmZmZnZPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MDMzMzMz479oZmZmZmb2PzAzMzMzM+O/mJmZmZmZ+b9oZmZmZmb2Pw==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ2b80MzMzMzPjP5iZmZmZmdm/mJmZmZmZ2b80MzMzMzPjPw==
        ? !!python/tuple
        - 7
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJyZmZmZ2T+AMzMzMzMLQEBmZmZmZhbAAGdmZmZm9j8AnJmZmZnZPw==
      n_labels: 8
      n_samples: 1392
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_negative
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_negative.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:55:29.814856
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.ExtraTreesRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.8
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        - - rf
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.RandomForestRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.95
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_proba
  params:
    memory: estimators_cache
hash: de24b07654913777ecf455ec3bf12a0506b48e3702fd0f7e6c3c6405b537c2ba
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/de24b07_20231021T185057874156_embedding_proba_Gram_negative.yml
results:
  fit_time:
  - 138.0157880783081
  - 143.258150100708
  - 155.56660175323486
  - 154.44912028312683
  - 173.54900765419006
  score_time:
  - 101.18636083602905
  - 102.11735081672668
  - 89.19596695899963
  - 108.01339530944824
  - 96.56336688995361
  test_average_precision_macro:
  - 0.8404551326722172
  - 0.8676991811816783
  - 0.8818200979341881
  - 0.8591252598029087
  - 0.9861878918666951
  test_average_precision_micro:
  - 0.9665432303113584
  - 0.9814832068297297
  - 0.977114808769782
  - 0.9802964461483449
  - 0.9826353480813076
  test_average_precision_samples:
  - 0.96636690647482
  - 0.9808225108225108
  - 0.9751173708920188
  - 0.9796974385422038
  - 0.9722422062350119
  test_average_precision_weighted:
  - 0.9692974263932352
  - 0.9829582686299757
  - 0.9695135399359636
  - 0.980527218955301
  - 0.9831662698489125
  test_coverage_error:
  - -1.1474820143884892
  - -1.1236363636363635
  - -1.1161971830985915
  - -1.144404332129964
  - -1.1115107913669064
  test_f1_macro:
  - 0.690473489927886
  - 0.6958217107481813
  - 0.7641416621042352
  - 0.7027901299075616
  - 0.805369182766368
  test_f1_micro:
  - 0.9241622574955908
  - 0.9484902309058615
  - 0.9493891797556718
  - 0.9399293286219083
  - 0.9361702127659575
  test_f1_samples:
  - 0.920863309352518
  - 0.9466666666666665
  - 0.9448356807511736
  - 0.9410348977135982
  - 0.9256594724220625
  test_f1_weighted:
  - 0.9152317328126236
  - 0.9444971285133557
  - 0.9435178132496754
  - 0.930407171956732
  - 0.9340332452530774
  test_hamming_loss:
  - -0.01933453237410072
  - -0.013181818181818182
  - -0.012764084507042254
  - -0.015342960288808664
  - -0.01618705035971223
  test_jaccard_macro:
  - 0.6431863089336678
  - 0.6514643981749245
  - 0.7034504138252609
  - 0.6616705835373162
  - 0.7508774003764986
  test_jaccard_micro:
  - 0.8590163934426229
  - 0.902027027027027
  - 0.9036544850498339
  - 0.8866666666666667
  - 0.88
  test_jaccard_samples:
  - 0.9118705035971223
  - 0.9381818181818182
  - 0.9401408450704225
  - 0.9332129963898917
  - 0.920863309352518
  test_jaccard_weighted:
  - 0.8592277896938326
  - 0.9016681846082936
  - 0.903523235454038
  - 0.886480446553392
  - 0.8805119931614356
  test_label_ranking_average_precision_score:
  - 0.96636690647482
  - 0.9808225108225108
  - 0.9751173708920186
  - 0.9796974385422038
  - 0.9722422062350119
  test_label_ranking_loss:
  - 0.01237581363480644
  - 0.007705627705627706
  - 0.01131790744466801
  - 0.009583977995530341
  - 0.01027749229188078
  test_matthews_corrcoef_macro:
  - 0.6812579695306712
  - 0.6899877781711848
  - 0.7678643900402957
  - 0.6954203950161473
  - 0.7973598542159926
  test_matthews_corrcoef_micro:
  - 0.9136334762634962
  - 0.941504572949827
  - 0.9423166792582724
  - 0.9319119533454384
  - 0.9272826381092398
  test_matthews_corrcoef_samples:
  - 0.9145625053568026
  - 0.9439771738853932
  - 0.9404731416296009
  - 0.9368610025964034
  - 0.9206889031652861
  test_matthews_corrcoef_weighted:
  - 0.8974269120466817
  - 0.9302623941216668
  - 0.9328825961260585
  - 0.9145844009638793
  - 0.9148341061159335
  test_ndgc:
  - 0.9758520545194392
  - 0.9868015110841336
  - 0.9819204366529966
  - 0.9859627790478832
  - 0.97934444839782
  test_precision_macro:
  - 0.7160279455979124
  - 0.7345221445221446
  - 0.8543752779555431
  - 0.7299787086551792
  - 0.8435143228098778
  test_precision_micro:
  - 0.9527272727272728
  - 0.978021978021978
  - 0.9679715302491103
  - 0.9743589743589743
  - 0.96
  test_precision_samples:
  - 0.935251798561151
  - 0.96
  - 0.9524647887323944
  - 0.9566787003610109
  - 0.9316546762589928
  test_precision_weighted:
  - 0.9379949123592292
  - 0.9717968009002491
  - 0.961609381679438
  - 0.9552965240979695
  - 0.956760614088581
  test_recall_macro:
  - 0.6707841072780097
  - 0.665226369159296
  - 0.7202895404114916
  - 0.6792189966199113
  - 0.7762299189433335
  test_recall_micro:
  - 0.8972602739726028
  - 0.9206896551724137
  - 0.9315068493150684
  - 0.9078498293515358
  - 0.9134948096885813
  test_recall_samples:
  - 0.9154676258992805
  - 0.9418181818181818
  - 0.9419014084507042
  - 0.9332129963898917
  - 0.9244604316546763
  test_recall_weighted:
  - 0.8972602739726028
  - 0.9206896551724137
  - 0.9315068493150684
  - 0.9078498293515358
  - 0.9134948096885813
  test_roc_auc_macro:
  - 0.9802895064045208
  - 0.9741458548938176
  - 0.9878073379920586
  - 0.9861233004505559
  - 0.995161599609484
  test_roc_auc_micro:
  - 0.9904403840154287
  - 0.9936035385448636
  - 0.9926361214888612
  - 0.9939336822619663
  - 0.9963412998578364
  test_roc_auc_samples:
  - 0.9876241863651937
  - 0.9922943722943723
  - 0.9886820925553321
  - 0.9904160220044695
  - 0.9897225077081193
  test_roc_auc_weighted:
  - 0.9889997952879239
  - 0.9893901201854297
  - 0.9912428388117157
  - 0.9945952039154918
  - 0.9935557782013926
start: 2023-10-21 18:50:57.874156
wrapper: null
