active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            ADMzMzMz478AmpmZmZnZPwCamZmZmdk/ADMzMzMz478AmpmZmZnZPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+AmZmZmZnJv6CZmZmZmek/gJmZmZmZyb+AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z9AMzMzMzPjP4CZmZmZmdm/gJmZmZmZ2b+AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ2T+gmZmZmZnZP6CZmZmZmdk/MDMzMzMz478wMzMzMzPjvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            aGZmZmZm9j9oZmZmZmb2PzAzMzMzM+O/zMzMzMzMBMCgmZmZmZnZPw==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz4z+amZmZmZn5P5iZmZmZmdm/ZmZmZmZm9r+YmZmZmZnZvw==
        ? !!python/tuple
        - 7
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gDMzMzMzC0DAmZmZmZkRQIDMzMzMzAzAgMzMzMzMDMAAMjMzMzPjvw==
      n_labels: 8
      n_samples: 1392
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_negative
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_negative.csv
directory: nakano_datasets_v2/runs
end: 2023-11-28 01:01:21.878874
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.9
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 346d782afe2e37f53fed6edd2ab03d680269fa264284c15f78b77a4bd23c7021
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/346d782_20231128T005646270080_embedding_proba_Gram_negative.yml
results:
  fit_time:
  - 144.3377869129181
  - 138.78886008262634
  - 152.97816133499146
  - 153.25360894203186
  - 158.82394528388977
  score_time:
  - 111.5834743976593
  - 112.19584226608276
  - 117.46176195144653
  - 115.3394525051117
  - 114.83535361289978
  test_average_precision_macro:
  - 0.49724300596134907
  - 0.5323443596416668
  - 0.4711800938005627
  - 0.5059049479344995
  - 0.4907754160569755
  test_average_precision_micro:
  - 0.5279785971886021
  - 0.5409746874168598
  - 0.5244763096737367
  - 0.5653395941811442
  - 0.5753891306712183
  test_average_precision_samples:
  - 0.7587878787878788
  - 0.8094369134515119
  - 0.7459768659236745
  - 0.7873522458628841
  - 0.7678912783751494
  test_average_precision_weighted:
  - 0.5176235082054766
  - 0.5483652596001329
  - 0.5313406669542285
  - 0.5663977933328921
  - 0.5594481431899515
  test_coverage_error:
  - -1.8836363636363636
  - -1.697080291970803
  - -1.9184397163120568
  - -1.6950354609929077
  - -1.8351254480286738
  test_f1_macro:
  - 0.008094742321707444
  - 0.007436826953833031
  - 0.0052441910499139415
  - 0.007398013105051786
  - 0.0052441910499139415
  test_f1_micro:
  - 0.020477815699658702
  - 0.020689655172413796
  - 0.013651877133105802
  - 0.02
  - 0.013605442176870748
  test_f1_samples:
  - 0.01090909090909091
  - 0.010948905109489052
  - 0.0070921985815602835
  - 0.010638297872340425
  - 0.007168458781362007
  test_f1_weighted:
  - 0.020211503163901443
  - 0.020575286251849616
  - 0.013601534266669033
  - 0.019884606652731784
  - 0.013554953669865373
  test_hamming_loss:
  - -0.13045454545454546
  - -0.12956204379562045
  - -0.12810283687943264
  - -0.13031914893617022
  - -0.12992831541218638
  test_jaccard_macro:
  - 0.0041281196213425134
  - 0.0037766424961546913
  - 0.0026505163700285654
  - 0.003756533101045296
  - 0.0026505163700285654
  test_jaccard_micro:
  - 0.010344827586206896
  - 0.010452961672473868
  - 0.006872852233676976
  - 0.010101010101010102
  - 0.00684931506849315
  test_jaccard_samples:
  - 0.01090909090909091
  - 0.010948905109489052
  - 0.0070921985815602835
  - 0.010638297872340425
  - 0.007168458781362007
  test_jaccard_weighted:
  - 0.010297244340684538
  - 0.010452961672473868
  - 0.006872852233676976
  - 0.010101010101010102
  - 0.00684931506849315
  test_label_ranking_average_precision_score:
  - 0.758787878787879
  - 0.8094369134515123
  - 0.7459768659236742
  - 0.7873522458628841
  - 0.7678912783751494
  test_label_ranking_loss:
  - 0.1173160173160173
  - 0.0895029544664581
  - 0.12537993920972643
  - 0.09008780817291455
  - 0.10966035159583545
  test_matthews_corrcoef_macro:
  - 0.01968435590216994
  - 0.02456528433420714
  - 0.020901044132990265
  - 0.024661199561257285
  - 0.02084338706784331
  test_matthews_corrcoef_micro:
  - 0.07816146449513565
  - 0.09537713841261075
  - 0.07740567904110854
  - 0.0937171396184734
  - 0.07719194883804635
  test_matthews_corrcoef_samples:
  - 0.01038961038961039
  - 0.010948905109489052
  - 0.0070921985815602835
  - 0.010638297872340425
  - 0.007168458781362007
  test_matthews_corrcoef_weighted:
  - 0.05224686241751814
  - 0.06664897136401553
  - 0.054495975877270425
  - 0.06498811832177168
  - 0.05415424685257198
  test_ndgc:
  - 0.8196776571553221
  - 0.8583567561924773
  - 0.809772788692824
  - 0.8422743415798489
  - 0.827455002897988
  test_precision_macro:
  - 0.20833333333333331
  - 0.25
  - 0.25
  - 0.25
  - 0.25
  test_precision_micro:
  - 0.75
  - 1.0
  - 1.0
  - 1.0
  - 1.0
  test_precision_samples:
  - 0.01090909090909091
  - 0.010948905109489052
  - 0.0070921985815602835
  - 0.010638297872340425
  - 0.007168458781362007
  test_precision_weighted:
  - 0.5767012687427912
  - 0.6724738675958188
  - 0.6632302405498282
  - 0.6531986531986532
  - 0.660958904109589
  test_recall_macro:
  - 0.004164851916376307
  - 0.0037766424961546913
  - 0.0026505163700285654
  - 0.003756533101045296
  - 0.0026505163700285654
  test_recall_micro:
  - 0.010380622837370242
  - 0.010452961672473868
  - 0.006872852233676976
  - 0.010101010101010102
  - 0.00684931506849315
  test_recall_samples:
  - 0.01090909090909091
  - 0.010948905109489052
  - 0.0070921985815602835
  - 0.010638297872340425
  - 0.007168458781362007
  test_recall_weighted:
  - 0.010380622837370242
  - 0.010452961672473868
  - 0.006872852233676976
  - 0.010101010101010102
  - 0.00684931506849315
  test_roc_auc_macro:
  - 0.7890179506933276
  - .nan
  - 0.7618269491406955
  - 0.8323981889807224
  - 0.802556341869352
  test_roc_auc_micro:
  - 0.8691576177982504
  - 0.8709685679533961
  - 0.8382921049640181
  - 0.8721939490188595
  - 0.8755843101256885
  test_roc_auc_samples:
  - 0.8826839826839827
  - 0.9115615224191868
  - 0.8749155690645053
  - 0.9099121918270854
  - 0.8903396484041645
  test_roc_auc_weighted:
  - 0.7291869646582273
  - .nan
  - 0.7140419203236477
  - 0.7552315578787007
  - 0.7457549782651843
start: 2023-11-28 00:56:46.270080
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop90
  params:
    drop: 0.9
    random_state: 0
