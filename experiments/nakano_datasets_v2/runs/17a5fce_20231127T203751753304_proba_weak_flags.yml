active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ6b+AmZmZmZnJP4CZmZmZmck/gJmZmZmZyT+AmZmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb9oZmZmZmYOQJiZmZmZmQnA0MzMzMzM/D+YmZmZmZkBwA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyT8wMzMzMzPzP6CZmZmZmem/0MzMzMzM/L8wMzMzMzPzPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz8z9AMzMzMzPzPwCamZmZmck/QDMzMzMz8z9gZmZmZmYOwA==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMzC0BoZmZmZmb2P8zMzMzMzAzAmJmZmZmZ+b+gmZmZmZnZPw==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MzMzMzMzE8A0MzMzMzPzPzQzMzMzM/M/oJmZmZmZyT+amZmZmZkBQA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          4MzMzMzM/D9wZmZmZmYGQJCZmZmZmQHAAJmZmZmZyb+QmZmZmZkBwA==
      n_labels: 7
      n_samples: 194
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: flags
  params:
    path: nakano_datasets_v2/datasets/MLC/flags.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 20:39:02.328192
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler:
            call: deep_forest.weak_labels.PositiveUnlabeledImputer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesClassifier
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  class_weight: null
                  criterion: gini
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: 0.9
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: true
                  random_state: 0
                  verbose: true
                  warm_start: false
              sampling_strategy: auto
              threshold: 0.8
              use_oob_proba: true
              verbose: true
              weight_proba: true
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba_weak
  params:
    memory: estimators_cache
hash: 17a5fcee709b2a749afcb7c7971a4819d7442be165ec4d45063fb0693222af1d
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/17a5fce_20231127T203751753304_proba_weak_flags.yml
results:
  fit_time:
  - 48.62238931655884
  - 47.806504011154175
  - 48.2899067401886
  - 47.842864751815796
  - 42.686689615249634
  score_time:
  - 21.255714178085327
  - 19.381661653518677
  - 21.681836366653442
  - 21.4322247505188
  - 9.308300733566284
  test_average_precision_macro:
  - 0.6631607007750342
  - 0.6047509395946369
  - 0.5910033176822761
  - 0.6836147452675776
  - 0.7287083389006496
  test_average_precision_micro:
  - 0.7284236954907188
  - 0.676580890434252
  - 0.6650048613141513
  - 0.6662196762486831
  - 0.7465697055127509
  test_average_precision_samples:
  - 0.7351276276276275
  - 0.7793694885361551
  - 0.7541279519938056
  - 0.74976800976801
  - 0.8087630662020905
  test_average_precision_weighted:
  - 0.7448069935638437
  - 0.7054652673187891
  - 0.6681821615436275
  - 0.7225928330018437
  - 0.7641529606746378
  test_coverage_error:
  - -5.405405405405405
  - -5.111111111111111
  - -5.048780487804878
  - -5.3076923076923075
  - -4.512195121951219
  test_f1_macro:
  - 0.4243733529447815
  - 0.3569169960474308
  - 0.33996973182703466
  - 0.38506613756613767
  - 0.4445484122502755
  test_f1_micro:
  - 0.4842105263157895
  - 0.48863636363636365
  - 0.44999999999999996
  - 0.41666666666666663
  - 0.4680851063829787
  test_f1_samples:
  - 0.4214363714363714
  - 0.44276895943562605
  - 0.4054270932319713
  - 0.3983516483516484
  - 0.41344103051420117
  test_f1_weighted:
  - 0.47637691397089893
  - 0.4650567177608535
  - 0.42659990297740513
  - 0.40579966329966327
  - 0.4535621945886738
  test_hamming_loss:
  - -0.3783783783783784
  - -0.35714285714285715
  - -0.3832752613240418
  - -0.41025641025641024
  - -0.34843205574912894
  test_jaccard_macro:
  - 0.2832985466914038
  - 0.24242424242424243
  - 0.22766127982293397
  - 0.25111677209453204
  - 0.298842427413856
  test_jaccard_micro:
  - 0.3194444444444444
  - 0.3233082706766917
  - 0.2903225806451613
  - 0.2631578947368421
  - 0.3055555555555556
  test_jaccard_samples:
  - 0.311003861003861
  - 0.3264550264550265
  - 0.2997096399535424
  - 0.29340659340659336
  - 0.31718931475029033
  test_jaccard_weighted:
  - 0.31983062363701464
  - 0.320193807998686
  - 0.2923044588910897
  - 0.26410804599794785
  - 0.30197204633294855
  test_label_ranking_average_precision_score:
  - 0.7351276276276276
  - 0.7793694885361554
  - 0.7541279519938057
  - 0.7497680097680097
  - 0.8087630662020905
  test_label_ranking_loss:
  - 0.3500000000000001
  - 0.29722222222222217
  - 0.3052845528455284
  - 0.32136752136752134
  - 0.21707317073170732
  test_matthews_corrcoef_macro:
  - 0.22996192894039666
  - 0.13602603107326894
  - 0.10815963207930893
  - 0.10765977385850915
  - 0.2845873754883633
  test_matthews_corrcoef_micro:
  - 0.31193527068040594
  - 0.33371072521524764
  - 0.2515644480701649
  - 0.1945177806656586
  - 0.3286459599160577
  test_matthews_corrcoef_samples:
  - 0.2308821618586924
  - 0.2842654627299654
  - 0.21061676114680425
  - 0.19358681640543532
  - 0.26327099858060693
  test_matthews_corrcoef_weighted:
  - 0.24381095149377022
  - 0.14295770211559003
  - 0.13861814118957105
  - 0.05343041126951059
  - 0.2053506425166918
  test_ndgc:
  - 0.8418646510000936
  - 0.8672130377269317
  - 0.8446681365289892
  - 0.8499682498156869
  - 0.8847740928840274
  test_precision_macro:
  - 0.6778911564625851
  - 0.6040816326530613
  - 0.5639551367105546
  - 0.5702947845804989
  - 0.8320943762120233
  test_precision_micro:
  - 0.8070175438596491
  - 0.8113207547169812
  - 0.7142857142857143
  - 0.6666666666666666
  - 0.8
  test_precision_samples:
  - 0.6351351351351351
  - 0.7037037037037037
  - 0.6211382113821138
  - 0.6282051282051282
  - 0.5955284552845528
  test_precision_weighted:
  - 0.7857321876118869
  - 0.7558652729384437
  - 0.6662830740026736
  - 0.6266233766233766
  - 0.8346998718515746
  test_recall_macro:
  - 0.3128437453079704
  - 0.2637412491878472
  - 0.2566966964065407
  - 0.2961231804549777
  - 0.34158390628978863
  test_recall_micro:
  - 0.3458646616541353
  - 0.34959349593495936
  - 0.3284671532846715
  - 0.30303030303030304
  - 0.3308270676691729
  test_recall_samples:
  - 0.3307593307593308
  - 0.3402777777777778
  - 0.32804878048780484
  - 0.30940170940170936
  - 0.34036004645760737
  test_recall_weighted:
  - 0.3458646616541353
  - 0.34959349593495936
  - 0.3284671532846715
  - 0.30303030303030304
  - 0.3308270676691729
  test_roc_auc_macro:
  - 0.6659428910217171
  - 0.5742171773994765
  - 0.6183532756054765
  - 0.669134275559732
  - 0.7060564598414308
  test_roc_auc_micro:
  - 0.7076620121732903
  - 0.6993760635280771
  - 0.7036982968369829
  - 0.7041693531055234
  - 0.792012498779416
  test_roc_auc_samples:
  - .nan
  - 0.7027777777777777
  - 0.6947154471544715
  - 0.6786324786324786
  - .nan
  test_roc_auc_weighted:
  - 0.6750296794618124
  - 0.5425197903294822
  - 0.6012556583010408
  - 0.6193670676267543
  - 0.650093581945361
start: 2023-11-27 20:37:51.753304
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
