active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gDMzMzMz4z8AmZmZmZnZvwCZmZmZmdm/gDMzMzMz4z8AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJv8CZmZmZmek/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb/AmZmZmZnpPwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz8z+gmZmZmZnJP6CZmZmZmck/oJmZmZmZyT/MzMzMzMz8vw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwAzMzMzM+O/AJqZmZmZ2T8AmpmZmZnZPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AAAAAAAAAEAAAAAAAADwvwAAAAAAAABAAAAAAAAACMAAAAAAAAAAAA==
      n_labels: 6
      n_samples: 555
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: CHD_49
  params:
    path: nakano_datasets_v2/datasets/MLC/CHD_49.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 22:38:56.580716
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler:
            call: deep_forest.weak_labels.PositiveUnlabeledImputer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesClassifier
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  class_weight: null
                  criterion: gini
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: 0.9
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: true
                  random_state: 0
                  verbose: true
                  warm_start: false
              sampling_strategy: auto
              threshold: 0.8
              use_oob_proba: true
              verbose: true
              weight_proba: true
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba_weak
  params:
    memory: estimators_cache
hash: 6eb0e03dc916fdbaf29b7eb51b87a3222044ee0363bdaf550ac3e213faf7c712
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/6eb0e03_20231127T223756526818_proba_weak_CHD_49.yml
results:
  fit_time:
  - 43.31459879875183
  - 44.41949200630188
  - 41.590667486190796
  - 39.89112734794617
  - 41.5985746383667
  score_time:
  - 12.181367635726929
  - 15.12826132774353
  - 17.274822473526
  - 11.732853412628174
  - 17.167811393737793
  test_average_precision_macro:
  - 0.47517945884564283
  - 0.5378665725750814
  - 0.46509147545054325
  - 0.516129901827994
  - 0.48202735051075085
  test_average_precision_micro:
  - 0.5802694337167557
  - 0.621017140443253
  - 0.583607395348313
  - 0.6196637239419751
  - 0.5530430100959509
  test_average_precision_samples:
  - 0.689309378185525
  - 0.7224082341269842
  - 0.735104485219164
  - 0.7239035087719298
  - 0.6829079079079079
  test_average_precision_weighted:
  - 0.5942000683573365
  - 0.6526107455676519
  - 0.5912451045682788
  - 0.640075671878714
  - 0.5890816113481017
  test_coverage_error:
  - -4.155963302752293
  - -4.116071428571429
  - -4.192660550458716
  - -3.991228070175439
  - -4.405405405405405
  test_f1_macro:
  - 0.21739917900830044
  - 0.25421952640984635
  - 0.17272513132222875
  - 0.25480435748558883
  - 0.28255278507393206
  test_f1_micro:
  - 0.3072916666666667
  - 0.31052631578947365
  - 0.2699724517906336
  - 0.35324675324675325
  - 0.36633663366336633
  test_f1_samples:
  - 0.25067715159458276
  - 0.2642857142857143
  - 0.2131498470948012
  - 0.2893901420217209
  - 0.3078078078078078
  test_f1_weighted:
  - 0.29274388963307096
  - 0.30465996295644754
  - 0.2490842094973906
  - 0.3430931316730721
  - 0.35991807872133896
  test_hamming_loss:
  - -0.40672782874617736
  - -0.3898809523809524
  - -0.40519877675840976
  - -0.36403508771929827
  - -0.3843843843843844
  test_jaccard_macro:
  - 0.13212279701326
  - 0.15296639058697784
  - 0.10388967929620858
  - 0.1572939699868171
  - 0.1731911969882353
  test_jaccard_micro:
  - 0.18153846153846154
  - 0.1838006230529595
  - 0.15605095541401273
  - 0.21451104100946372
  - 0.22424242424242424
  test_jaccard_samples:
  - 0.18103975535168193
  - 0.1933035714285714
  - 0.15626911314984707
  - 0.21154970760233918
  - 0.23528528528528528
  test_jaccard_weighted:
  - 0.18040887038389597
  - 0.18392638012250975
  - 0.15349747671356984
  - 0.2145906334545886
  - 0.2243482759324794
  test_label_ranking_average_precision_score:
  - 0.6984836901121306
  - 0.7224082341269844
  - 0.7442787971457698
  - 0.7239035087719295
  - 0.6919169169169171
  test_label_ranking_loss:
  - 0.31778797145769627
  - 0.3001736111111111
  - 0.28458205912334356
  - 0.2915204678362573
  - 0.3688938938938939
  test_matthews_corrcoef_macro:
  - -0.007882222783304794
  - 0.062205244402154976
  - 0.012099263570808478
  - 0.08674884496493163
  - 0.056761632935554335
  test_matthews_corrcoef_micro:
  - 0.13643347231074468
  - 0.16797799357934756
  - 0.14658882473123344
  - 0.22413185098694827
  - 0.1904972045804821
  test_matthews_corrcoef_samples:
  - 0.11379559408333816
  - 0.15301189098763393
  - 0.1294141794529642
  - 0.19312501452737532
  - 0.17905874171261957
  test_matthews_corrcoef_weighted:
  - -0.017174094208039337
  - 0.027216259651629483
  - 0.004081705808030958
  - 0.10691957081339173
  - 0.04743452014948826
  test_ndgc:
  - 0.789843066279296
  - 0.8173816465923388
  - 0.8240948993712629
  - 0.8159430074633408
  - 0.7900637829596339
  test_precision_macro:
  - 0.4132068547676533
  - 0.517999348321929
  - 0.5337928153717627
  - 0.5208994708994709
  - 0.5102452128767919
  test_precision_micro:
  - 0.5959595959595959
  - 0.6344086021505376
  - 0.6363636363636364
  - 0.6868686868686869
  - 0.6379310344827587
  test_precision_samples:
  - 0.3883792048929664
  - 0.4226190476190476
  - 0.3409785932721712
  - 0.44883040935672514
  - 0.4354354354354354
  test_precision_weighted:
  - 0.5360680156706521
  - 0.6105060950064884
  - 0.666506300716827
  - 0.655094905094905
  - 0.6251117790591475
  test_recall_macro:
  - 0.15273748153535263
  - 0.17041964934121798
  - 0.11546623476068796
  - 0.1742375240813283
  - 0.19859779073249895
  test_recall_micro:
  - 0.20701754385964913
  - 0.20557491289198607
  - 0.17132867132867133
  - 0.23776223776223776
  - 0.2569444444444444
  test_recall_samples:
  - 0.2018348623853211
  - 0.20907738095238093
  - 0.17660550458715593
  - 0.23830409356725143
  - 0.2660660660660661
  test_recall_weighted:
  - 0.20701754385964913
  - 0.20557491289198607
  - 0.17132867132867133
  - 0.23776223776223776
  - 0.2569444444444444
  test_roc_auc_macro:
  - 0.5070771284786624
  - 0.5678781613708844
  - 0.497547631087446
  - 0.5475046621830377
  - 0.5254456012697298
  test_roc_auc_micro:
  - 0.6896305805163314
  - 0.7040047060952984
  - 0.656230997263606
  - 0.7009523140176406
  - 0.6286834950029395
  test_roc_auc_samples:
  - .nan
  - 0.6998263888888889
  - .nan
  - 0.7084795321637428
  - .nan
  test_roc_auc_weighted:
  - 0.5206398943004944
  - 0.5649262217946102
  - 0.5142588026679982
  - 0.5773461328085735
  - 0.5198585249419526
start: 2023-11-27 22:37:56.526818
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
