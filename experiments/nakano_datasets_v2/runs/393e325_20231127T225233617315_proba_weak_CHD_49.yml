active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZ2b8AmZmZmZnZv4AzMzMzM+M/AJmZmZmZ2b+AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb/AmZmZmZnpPwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz8z+gmZmZmZnJP6CZmZmZmck/oJmZmZmZyT/MzMzMzMz8vw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwCamZmZmdk/AJqZmZmZ2T8AMzMzMzPjvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AAAAAAAA8D8AAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAAAAAAAAAAAAA==
      n_labels: 6
      n_samples: 555
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: CHD_49
  params:
    path: nakano_datasets_v2/datasets/MLC/CHD_49.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 22:53:25.886969
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler:
            call: deep_forest.weak_labels.PositiveUnlabeledImputer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesClassifier
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  class_weight: null
                  criterion: gini
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: 0.9
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: true
                  random_state: 0
                  verbose: true
                  warm_start: false
              sampling_strategy: auto
              threshold: 0.8
              use_oob_proba: true
              verbose: true
              weight_proba: true
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba_weak
  params:
    memory: estimators_cache
hash: 393e3257ba1a6202198311366a20ecea5b69ea80ac389bacdabcd96c92166912
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/393e325_20231127T225233617315_proba_weak_CHD_49.yml
results:
  fit_time:
  - 42.00293564796448
  - 41.19593262672424
  - 40.29042172431946
  - 40.028735876083374
  - 40.01083588600159
  score_time:
  - 9.775429010391235
  - 7.208467245101929
  - 9.450016975402832
  - 9.273529291152954
  - 9.285788536071777
  test_average_precision_macro:
  - 0.5326951259806728
  - 0.49705607848807826
  - 0.47525759946583596
  - 0.46476028431358163
  - 0.4911942953802406
  test_average_precision_micro:
  - 0.6149193352005111
  - 0.5815003710057715
  - 0.5720071543301961
  - 0.5737406513374549
  - 0.581785467130846
  test_average_precision_samples:
  - 0.7278282828282827
  - 0.725638138138138
  - 0.7198288690476191
  - 0.730492992992993
  - 0.7091341341341342
  test_average_precision_weighted:
  - 0.6598845180057841
  - 0.5707391292457673
  - 0.5863064787560528
  - 0.5832320485197208
  - 0.5984761055898881
  test_coverage_error:
  - -4.009090909090909
  - -3.900900900900901
  - -3.955357142857143
  - -3.954954954954955
  - -3.981981981981982
  test_f1_macro:
  - 0.10558561941709503
  - 0.048524951750758195
  - 0.10806892056892055
  - 0.0761056597255956
  - 0.07912242813383241
  test_f1_micro:
  - 0.13592233009708737
  - 0.07817589576547232
  - 0.14420062695924765
  - 0.10932475884244373
  - 0.12025316455696203
  test_f1_samples:
  - 0.10848484848484848
  - 0.06220506220506221
  - 0.10892857142857142
  - 0.08378378378378379
  - 0.09069069069069069
  test_f1_weighted:
  - 0.13436131070604426
  - 0.07407855716274285
  - 0.14043450622397988
  - 0.10760141331687705
  - 0.11669734893299238
  test_hamming_loss:
  - -0.40454545454545454
  - -0.42492492492492495
  - -0.40625
  - -0.4159159159159159
  - -0.4174174174174174
  test_jaccard_macro:
  - 0.057056618645865066
  - 0.026538255751738894
  - 0.060413368603459604
  - 0.040842729158787845
  - 0.0432559955669423
  test_jaccard_micro:
  - 0.07291666666666667
  - 0.04067796610169491
  - 0.0777027027027027
  - 0.05782312925170068
  - 0.06397306397306397
  test_jaccard_samples:
  - 0.08333333333333333
  - 0.04714714714714715
  - 0.08258928571428571
  - 0.06006006006006005
  - 0.06456456456456455
  test_jaccard_weighted:
  - 0.07293421494525278
  - 0.040389035855504164
  - 0.07815803360266135
  - 0.05811237594328907
  - 0.06443900299211686
  test_label_ranking_average_precision_score:
  - 0.7460101010101015
  - 0.7346471471471471
  - 0.7198288690476196
  - 0.7304929929929932
  - 0.7091341341341344
  test_label_ranking_loss:
  - 0.2782070707070707
  - 0.2663163163163163
  - 0.2805803571428571
  - 0.2866366366366366
  - 0.29527027027027025
  test_matthews_corrcoef_macro:
  - 0.10849849188262257
  - -0.032156859801629224
  - 0.03480824412282076
  - 0.03797394750156636
  - 0.01753915803916453
  test_matthews_corrcoef_micro:
  - 0.17380604195041868
  - 0.060072620327989316
  - 0.11788184585980332
  - 0.10830836516720142
  - 0.10408333198663934
  test_matthews_corrcoef_samples:
  - 0.09142012900168074
  - 0.033830947284844495
  - 0.06115769946087192
  - 0.05752303852930129
  - 0.05126751671521112
  test_matthews_corrcoef_weighted:
  - 0.11753693968901864
  - -0.041894491470277836
  - 0.047757844931219345
  - 0.05275319757668552
  - 0.037594488938966907
  test_ndgc:
  - 0.8201979793617185
  - 0.8098929969329072
  - 0.8100361907277883
  - 0.8213704694048529
  - 0.8023281035873613
  test_precision_macro:
  - 0.7106481481481483
  - 0.21666666666666667
  - 0.4431216931216931
  - 0.5333333333333333
  - 0.3732905982905983
  test_precision_micro:
  - 0.875
  - 0.6
  - 0.6764705882352942
  - 0.7083333333333334
  - 0.6785714285714286
  test_precision_samples:
  - 0.18181818181818182
  - 0.0990990990990991
  - 0.17857142857142858
  - 0.13963963963963963
  - 0.16216216216216217
  test_precision_weighted:
  - 0.835672514619883
  - 0.33763066202090597
  - 0.5928710665552771
  - 0.6689895470383276
  - 0.5315215455840456
  test_recall_macro:
  - 0.05754812691657196
  - 0.027450980392156862
  - 0.06255551782033021
  - 0.04168222844693433
  - 0.04453087345893018
  test_recall_micro:
  - 0.07368421052631578
  - 0.041811846689895474
  - 0.08070175438596491
  - 0.059233449477351915
  - 0.06597222222222222
  test_recall_samples:
  - 0.08333333333333333
  - 0.04714714714714715
  - 0.08258928571428571
  - 0.06456456456456455
  - 0.06456456456456455
  test_recall_weighted:
  - 0.07368421052631578
  - 0.041811846689895474
  - 0.08070175438596491
  - 0.059233449477351915
  - 0.06597222222222222
  test_roc_auc_macro:
  - 0.5827174755362696
  - 0.5692953538214167
  - 0.536640982142949
  - 0.5399335218016669
  - 0.5512800827764247
  test_roc_auc_micro:
  - 0.69166783625731
  - 0.7196271133461429
  - 0.6864137086903306
  - 0.6737241778750241
  - 0.6779100529100529
  test_roc_auc_samples:
  - .nan
  - .nan
  - 0.7194196428571429
  - 0.7133633633633634
  - 0.7047297297297297
  test_roc_auc_weighted:
  - 0.5813355028074367
  - 0.4932412718340335
  - 0.5181069605978843
  - 0.5119994324598248
  - 0.5364200443304266
start: 2023-11-27 22:52:33.617315
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
