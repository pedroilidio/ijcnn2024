active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z9AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ6b+AmZmZmZnJP4CZmZmZmck/gJmZmZmZyT+AmZmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            aGZmZmZmDkDQzMzMzMz8P5iZmZmZmQnAmJmZmZmZAcCAmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ6b+AmZmZmZnJP4CZmZmZmck/gJmZmZmZyT+AmZmZmZnJPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ6b8AmpmZmZnJPwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MDMzMzMz47/MzMzMzMwMwDQzMzMzMwtAoJmZmZmZ2T+gmZmZmZnZPw==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mpmZmZmZAUCgmZmZmZnJP8zMzMzMzPy/mJmZmZmZ6b+gmZmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJmZmZmZyb+QmZmZmZkJwMCZmZmZmek/cGZmZmZmBkAAmZmZmZnJvw==
      n_labels: 7
      n_samples: 194
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: flags
  params:
    path: nakano_datasets_v2/datasets/MLC/flags.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 20:46:59.593021
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 5bc0a2cd53eafda112aaed5c99a230dd75951180f488b8821be7242e3db41405
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/5bc0a2c_20231127T204512854201_embedding_proba_flags.yml
results:
  fit_time:
  - 52.01341986656189
  - 49.53425645828247
  - 47.960121154785156
  - 50.05052828788757
  - 49.37146735191345
  score_time:
  - 40.26283049583435
  - 56.47334170341492
  - 56.20501375198364
  - 56.11348748207092
  - 55.881521463394165
  test_average_precision_macro:
  - 0.5965200341912963
  - 0.6520717029503051
  - 0.6644330641556648
  - 0.6316815446162786
  - 0.5972719529901378
  test_average_precision_micro:
  - 0.6341562765484781
  - 0.6539324127475514
  - 0.6631270855352436
  - 0.643630924061308
  - 0.5849212426460079
  test_average_precision_samples:
  - 0.7389387464387465
  - 0.756984126984127
  - 0.7457320384294067
  - 0.7372123015873016
  - 0.6987657712657713
  test_average_precision_weighted:
  - 0.6982269250577837
  - 0.6893591134286655
  - 0.7491620843223759
  - 0.7338780527928748
  - 0.6626521072157371
  test_coverage_error:
  - -5.230769230769231
  - -5.095238095238095
  - -5.184210526315789
  - -5.5
  - -5.3076923076923075
  test_f1_macro:
  - 0.14279408733190246
  - 0.20675095073591315
  - 0.08767342714211786
  - 0.20273848669902741
  - 0.13855281242931958
  test_f1_micro:
  - 0.18055555555555555
  - 0.26415094339622636
  - 0.1111111111111111
  - 0.26415094339622636
  - 0.17449664429530204
  test_f1_samples:
  - 0.14493284493284495
  - 0.23412698412698413
  - 0.0756892230576441
  - 0.2278880070546737
  - 0.15177045177045176
  test_f1_weighted:
  - 0.1783641904024941
  - 0.2536881219508841
  - 0.10564396155128204
  - 0.2562073799771625
  - 0.17185239313116552
  test_hamming_loss:
  - -0.43223443223443225
  - -0.3979591836734694
  - -0.48120300751879697
  - -0.4642857142857143
  - -0.45054945054945056
  test_jaccard_macro:
  - 0.07943851564394858
  - 0.12294007869135203
  - 0.0486619775244563
  - 0.1222213568540405
  - 0.0777811004784689
  test_jaccard_micro:
  - 0.09923664122137404
  - 0.15217391304347827
  - 0.058823529411764705
  - 0.15217391304347827
  - 0.09558823529411764
  test_jaccard_samples:
  - 0.09786324786324785
  - 0.16626984126984126
  - 0.04780701754385965
  - 0.1558862433862434
  - 0.10341880341880341
  test_jaccard_weighted:
  - 0.09924981245311329
  - 0.1508953304313415
  - 0.05831684474343754
  - 0.1542393533240215
  - 0.09632752116304748
  test_label_ranking_average_precision_score:
  - 0.7389387464387462
  - 0.756984126984127
  - 0.7457320384294068
  - 0.7372123015873017
  - 0.6987657712657712
  test_label_ranking_loss:
  - 0.335042735042735
  - 0.2912698412698413
  - 0.3236842105263158
  - 0.325
  - 0.36367521367521366
  test_matthews_corrcoef_macro:
  - 0.11103620025307938
  - 0.13454870225753496
  - 0.02792319752622438
  - 0.10382956930362353
  - 0.03917407956985238
  test_matthews_corrcoef_micro:
  - 0.19035835654895306
  - 0.2223498987940276
  - 0.09440686400617014
  - 0.19017750112229193
  - 0.11391688240841594
  test_matthews_corrcoef_samples:
  - 0.10645181568809103
  - 0.18047056028563696
  - 0.028919954210281543
  - 0.12423269173983116
  - 0.08299170212935036
  test_matthews_corrcoef_weighted:
  - 0.12265620936946574
  - 0.14901281148219034
  - 0.02798532466278269
  - 0.13959097789704436
  - 0.033338373342661855
  test_ndgc:
  - 0.8435424681961928
  - 0.8552029024575263
  - 0.8383873985499589
  - 0.8416963242212927
  - 0.8088954519701945
  test_precision_macro:
  - 0.6309523809523808
  - 0.5952380952380952
  - 0.39285714285714285
  - 0.5821428571428572
  - 0.5
  test_precision_micro:
  - 0.8666666666666667
  - 0.8076923076923077
  - 0.7272727272727273
  - 0.8076923076923077
  - 0.6842105263157895
  test_precision_samples:
  - 0.3076923076923077
  - 0.4166666666666667
  - 0.21052631578947367
  - 0.4722222222222222
  - 0.3076923076923077
  test_precision_weighted:
  - 0.7842377260981911
  - 0.7167919799498746
  - 0.5112781954887218
  - 0.7507518796992481
  - 0.6243589743589743
  test_recall_macro:
  - 0.08065122483628426
  - 0.1286349912601303
  - 0.05049702491304271
  - 0.1256406428820222
  - 0.08065134099616858
  test_recall_micro:
  - 0.10077519379844961
  - 0.15789473684210525
  - 0.06015037593984962
  - 0.15789473684210525
  - 0.1
  test_recall_samples:
  - 0.09786324786324785
  - 0.16746031746031745
  - 0.04780701754385965
  - 0.1558862433862434
  - 0.10341880341880341
  test_recall_weighted:
  - 0.10077519379844961
  - 0.15789473684210525
  - 0.06015037593984962
  - 0.15789473684210525
  - 0.1
  test_roc_auc_macro:
  - 0.6503689250584977
  - 0.6460218481222544
  - 0.6417354522212231
  - 0.5861142020419524
  - 0.5603612366503367
  test_roc_auc_micro:
  - 0.6834625322997417
  - 0.6798206696866389
  - 0.6827124201481146
  - 0.6281670562962028
  - 0.6195266272189349
  test_roc_auc_samples:
  - 0.6649572649572649
  - 0.7087301587301588
  - 0.6763157894736843
  - .nan
  - 0.6363247863247862
  test_roc_auc_weighted:
  - 0.6136513553854303
  - 0.6016536636837388
  - 0.6187480991264646
  - 0.6002276754156454
  - 0.5525057234024886
start: 2023-11-27 20:45:12.854201
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
