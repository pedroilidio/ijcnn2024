active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb/AmZmZmZnpPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ2b+YmZmZmZnZv5iZmZmZmdm/NDMzMzMz4z80MzMzMzPjPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b+AmZmZmZnZvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/QDMzMzMz4z+AmZmZmZnZvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJiZmZmZyb8AMzMzMzPzvwCYmZmZmcm/AJqZmZmZ6T8AmpmZmZnpPw==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_positive
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_positive.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:06:43.505229
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_tree_embedder
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler:
      call: deep_forest.weak_labels.PositiveUnlabeledImputer
      params:
        estimator:
          call: sklearn.ensemble._forest.ExtraTreesClassifier
          params:
            bootstrap: true
            ccp_alpha: 0.0
            class_weight: null
            criterion: gini
            max_depth: null
            max_features: sqrt
            max_leaf_nodes: null
            max_samples: 0.9
            min_impurity_decrease: 0.0
            min_samples_leaf: 5
            min_samples_split: 2
            min_weight_fraction_leaf: 0.0
            n_estimators: 150
            n_jobs: 14
            oob_score: true
            random_state: 0
            verbose: true
            warm_start: false
        sampling_strategy: auto
        threshold: 0.8
        use_oob_proba: true
        verbose: true
        weight_proba: true
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_weak
  params:
    memory: estimators_cache
hash: 6e16d33700abb9b214b4bc3e40f6ea0d5337394b4382b87aa852539c87d38d1e
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/6e16d33_20231021T180450486420_embedding_weak_Gram_positive.yml
results:
  fit_time:
  - 66.6965537071228
  - 62.08133840560913
  - 66.14680981636047
  - 62.93050670623779
  - 67.28165197372437
  score_time:
  - 39.43663430213928
  - 21.598636388778687
  - 46.174736738204956
  - 25.614144802093506
  - 39.83782172203064
  test_average_precision_macro:
  - 0.9036569277283564
  - 0.9242785896274268
  - 0.8931300939865141
  - 0.9428447630248953
  - 0.9083562752016827
  test_average_precision_micro:
  - 0.982058951858952
  - 0.991327822622085
  - 0.9876778013466754
  - 0.9862489374807711
  - 0.9778355559238332
  test_average_precision_samples:
  - 0.96875
  - 0.9817460317460317
  - 0.9663461538461539
  - 0.9619741100323626
  - 0.9644012944983819
  test_average_precision_weighted:
  - 0.9732349749016416
  - 0.985996552445653
  - 0.9731737490394361
  - 0.9845131780500846
  - 0.9716343303134629
  test_coverage_error:
  - -1.0865384615384615
  - -1.0666666666666667
  - -1.0673076923076923
  - -1.1067961165048543
  - -1.087378640776699
  test_f1_macro:
  - 0.7737219887955182
  - 0.8916730752798427
  - 0.7827522575295178
  - 0.7969366197183099
  - 0.8376320982938631
  test_f1_micro:
  - 0.9230769230769231
  - 0.9611650485436893
  - 0.9223300970873786
  - 0.9223300970873786
  - 0.9223300970873786
  test_f1_samples:
  - 0.9198717948717949
  - 0.9396825396825396
  - 0.9102564102564101
  - 0.9190938511326862
  - 0.9158576051779935
  test_f1_weighted:
  - 0.9208236627984527
  - 0.9580457518552733
  - 0.9163667552285047
  - 0.9205877573131095
  - 0.9235223722356074
  test_hamming_loss:
  - -0.038461538461538464
  - -0.01904761904761905
  - -0.038461538461538464
  - -0.038834951456310676
  - -0.038834951456310676
  test_jaccard_macro:
  - 0.7052378282403513
  - 0.8275581395348837
  - 0.7072107822107823
  - 0.7148487773487773
  - 0.7488275613275612
  test_jaccard_micro:
  - 0.8571428571428571
  - 0.9252336448598131
  - 0.8558558558558559
  - 0.8558558558558559
  - 0.8558558558558559
  test_jaccard_samples:
  - 0.9182692307692307
  - 0.9380952380952381
  - 0.9086538461538461
  - 0.9174757281553398
  - 0.912621359223301
  test_jaccard_weighted:
  - 0.8732165663200145
  - 0.9251864853005705
  - 0.8625354750354751
  - 0.8631663944163944
  - 0.8643759018759017
  test_label_ranking_average_precision_score:
  - 0.96875
  - 0.9817460317460317
  - 0.9663461538461539
  - 0.9619741100323624
  - 0.964401294498382
  test_label_ranking_loss:
  - 0.02564102564102564
  - 0.01825396825396825
  - 0.022435897435897433
  - 0.03236245954692557
  - 0.02588996763754045
  test_matthews_corrcoef_macro:
  - 0.74995994338431
  - 0.8904018704911634
  - 0.7632123324925378
  - 0.7735088285450696
  - 0.8132682521511436
  test_matthews_corrcoef_micro:
  - 0.897512816792487
  - 0.9492676210343368
  - 0.8968488562904653
  - 0.8965184975817997
  - 0.8965184975817997
  test_matthews_corrcoef_samples:
  - 0.9006410256410257
  - 0.9356573041510123
  - 0.8901668295114387
  - 0.8964401294498383
  - 0.8947058304697015
  test_matthews_corrcoef_weighted:
  - 0.8988452768305848
  - 0.946443913643253
  - 0.8920896299881639
  - 0.8928995833521919
  - 0.8954982940370338
  test_ndgc:
  - 0.976781974287795
  - 0.9867833986129951
  - 0.9751587334134636
  - 0.971702187630395
  - 0.9736463934119295
  test_precision_macro:
  - 0.7877289377289377
  - 0.9939024390243902
  - 0.8238961038961039
  - 0.8226495726495727
  - 0.8338204625884732
  test_precision_micro:
  - 0.9320388349514563
  - 0.99
  - 0.9313725490196079
  - 0.9313725490196079
  - 0.9313725490196079
  test_precision_samples:
  - 0.9182692307692307
  - 0.9428571428571428
  - 0.9086538461538461
  - 0.9223300970873787
  - 0.9174757281553398
  test_precision_weighted:
  - 0.9284493284493286
  - 0.9903359410952599
  - 0.9232942057942058
  - 0.9313773833004603
  - 0.9356740248502761
  test_recall_macro:
  - 0.7631620209059233
  - 0.8330952380952381
  - 0.763095238095238
  - 0.781547619047619
  - 0.8486554621848739
  test_recall_micro:
  - 0.9142857142857143
  - 0.9339622641509434
  - 0.9134615384615384
  - 0.9134615384615384
  - 0.9134615384615384
  test_recall_samples:
  - 0.9230769230769231
  - 0.9380952380952381
  - 0.9134615384615384
  - 0.9174757281553398
  - 0.9174757281553398
  test_recall_weighted:
  - 0.9142857142857143
  - 0.9339622641509434
  - 0.9134615384615384
  - 0.9134615384615384
  - 0.9134615384615384
  test_roc_auc_macro:
  - 0.9887222036585687
  - 0.9920651403575731
  - 0.9916991783126294
  - 0.9938695743912838
  - 0.9875380709880311
  test_roc_auc_micro:
  - 0.9914867554738938
  - 0.9956735969234467
  - 0.99583949704142
  - 0.9942557442557443
  - 0.9899475524475524
  test_roc_auc_samples:
  - 0.9743589743589745
  - 0.9817460317460318
  - 0.9775641025641026
  - 0.9676375404530745
  - 0.9741100323624595
  test_roc_auc_weighted:
  - 0.9913592612976213
  - 0.9976660098624419
  - 0.994784350613155
  - 0.9942580392094263
  - 0.988039475145539
start: 2023-10-21 18:04:50.486420
wrapper: null
