active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZ2b+AMzMzMzPjP4AzMzMzM+M/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJv8CZmZmZmek/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZyT80MzMzMzPzP6CZmZmZmck/oJmZmZmZyT/MzMzMzMz8vw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP0AzMzMzM+M/gJmZmZmZ2b+AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZ2T8AmpmZmZnZPwCamZmZmdk/ADMzMzMz478AMzMzMzPjvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AAAAAAAAAAAAAAAAAAAQQAAAAAAAAPC/AAAAAAAAEMAAAAAAAADwPw==
      n_labels: 6
      n_samples: 555
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: CHD_49
  params:
    path: nakano_datasets_v2/datasets/MLC/CHD_49.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 22:35:17.043855
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: af25d8e53c60b60dfaaeb5e17dac39cf318419c423dbfe453ae9ea192c1efed3
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/af25d8e_20231127T223253196888_embedding_proba_CHD_49.yml
results:
  fit_time:
  - 60.41690015792847
  - 66.62745428085327
  - 64.79569363594055
  - 64.03025722503662
  - 65.06863379478455
  score_time:
  - 71.45099663734436
  - 64.6731104850769
  - 76.48756289482117
  - 76.3019106388092
  - 77.31038904190063
  test_average_precision_macro:
  - 0.5143285541180584
  - 0.48440614861569703
  - 0.4827531787926604
  - 0.4646376888955357
  - 0.49666508992210473
  test_average_precision_micro:
  - 0.618162129801469
  - 0.5862369133438028
  - 0.5797431266313201
  - 0.5529643418017125
  - 0.5891237197654836
  test_average_precision_samples:
  - 0.7321696696696697
  - 0.7182762201453791
  - 0.7258556547619047
  - 0.6603985507246377
  - 0.7385606060606063
  test_average_precision_weighted:
  - 0.6409725874123238
  - 0.6153797505813825
  - 0.5953223042838837
  - 0.5844863343613118
  - 0.6110306179510483
  test_coverage_error:
  - -4.009009009009009
  - -4.158878504672897
  - -4.017857142857143
  - -4.269565217391304
  - -4.127272727272727
  test_f1_macro:
  - 0.3076993336884936
  - 0.23477970105138501
  - 0.2775584744057274
  - 0.23582811214327234
  - 0.24464518653159628
  test_f1_micro:
  - 0.39598997493734334
  - 0.2975206611570248
  - 0.34554973821989526
  - 0.31052631578947365
  - 0.30606860158311344
  test_f1_samples:
  - 0.33127413127413124
  - 0.23012906097018246
  - 0.30624999999999997
  - 0.24202898550724636
  - 0.26229437229437225
  test_f1_weighted:
  - 0.38992292677095675
  - 0.2953230598273757
  - 0.33960051708340483
  - 0.30269111353719996
  - 0.30219416862698667
  test_hamming_loss:
  - -0.36186186186186187
  - -0.397196261682243
  - -0.37202380952380953
  - -0.37971014492753624
  - -0.3984848484848485
  test_jaccard_macro:
  - 0.19236076080351042
  - 0.13812911630269642
  - 0.16862849901305
  - 0.14149710364069892
  - 0.14575399471035147
  test_jaccard_micro:
  - 0.246875
  - 0.17475728155339806
  - 0.2088607594936709
  - 0.1838006230529595
  - 0.1806853582554517
  test_jaccard_samples:
  - 0.25
  - 0.1682242990654205
  - 0.2331845238095238
  - 0.18
  - 0.19409090909090906
  test_jaccard_weighted:
  - 0.24789899986472796
  - 0.17519484746476158
  - 0.20751343906088357
  - 0.18513037954463674
  - 0.18221967342689713
  test_label_ranking_average_precision_score:
  - 0.7411786786786785
  - 0.7276220145379024
  - 0.7258556547619051
  - 0.6603985507246378
  - 0.747651515151515
  test_label_ranking_loss:
  - 0.294044044044044
  - 0.30163551401869165
  - 0.3021825396825397
  - 0.36586956521739133
  - 0.2949747474747475
  test_matthews_corrcoef_macro:
  - 0.13135534431828474
  - 0.07733548102048367
  - 0.0983740949407151
  - 0.060262071649646275
  - 0.06636401580599767
  test_matthews_corrcoef_micro:
  - 0.24628266927856624
  - 0.181898469951429
  - 0.20982924893651228
  - 0.17809943225302002
  - 0.16887040115263136
  test_matthews_corrcoef_samples:
  - 0.21680879085440888
  - 0.13260384599937297
  - 0.18946885824417198
  - 0.13721062179593094
  - 0.16747011632115688
  test_matthews_corrcoef_weighted:
  - 0.15034379705498183
  - 0.07449867300334545
  - 0.08194944531878749
  - 0.05284589479530319
  - 0.057732113777589605
  test_ndgc:
  - 0.8217931369259919
  - 0.8151583167299894
  - 0.818983328016066
  - 0.7691540282712472
  - 0.8319720454241281
  test_precision_macro:
  - 0.5824237490904157
  - 0.5515873015873015
  - 0.5500841750841751
  - 0.500590491379965
  - 0.524196623093682
  test_precision_micro:
  - 0.6991150442477876
  - 0.6835443037974683
  - 0.673469387755102
  - 0.6413043478260869
  - 0.651685393258427
  test_precision_samples:
  - 0.4834834834834835
  - 0.37538940809968846
  - 0.4613095238095238
  - 0.37681159420289856
  - 0.40984848484848485
  test_precision_weighted:
  - 0.7184598618165052
  - 0.6745640509725018
  - 0.6623986342296202
  - 0.6086747803853068
  - 0.6322461685823755
  test_recall_macro:
  - 0.21772619469837892
  - 0.15045232892350965
  - 0.18930113583028252
  - 0.15661140425162312
  - 0.1606466703821925
  test_recall_micro:
  - 0.2762237762237762
  - 0.19014084507042253
  - 0.2323943661971831
  - 0.2048611111111111
  - 0.2
  test_recall_samples:
  - 0.27687687687687684
  - 0.17990654205607473
  - 0.2537202380952381
  - 0.1963768115942029
  - 0.20909090909090905
  test_recall_weighted:
  - 0.2762237762237762
  - 0.19014084507042253
  - 0.2323943661971831
  - 0.2048611111111111
  - 0.2
  test_roc_auc_macro:
  - 0.5403747986947322
  - 0.5270554122551009
  - 0.5457929379283334
  - 0.505126391154289
  - 0.5351246487886424
  test_roc_auc_micro:
  - 0.6731321310268678
  - 0.661942324337084
  - 0.664040946711195
  - 0.6407891100055279
  - 0.634762348555452
  test_roc_auc_samples:
  - .nan
  - .nan
  - 0.6978174603174604
  - 0.6341304347826087
  - .nan
  test_roc_auc_weighted:
  - 0.5597796006842735
  - 0.5378566411553055
  - 0.5230933742461585
  - 0.5388409829356466
  - 0.5040479008896405
start: 2023-11-27 22:32:53.196888
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
