active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            ADMzMzMz478AmpmZmZnZPwAzMzMzM+O/AJqZmZmZ2T8AmpmZmZnZPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyb+AmZmZmZnpPwCamZmZmcm/AJqZmZmZyb8AmpmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ADMzMzMz478AMzMzMzPjvwCamZmZmdk/AJqZmZmZ2T8AmpmZmZnZPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b8AmZmZmZnZv4AzMzMzM+M/AJmZmZmZ2b+AMzMzMzPjPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gDMzMzMz4z8AmZmZmZnZv4AzMzMzM+M/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT8AmpmZmZnJP4CZmZmZmem/AJqZmZmZyT8AmpmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          ADIzMzMz47+AMzMzMzMLQABnZmZmZvY/QGZmZmZmEsAAnJmZmZnZPw==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 18:48:29.545586
estimator:
  call: nakano_datasets_v2.estimators.final_estimator
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
        params:
          estimators:
          - - rf
            - call: sklearn.ensemble._forest.RandomForestClassifier
              params:
                bootstrap: true
                ccp_alpha: 0.0
                class_weight: null
                criterion: gini
                max_depth: null
                max_features: sqrt
                max_leaf_nodes: null
                max_samples: 0.9
                min_impurity_decrease: 0.0
                min_samples_leaf: 5
                min_samples_split: 2
                min_weight_fraction_leaf: 0.0
                n_estimators: 150
                n_jobs: 14
                oob_score: true
                random_state: 0
                verbose: true
                warm_start: false
          - - xt
            - call: sklearn.ensemble._forest.ExtraTreesClassifier
              params:
                bootstrap: true
                ccp_alpha: 0.0
                class_weight: null
                criterion: gini
                max_depth: null
                max_features: sqrt
                max_leaf_nodes: null
                max_samples: 0.9
                min_impurity_decrease: 0.0
                min_samples_leaf: 5
                min_samples_split: 2
                min_weight_fraction_leaf: 0.0
                n_estimators: 150
                n_jobs: 14
                oob_score: true
                random_state: 0
                verbose: true
                warm_start: false
    verbose: false
  name: final_estimator
  params: {}
hash: 16b09cfb367608073ebedb407b90cb54a4b1bebccc3600e2fc996d08b163605e
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/16b09cf_20231127T184820528486_final_estimator_scene.yml
results:
  fit_time:
  - 1.520594596862793
  - 1.517946481704712
  - 1.517747402191162
  - 1.5099518299102783
  - 1.4726018905639648
  score_time:
  - 5.828402757644653
  - 5.821685791015625
  - 6.0053932666778564
  - 5.829065322875977
  - 7.144988059997559
  test_average_precision_macro:
  - 0.8432960312078146
  - 0.8456893444427099
  - 0.8411966428562715
  - 0.8381579177068161
  - 0.8522102360566963
  test_average_precision_micro:
  - 0.8501090856780674
  - 0.8460206770715915
  - 0.8504530509711085
  - 0.8439051526709596
  - 0.8490449722599452
  test_average_precision_samples:
  - 0.8877247579529737
  - 0.8718619246861925
  - 0.8794618055555555
  - 0.8674554183813443
  - 0.8806652806652806
  test_average_precision_weighted:
  - 0.8334418766268115
  - 0.8346706192559966
  - 0.8289419173039786
  - 0.8276445032504606
  - 0.8420242564000212
  test_coverage_error:
  - -1.383817427385892
  - -1.4518828451882846
  - -1.4229166666666666
  - -1.4279835390946503
  - -1.3970893970893972
  test_f1_macro:
  - 0.020777191149241963
  - 0.07587830268242639
  - 0.04613298022780449
  - 0.07298072017333251
  - 0.05785191668911033
  test_f1_micro:
  - 0.01912045889101338
  - 0.074487895716946
  - 0.04536862003780718
  - 0.0708955223880597
  - 0.05649717514124294
  test_f1_samples:
  - 0.01037344398340249
  - 0.0404463040446304
  - 0.025
  - 0.03840877914951989
  - 0.03049203049203049
  test_f1_weighted:
  - 0.01875954076498541
  - 0.07085902326086577
  - 0.044058611234184586
  - 0.06854531583605387
  - 0.05368586330867662
  test_hamming_loss:
  - -0.17738589211618258
  - -0.17329149232914923
  - -0.1753472222222222
  - -0.17078189300411523
  - -0.1735966735966736
  test_jaccard_macro:
  - 0.010703008376877718
  - 0.041379310344827586
  - 0.024291175533609433
  - 0.039126062858947486
  - 0.03131221074732876
  test_jaccard_micro:
  - 0.009652509652509652
  - 0.03868471953578337
  - 0.02321083172147002
  - 0.0367504835589942
  - 0.029069767441860465
  test_jaccard_samples:
  - 0.01037344398340249
  - 0.0397489539748954
  - 0.025
  - 0.03806584362139918
  - 0.030145530145530147
  test_jaccard_weighted:
  - 0.009652509652509652
  - 0.03868471953578337
  - 0.02321083172147002
  - 0.0367504835589942
  - 0.029069767441860465
  test_label_ranking_average_precision_score:
  - 0.8877247579529736
  - 0.8718619246861921
  - 0.8794618055555553
  - 0.8674554183813441
  - 0.8806652806652807
  test_label_ranking_loss:
  - 0.05886929460580913
  - 0.07149581589958158
  - 0.06729166666666667
  - 0.07139917695473251
  - 0.0642931392931393
  test_matthews_corrcoef_macro:
  - 0.06372020788253051
  - 0.13041988013102657
  - 0.09963648952780503
  - 0.1433443777473327
  - 0.10789720880043592
  test_matthews_corrcoef_micro:
  - 0.08909166752117433
  - 0.17870061550526795
  - 0.13828900084163392
  - 0.17445057502539832
  - 0.15490960818326255
  test_matthews_corrcoef_samples:
  - 0.01037344398340249
  - 0.040303161221898226
  - 0.025
  - 0.03833838586838204
  - 0.030420905472003483
  test_matthews_corrcoef_weighted:
  - 0.058960564445186055
  - 0.1211390760271567
  - 0.09473518830779767
  - 0.13460951889380096
  - 0.09980634793959701
  test_ndgc:
  - 0.917746257069554
  - 0.9058908392961642
  - 0.9113439348861502
  - 0.9021182692491648
  - 0.9117355672841074
  test_precision_macro:
  - 0.5
  - 0.5
  - 0.5
  - 0.6666666666666666
  - 0.5
  test_precision_micro:
  - 1.0
  - 1.0
  - 1.0
  - 1.0
  - 1.0
  test_precision_samples:
  - 0.01037344398340249
  - 0.04184100418410042
  - 0.025
  - 0.03909465020576132
  - 0.031185031185031187
  test_precision_weighted:
  - 0.4749034749034749
  - 0.4622823984526112
  - 0.4738878143133462
  - 0.6266924564796905
  - 0.46124031007751937
  test_recall_macro:
  - 0.010703008376877718
  - 0.041379310344827586
  - 0.024291175533609433
  - 0.039126062858947486
  - 0.03131221074732876
  test_recall_micro:
  - 0.009652509652509652
  - 0.03868471953578337
  - 0.02321083172147002
  - 0.0367504835589942
  - 0.029069767441860465
  test_recall_samples:
  - 0.01037344398340249
  - 0.0397489539748954
  - 0.025
  - 0.03806584362139918
  - 0.030145530145530147
  test_recall_weighted:
  - 0.009652509652509652
  - 0.03868471953578337
  - 0.02321083172147002
  - 0.0367504835589942
  - 0.029069767441860465
  test_roc_auc_macro:
  - 0.9485945571371391
  - 0.9465513957085542
  - 0.9435340975231017
  - 0.9445758411646531
  - 0.948121106409966
  test_roc_auc_micro:
  - 0.9563116191170109
  - 0.9524734114541983
  - 0.9518712484785183
  - 0.9512385479765505
  - 0.9543894939979721
  test_roc_auc_samples:
  - 0.941130705394191
  - 0.9285041841004184
  - 0.9327083333333335
  - 0.9286008230452676
  - 0.9357068607068608
  test_roc_auc_weighted:
  - 0.9440539942141936
  - 0.9417600138718036
  - 0.9380138537914039
  - 0.9397201133550506
  - 0.9429530278586964
start: 2023-11-27 18:48:20.528486
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
