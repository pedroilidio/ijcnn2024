active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            ADMzMzMz478AMzMzMzPjvwCamZmZmdk/AJqZmZmZ2T8AmpmZmZnZPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+AmZmZmZnJv4CZmZmZmcm/oJmZmZmZ6T+AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b+AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MDMzMzMz47+gmZmZmZnZPzAzMzMzM+O/oJmZmZmZ2T+gmZmZmZnZPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ2T+gmZmZmZnZP2hmZmZmZvY/mJmZmZmZ+b8wMzMzMzPjvw==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ2b9mZmZmZmb2v5qZmZmZmfk/NDMzMzMz4z+YmZmZmZnZvw==
        ? !!python/tuple
        - 7
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJmZmZmZ+b8AZ2ZmZmb2PwBnZmZmZvY/gDMzMzMzA0CAzMzMzMwMwA==
      n_labels: 8
      n_samples: 1392
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_negative
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_negative.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:25:38.650917
estimator:
  call: nakano_datasets_v2.estimators.final_estimator
  final_params:
    estimators:
    - - rf
      - call: sklearn.ensemble._forest.RandomForestClassifier
        params:
          bootstrap: true
          ccp_alpha: 0.0
          class_weight: null
          criterion: gini
          max_depth: null
          max_features: sqrt
          max_leaf_nodes: null
          max_samples: 0.9
          min_impurity_decrease: 0.0
          min_samples_leaf: 5
          min_samples_split: 2
          min_weight_fraction_leaf: 0.0
          n_estimators: 150
          n_jobs: 14
          oob_score: true
          random_state: 0
          verbose: true
          warm_start: false
    - - xt
      - call: sklearn.ensemble._forest.ExtraTreesClassifier
        params:
          bootstrap: true
          ccp_alpha: 0.0
          class_weight: null
          criterion: gini
          max_depth: null
          max_features: sqrt
          max_leaf_nodes: null
          max_samples: 0.9
          min_impurity_decrease: 0.0
          min_samples_leaf: 5
          min_samples_split: 2
          min_weight_fraction_leaf: 0.0
          n_estimators: 150
          n_jobs: 14
          oob_score: true
          random_state: 0
          verbose: true
          warm_start: false
  name: final_estimator
  params: {}
hash: 1208ec9efb66cdd263e426af19afe20d7a6e8331f6591fd999c78b68bdbd26dc
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/1208ec9_20231021T172528968184_final_estimator_Gram_negative.yml
results:
  fit_time:
  - 1.6932196617126465
  - 1.748664379119873
  - 1.6734662055969238
  - 1.6968486309051514
  - 1.6709041595458984
  score_time:
  - 7.611552953720093
  - 7.398692607879639
  - 7.346872568130493
  - 7.366802453994751
  - 7.638225555419922
  test_average_precision_macro:
  - 0.9343691406074839
  - 0.8801269217445822
  - 0.8485501093521828
  - 0.9718675234512677
  - 0.9748048736919155
  test_average_precision_micro:
  - 0.9214311215144964
  - 0.9300663841605843
  - 0.9073490830078279
  - 0.9056619059642567
  - 0.9223122527937581
  test_average_precision_samples:
  - 0.9383078231292518
  - 0.9294911466391611
  - 0.9078219013237064
  - 0.9129830917874396
  - 0.9124113475177306
  test_average_precision_weighted:
  - 0.9664869436201758
  - 0.9746360104548493
  - 0.9652577616088585
  - 0.9667339443322394
  - 0.9866231328522574
  test_coverage_error:
  - -1.2178571428571427
  - -1.288808664259928
  - -1.2707581227436824
  - -1.3043478260869565
  - -1.297872340425532
  test_f1_macro:
  - 0.2436534054181113
  - 0.23158494166897528
  - 0.22399578477560128
  - 0.22307559000535654
  - 0.2406235349273324
  test_f1_micro:
  - 0.7468354430379747
  - 0.7366167023554604
  - 0.720173535791757
  - 0.7086956521739131
  - 0.7610993657505286
  test_f1_samples:
  - 0.6273809523809524
  - 0.6161251504211793
  - 0.5968712394705173
  - 0.5869565217391305
  - 0.6323877068557919
  test_f1_weighted:
  - 0.629995910616378
  - 0.6176433293191259
  - 0.6062880541091551
  - 0.5964523504875282
  - 0.636215633007726
  test_hamming_loss:
  - -0.05357142857142857
  - -0.05550541516245487
  - -0.0582129963898917
  - -0.06068840579710145
  - -0.050088652482269506
  test_jaccard_macro:
  - 0.22507426256751142
  - 0.21640992725716732
  - 0.20415136678906567
  - 0.20218923646840914
  - 0.23192508710801396
  test_jaccard_micro:
  - 0.5959595959595959
  - 0.5830508474576271
  - 0.5627118644067797
  - 0.5488215488215489
  - 0.6143344709897611
  test_jaccard_samples:
  - 0.625
  - 0.6137184115523465
  - 0.5956678700361011
  - 0.5851449275362319
  - 0.6294326241134752
  test_jaccard_weighted:
  - 0.5908352351304129
  - 0.5806239147356446
  - 0.5568730450156398
  - 0.5439857592351742
  - 0.6132583170254402
  test_label_ranking_average_precision_score:
  - 0.9383078231292518
  - 0.9294911466391611
  - 0.9078219013237063
  - 0.9129830917874394
  - 0.9124113475177303
  test_label_ranking_loss:
  - 0.022193877551020407
  - 0.027720474471376995
  - 0.03236204228984012
  - 0.03312629399585921
  - 0.03335021952043229
  test_matthews_corrcoef_macro:
  - 0.25068832283999204
  - 0.22517966462380473
  - 0.21412743345607166
  - 0.21247196312834374
  - 0.23619402778936988
  test_matthews_corrcoef_micro:
  - 0.7438323493228056
  - 0.7379240492599096
  - 0.7178997908895162
  - 0.7087069317735378
  - 0.7611050734487358
  test_matthews_corrcoef_samples:
  - 0.6246583177448078
  - 0.6149202180401357
  - 0.5931743947343536
  - 0.5837203556339894
  - 0.6316681248605771
  test_matthews_corrcoef_weighted:
  - 0.6201830213544058
  - 0.601175579076285
  - 0.5808575548068378
  - 0.5689508457822102
  - 0.6240788173509566
  test_ndgc:
  - 0.955517637849742
  - 0.9496536828532629
  - 0.9318309159441344
  - 0.9365142153080784
  - 0.9364842028601478
  test_precision_macro:
  - 0.3686767329255861
  - 0.24770642201834864
  - 0.23891956952704618
  - 0.24008633304067895
  - 0.2488095238095238
  test_precision_micro:
  - 0.9725274725274725
  - 0.9885057471264368
  - 0.9595375722543352
  - 0.9644970414201184
  - 0.994475138121547
  test_precision_samples:
  - 0.6321428571428571
  - 0.6209386281588448
  - 0.5992779783393501
  - 0.5905797101449275
  - 0.6382978723404256
  test_precision_weighted:
  - 0.7320240389314789
  - 0.6551022325202743
  - 0.6420769218666416
  - 0.6389278591879897
  - 0.6573385518590998
  test_recall_macro:
  - 0.23041920731707316
  - 0.21850500871080142
  - 0.21162931223906833
  - 0.20864919797846626
  - 0.2329707756537025
  test_recall_micro:
  - 0.6061643835616438
  - 0.5870307167235495
  - 0.5763888888888888
  - 0.5601374570446735
  - 0.6164383561643836
  test_recall_samples:
  - 0.625
  - 0.6137184115523465
  - 0.5956678700361011
  - 0.5851449275362319
  - 0.6294326241134752
  test_recall_weighted:
  - 0.6061643835616438
  - 0.5870307167235495
  - 0.5763888888888888
  - 0.5601374570446735
  - 0.6164383561643836
  test_roc_auc_macro:
  - 0.9897392680922859
  - 0.9871296073224677
  - .nan
  - 0.9880811670056171
  - 0.9952781447378972
  test_roc_auc_micro:
  - 0.9818262847739867
  - 0.9798647235991829
  - 0.9804957641770401
  - 0.9776381337535203
  - 0.9806682964595598
  test_roc_auc_samples:
  - 0.9778061224489796
  - 0.9722795255286232
  - 0.96763795771016
  - 0.9668737060041409
  - 0.9666497804795676
  test_roc_auc_weighted:
  - 0.9852362185072803
  - 0.9905098585642602
  - .nan
  - 0.9822589069077307
  - 0.9933886533042283
start: 2023-10-21 17:25:28.968184
wrapper: null
