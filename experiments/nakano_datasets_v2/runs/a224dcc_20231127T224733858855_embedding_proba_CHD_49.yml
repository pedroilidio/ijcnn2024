active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gDMzMzMz4z8AmZmZmZnZv4AzMzMzM+M/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZyT/MzMzMzMz8vzQzMzMzM/M/NDMzMzMz8z+YmZmZmZnpvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z9AMzMzMzPjPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ADMzMzMz478AmpmZmZnZPwAzMzMzM+O/AJqZmZmZ2T8AmpmZmZnZPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AAAAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAAAAAAAACMAAAAAAAAAIQA==
      n_labels: 6
      n_samples: 555
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: CHD_49
  params:
    path: nakano_datasets_v2/datasets/MLC/CHD_49.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 22:49:55.737530
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: a224dcc58820ea8da620a75b43cceefa0ed4a03c1b2bc7f0cf1b47eba92e112e
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/a224dcc_20231127T224733858855_embedding_proba_CHD_49.yml
results:
  fit_time:
  - 59.76823091506958
  - 62.51962971687317
  - 60.655895948410034
  - 68.16269063949585
  - 62.59719657897949
  score_time:
  - 72.23473739624023
  - 78.03294897079468
  - 72.6009132862091
  - 70.33931183815002
  - 76.58817911148071
  test_average_precision_macro:
  - 0.46685254188484016
  - 0.45209902475174446
  - 0.44997205893223463
  - 0.47364784914427777
  - 0.47743814181499217
  test_average_precision_micro:
  - 0.5678411038595405
  - 0.5216824416044004
  - 0.5344432016653907
  - 0.5691199486246714
  - 0.5546595638935694
  test_average_precision_samples:
  - 0.7353338430173293
  - 0.6852753195673549
  - 0.6956456456456457
  - 0.7296052631578948
  - 0.6999382716049383
  test_average_precision_weighted:
  - 0.6029955165121649
  - 0.5640740920376751
  - 0.5707159543348732
  - 0.59893692413213
  - 0.5912301762308643
  test_coverage_error:
  - -3.9908256880733943
  - -4.212389380530974
  - -4.108108108108108
  - -3.8333333333333335
  - -4.138888888888889
  test_f1_macro:
  - 0.12293910565981526
  - 0.08929867174368439
  - 0.10558331018419975
  - 0.10326214085939489
  - 0.1174181312042093
  test_f1_micro:
  - 0.16463414634146342
  - 0.1139240506329114
  - 0.14241486068111453
  - 0.13249211356466875
  - 0.14634146341463417
  test_f1_samples:
  - 0.13241590214067278
  - 0.0893805309734513
  - 0.1198198198198198
  - 0.09999999999999999
  - 0.11574074074074074
  test_f1_weighted:
  - 0.16047762225615508
  - 0.11284082933866076
  - 0.13866308935601881
  - 0.13112310142251127
  - 0.14551024679311564
  test_hamming_loss:
  - -0.41896024464831805
  - -0.41297935103244837
  - -0.4159159159159159
  - -0.402046783625731
  - -0.43209876543209874
  test_jaccard_macro:
  - 0.06852057880284668
  - 0.047617552958632424
  - 0.05778305972133783
  - 0.056131025396392704
  - 0.06343245454580744
  test_jaccard_micro:
  - 0.08970099667774087
  - 0.06040268456375839
  - 0.07666666666666666
  - 0.07094594594594594
  - 0.07894736842105263
  test_jaccard_samples:
  - 0.0963302752293578
  - 0.06489675516224189
  - 0.09234234234234234
  - 0.07163742690058479
  - 0.08179012345679013
  test_jaccard_weighted:
  - 0.09036486654977537
  - 0.06033585605780477
  - 0.07661809989555197
  - 0.07116999713859178
  - 0.07887535540846924
  test_label_ranking_average_precision_score:
  - 0.7445081549439347
  - 0.6852753195673549
  - 0.7046546546546552
  - 0.7296052631578949
  - 0.7091975308641978
  test_label_ranking_loss:
  - 0.2765545361875637
  - 0.3317354965585054
  - 0.3199199199199199
  - 0.2834551656920078
  - 0.3062242798353909
  test_matthews_corrcoef_macro:
  - 0.018062687754106008
  - 0.04240832378414563
  - 0.01747427757710656
  - 0.0379362614202583
  - 0.016564186316370688
  test_matthews_corrcoef_micro:
  - 0.10278849837387656
  - 0.0990045764487622
  - 0.09416959314707178
  - 0.10766015931435984
  - 0.0745392572032403
  test_matthews_corrcoef_samples:
  - 0.06624604819312012
  - 0.05851138937331827
  - 0.07588365421429012
  - 0.06075516923265984
  - 0.05311457387686972
  test_matthews_corrcoef_weighted:
  - 0.021188085167617287
  - 0.042884486625556564
  - 0.007860531238844882
  - 0.04496862155015255
  - -0.005613842826683096
  test_ndgc:
  - 0.82320009745028
  - 0.7950024552127122
  - 0.796856034437366
  - 0.8214919831117983
  - 0.7968031663333376
  test_precision_macro:
  - 0.44246031746031744
  - 0.5273809523809524
  - 0.4759259259259259
  - 0.46428571428571425
  - 0.5293410293410293
  test_precision_micro:
  - 0.627906976744186
  - 0.6666666666666666
  - 0.6216216216216216
  - 0.65625
  - 0.5853658536585366
  test_precision_samples:
  - 0.22935779816513763
  - 0.1504424778761062
  - 0.19369369369369369
  - 0.17543859649122806
  - 0.2175925925925926
  test_precision_weighted:
  - 0.5741019214703427
  - 0.652957653649695
  - 0.5911616161616161
  - 0.61203007518797
  - 0.6124460131428773
  test_recall_macro:
  - 0.07248034647800523
  - 0.04918777157719246
  - 0.060564516857947115
  - 0.058304644074976784
  - 0.06722706487889875
  test_recall_micro:
  - 0.09473684210526316
  - 0.06228373702422145
  - 0.08041958041958042
  - 0.07368421052631578
  - 0.08362369337979095
  test_recall_samples:
  - 0.09785932721712538
  - 0.06710914454277286
  - 0.09684684684684684
  - 0.07163742690058479
  - 0.08256172839506172
  test_recall_weighted:
  - 0.09473684210526316
  - 0.06228373702422145
  - 0.08041958041958042
  - 0.07368421052631578
  - 0.08362369337979095
  test_roc_auc_macro:
  - 0.49818749612741636
  - 0.504724704604146
  - 0.506961228568128
  - 0.5670846828917872
  - 0.514590387604635
  test_roc_auc_micro:
  - 0.6671135834165359
  - 0.6224726696969427
  - 0.6209054103790946
  - 0.6768060502132525
  - 0.6642360072195894
  test_roc_auc_samples:
  - .nan
  - 0.6682645034414946
  - .nan
  - 0.7165448343079922
  - .nan
  test_roc_auc_weighted:
  - 0.5369662978563808
  - 0.49361360151408873
  - 0.46930285028723717
  - 0.5381711567991024
  - 0.507252371473053
start: 2023-11-27 22:47:33.858855
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
