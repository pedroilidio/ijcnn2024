active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT8AmpmZmZnJP4CZmZmZmem/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ+T+gmZmZmZn5P6CZmZmZmfk/mJmZmZmZGcCgmZmZmZn5Pw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          cGZmZmZmGkBAZmZmZmb2vyAzMzMzMwPAQGZmZmZm9r9AZmZmZmb2vw==
      n_labels: 6
      n_samples: 593
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: emotions
  params:
    path: nakano_datasets_v2/datasets/MLC/emotions.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 23:35:30.703875
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler:
            call: deep_forest.weak_labels.PositiveUnlabeledImputer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesClassifier
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  class_weight: null
                  criterion: gini
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: 0.9
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: true
                  random_state: 0
                  verbose: true
                  warm_start: false
              sampling_strategy: auto
              threshold: 0.8
              use_oob_proba: true
              verbose: true
              weight_proba: true
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba_weak
  params:
    memory: estimators_cache
hash: 5ae1ede4e2569f64e7993713d50db9e8e6bbfe1754008900e3c02cc5dcefa69f
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/5ae1ede_20231127T233444904827_proba_weak_emotions.yml
results:
  fit_time:
  - 37.74111461639404
  - 37.954609394073486
  - 36.341336250305176
  - 36.368884801864624
  - 36.14016032218933
  score_time:
  - 7.120920419692993
  - 7.315793752670288
  - 7.1129326820373535
  - 7.065899848937988
  - 7.071606636047363
  test_average_precision_macro:
  - 0.7276082419293074
  - 0.7140370520661424
  - 0.6994392269084139
  - 0.6981555770119483
  - 0.6742348478524302
  test_average_precision_micro:
  - 0.7476090378845369
  - 0.7236251345622243
  - 0.7005494720844904
  - 0.696664095512615
  - 0.6524945883692681
  test_average_precision_samples:
  - 0.8351686507936507
  - 0.810462962962963
  - 0.7660697887970616
  - 0.7709490740740741
  - 0.799375
  test_average_precision_weighted:
  - 0.7346152878622793
  - 0.7209266594850674
  - 0.709113292085782
  - 0.6965522774713007
  - 0.6654342941731795
  test_coverage_error:
  - -2.8035714285714284
  - -2.7
  - -2.760330578512397
  - -2.841666666666667
  - -2.7416666666666667
  test_f1_macro:
  - 0.112117382705618
  - 0.05210607163068962
  - 0.06592111592111592
  - 0.048240923163523776
  - 0.18477051181969217
  test_f1_micro:
  - 0.11206896551724138
  - 0.0608695652173913
  - 0.06986899563318777
  - 0.05128205128205128
  - 0.18548387096774194
  test_f1_samples:
  - 0.06964285714285715
  - 0.04305555555555555
  - 0.04407713498622588
  - 0.030555555555555555
  - 0.12333333333333331
  test_f1_weighted:
  - 0.10993110622441808
  - 0.058565622931946705
  - 0.06922307490489309
  - 0.049181246598084885
  - 0.1789463015781538
  test_hamming_loss:
  - -0.30654761904761907
  - -0.3
  - -0.29338842975206614
  - -0.30833333333333335
  - -0.28055555555555556
  test_jaccard_macro:
  - 0.06078709203709204
  - 0.027635327635327635
  - 0.03446684787639761
  - 0.025625527512319963
  - 0.10640751183514341
  test_jaccard_micro:
  - 0.0593607305936073
  - 0.03139013452914798
  - 0.03619909502262444
  - 0.02631578947368421
  - 0.10222222222222223
  test_jaccard_samples:
  - 0.05654761904761905
  - 0.036111111111111115
  - 0.034435261707988975
  - 0.02222222222222222
  - 0.10833333333333334
  test_jaccard_weighted:
  - 0.0593607305936073
  - 0.031074757319101212
  - 0.036247086247086245
  - 0.026054122089364383
  - 0.10235760971055088
  test_label_ranking_average_precision_score:
  - 0.8351686507936507
  - 0.8104629629629628
  - 0.7660697887970614
  - 0.7709490740740741
  - 0.7993749999999998
  test_label_ranking_loss:
  - 0.15104166666666669
  - 0.1511111111111111
  - 0.16845730027548209
  - 0.17657407407407405
  - 0.1638425925925926
  test_matthews_corrcoef_macro:
  - 0.18359279473739623
  - 0.07451003373314677
  - 0.12579304343791844
  - 0.08125496574339748
  - 0.21616800780664716
  test_matthews_corrcoef_micro:
  - 0.202002159572074
  - 0.11485231222474465
  - 0.14282508714564618
  - 0.11555574104083595
  - 0.23319759289183412
  test_matthews_corrcoef_samples:
  - 0.06603809968204034
  - 0.03620483493000822
  - 0.04179094918320905
  - 0.025900179609314847
  - 0.11048532352795633
  test_matthews_corrcoef_weighted:
  - 0.18144960796417955
  - 0.07894825952089023
  - 0.12810741835301967
  - 0.08461822340491226
  - 0.20226724606532215
  test_ndgc:
  - 0.8896229793282738
  - 0.8733452728972
  - 0.8377313819836236
  - 0.8409040921407464
  - 0.8635331377384386
  test_precision_macro:
  - 0.8333333333333334
  - 0.4166666666666667
  - 0.75
  - 0.4583333333333333
  - 0.7374999999999999
  test_precision_micro:
  - 1.0
  - 0.7777777777777778
  - 0.8888888888888888
  - 0.8571428571428571
  - 0.8518518518518519
  test_precision_samples:
  - 0.09821428571428571
  - 0.058333333333333334
  - 0.06198347107438017
  - 0.05
  - 0.15833333333333333
  test_precision_weighted:
  - 0.8493150684931506
  - 0.4445701357466063
  - 0.759090909090909
  - 0.4911894273127753
  - 0.7290723981900452
  test_recall_macro:
  - 0.06078709203709204
  - 0.028147412556548606
  - 0.03457930851517404
  - 0.02604569557954686
  - 0.10777893042354314
  test_recall_micro:
  - 0.0593607305936073
  - 0.03167420814479638
  - 0.03636363636363636
  - 0.02643171806167401
  - 0.10407239819004525
  test_recall_samples:
  - 0.05654761904761905
  - 0.036111111111111115
  - 0.03856749311294765
  - 0.02222222222222222
  - 0.10833333333333334
  test_recall_weighted:
  - 0.0593607305936073
  - 0.03167420814479638
  - 0.03636363636363636
  - 0.02643171806167401
  - 0.10407239819004525
  test_roc_auc_macro:
  - 0.8327089971360708
  - 0.8401477606331197
  - 0.8321187572525298
  - 0.8203407426711342
  - 0.8118011425740633
  test_roc_auc_micro:
  - 0.8461197294545747
  - 0.8576610234042746
  - 0.8529284944304707
  - 0.8435006389005548
  - 0.8286709164936208
  test_roc_auc_samples:
  - 0.8489583333333334
  - 0.8488888888888888
  - 0.8315426997245179
  - 0.8234259259259259
  - 0.8361574074074074
  test_roc_auc_weighted:
  - 0.8345470287307887
  - 0.8431400964115614
  - 0.8364893695822875
  - 0.8178549981909349
  - 0.8035840832775233
start: 2023-11-27 23:34:44.904827
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
