active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            NDMzMzMz4z+YmZmZmZnZv5iZmZmZmdm/NDMzMzMz4z+YmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ODMzMzMz4z+QmZmZmZnZv5CZmZmZmdm/kJmZmZmZ2b84MzMzMzPjPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ2T8gMzMzMzPjv8CZmZmZmdk/wJmZmZmZ2T8gMzMzMzPjvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+AmZmZmZnJv6CZmZmZmek/gJmZmZmZyb+AmZmZmZnJvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          QDMzMzMzA0CAmZmZmZn5v4CZmZmZmfm/wMzMzMzMBMBAMzMzMzMLQA==
      n_labels: 6
      n_samples: 207
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: VirusPseAAC
  params:
    path: nakano_datasets_v2/datasets/MLC/VirusPseAAC.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:43:59.655429
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.ExtraTreesRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.8
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        - - rf
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.RandomForestRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.95
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_proba
  params:
    memory: estimators_cache
hash: c2d6e09777d61fedd1645867896979f5781e95a38c37ea8fec7f72436c8eecbd
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/c2d6e09_20231021T174210742974_embedding_proba_VirusPseAAC.yml
results:
  fit_time:
  - 51.201488733291626
  - 52.27098894119263
  - 49.701316595077515
  - 53.80723214149475
  - 53.26540017127991
  score_time:
  - 37.01587533950806
  - 33.532710552215576
  - 58.36241292953491
  - 54.60601449012756
  - 38.136642932891846
  test_average_precision_macro:
  - 0.2728208726868842
  - 0.44497880816285146
  - 0.4604162469553405
  - 0.3120019920293358
  - 0.4006854361884395
  test_average_precision_micro:
  - 0.34942631722814876
  - 0.4618938091114477
  - 0.3829727194235461
  - 0.3780448430404214
  - 0.4017804712383421
  test_average_precision_samples:
  - 0.5534188034188033
  - 0.6131782945736434
  - 0.6144702842377261
  - 0.5600378787878788
  - 0.5758771929824561
  test_average_precision_weighted:
  - 0.4279955497532728
  - 0.4937075228057297
  - 0.4259148645765242
  - 0.4397059537782663
  - 0.4299707083061607
  test_coverage_error:
  - -3.1025641025641026
  - -2.5813953488372094
  - -2.3255813953488373
  - -2.772727272727273
  - -3.1052631578947367
  test_f1_macro:
  - 0.07997557997557997
  - 0.16230936819172112
  - 0.1331644144144144
  - 0.19920977011494254
  - 0.15053763440860216
  test_f1_micro:
  - 0.1846153846153846
  - 0.3908045977011494
  - 0.3218390804597701
  - 0.35000000000000003
  - 0.358974358974359
  test_f1_samples:
  - 0.13675213675213674
  - 0.31007751937984496
  - 0.27131782945736427
  - 0.25757575757575757
  - 0.28508771929824556
  test_f1_weighted:
  - 0.16647977872467667
  - 0.3269230769230769
  - 0.26192567567567565
  - 0.32638793103448277
  - 0.30866540164452877
  test_hamming_loss:
  - -0.2264957264957265
  - -0.2054263565891473
  - -0.22868217054263565
  - -0.19696969696969696
  - -0.21929824561403508
  test_jaccard_macro:
  - 0.04801587301587301
  - 0.10761904761904761
  - 0.08443562610229277
  - 0.12556116722783386
  - 0.09797101449275362
  test_jaccard_micro:
  - 0.1016949152542373
  - 0.24285714285714285
  - 0.1917808219178082
  - 0.21212121212121213
  - 0.21875
  test_jaccard_samples:
  - 0.1282051282051282
  - 0.26744186046511625
  - 0.2441860465116279
  - 0.23863636363636365
  - 0.2587719298245614
  test_jaccard_weighted:
  - 0.09995140913508259
  - 0.2165934065934066
  - 0.1658201058201058
  - 0.20614478114478113
  - 0.20064791133844842
  test_label_ranking_average_precision_score:
  - 0.5534188034188033
  - 0.6131782945736434
  - 0.6144702842377261
  - 0.5600378787878787
  - 0.5758771929824561
  test_label_ranking_loss:
  - 0.37386039886039885
  - 0.27267441860465114
  - 0.23210594315245475
  - 0.3386363636363636
  - 0.3466374269005848
  test_matthews_corrcoef_macro:
  - -0.020002994841967815
  - 0.04436065024300318
  - -0.007786799012623034
  - 0.09079553992731387
  - 0.028837090833258267
  test_matthews_corrcoef_micro:
  - 0.11026039580663649
  - 0.280630529910683
  - 0.1910698820680321
  - 0.25337974274410674
  - 0.25931342261145773
  test_matthews_corrcoef_samples:
  - 0.0850314811799189
  - 0.24865348344890892
  - 0.17932467344695102
  - 0.2048544173208606
  - 0.21781672956933318
  test_matthews_corrcoef_weighted:
  - -0.010790884258963842
  - 0.0878698224852071
  - -0.004559958701694135
  - 0.11014668796462587
  - 0.057330237345219665
  test_ndgc:
  - 0.6664518594452369
  - 0.7136884620959605
  - 0.7153110680118988
  - 0.6690343727201065
  - 0.6892907759421419
  test_precision_macro:
  - 0.13425925925925927
  - 0.16230936819172112
  - 0.12698412698412698
  - 0.2638888888888889
  - 0.17216117216117213
  test_precision_micro:
  - 0.375
  - 0.4857142857142857
  - 0.3783783783783784
  - 0.4666666666666667
  - 0.5185185185185185
  test_precision_samples:
  - 0.14102564102564102
  - 0.3023255813953488
  - 0.26744186046511625
  - 0.25
  - 0.3157894736842105
  test_precision_weighted:
  - 0.27947845804988664
  - 0.3269230769230769
  - 0.25047619047619046
  - 0.405
  - 0.35337211807800045
  test_recall_macro:
  - 0.05882352941176471
  - 0.16230936819172112
  - 0.14276960784313728
  - 0.16526610644257703
  - 0.13398692810457516
  test_recall_micro:
  - 0.12244897959183673
  - 0.3269230769230769
  - 0.28
  - 0.28
  - 0.27450980392156865
  test_recall_samples:
  - 0.14102564102564102
  - 0.36046511627906974
  - 0.3023255813953488
  - 0.2840909090909091
  - 0.28508771929824556
  test_recall_weighted:
  - 0.12244897959183673
  - 0.3269230769230769
  - 0.28
  - 0.28
  - 0.27450980392156865
  test_roc_auc_macro:
  - 0.46162606456724103
  - 0.6620903937977108
  - 0.6785552183836497
  - 0.526719487262978
  - 0.5129289215686275
  test_roc_auc_micro:
  - 0.6597904026475454
  - 0.7604555638536221
  - 0.7709615384615387
  - 0.7103738317757009
  - 0.6725379417303644
  test_roc_auc_samples:
  - 0.6261396011396011
  - 0.7273255813953489
  - 0.7678940568475453
  - 0.6613636363636363
  - 0.6533625730994153
  test_roc_auc_weighted:
  - 0.551638837353123
  - 0.6353379916935264
  - 0.6114814814814814
  - 0.5758267919081872
  - 0.4935938100730488
start: 2023-10-21 17:42:10.742974
wrapper: null
