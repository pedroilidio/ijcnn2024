active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AmpmZmZnZPwCamZmZmdk/ADMzMzMz478AMzMzMzPjvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyb8AmpmZmZnJv4CZmZmZmek/AJqZmZmZyb8AmpmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ADMzMzMz478AMzMzMzPjvwCamZmZmdk/AJqZmZmZ2T8AmpmZmZnZPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b+AMzMzMzPjP4AzMzMzM+M/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gDMzMzMz4z8AmZmZmZnZvwCZmZmZmdm/gDMzMzMz4z8AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT+AmZmZmZnpvwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gDMzMzMzC0BAZmZmZmYawMCZmZmZmRFAgMzMzMzMDMCAMzMzMzMDQA==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-11-28 04:03:00.591214
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler:
            call: deep_forest.weak_labels.PositiveUnlabeledImputer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesClassifier
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  class_weight: null
                  criterion: gini
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: 0.9
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: true
                  random_state: 0
                  verbose: true
                  warm_start: false
              sampling_strategy: auto
              threshold: 0.8
              use_oob_proba: true
              verbose: true
              weight_proba: true
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba_weak
  params:
    memory: estimators_cache
hash: 308bece1f765ea1567756a0c933740b4a3d2078a471c76e89beee49a44c9c170
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/308bece_20231128T040207119577_proba_weak_scene.yml
results:
  fit_time:
  - 42.10203456878662
  - 41.912020206451416
  - 41.88434052467346
  - 41.167083501815796
  - 41.864659547805786
  score_time:
  - 10.389273881912231
  - 8.447187185287476
  - 8.353045225143433
  - 8.509900093078613
  - 8.430739402770996
  test_average_precision_macro:
  - 0.8596913251761952
  - 0.8528285571158323
  - 0.8479854997964421
  - 0.8436610315638404
  - 0.8518859923573506
  test_average_precision_micro:
  - 0.8579645164826231
  - 0.8541396013198833
  - 0.8529148482166307
  - 0.8432278168135433
  - 0.8572160288624259
  test_average_precision_samples:
  - 0.8881450488145048
  - 0.8751707650273224
  - 0.8752620545073375
  - 0.8795876288659794
  - 0.8960334029227558
  test_average_precision_weighted:
  - 0.8503765807099054
  - 0.8426430074340795
  - 0.8369189371218032
  - 0.8318679699070846
  - 0.8409090172287064
  test_coverage_error:
  - -1.4205020920502092
  - -1.4098360655737705
  - -1.440251572327044
  - -1.3876288659793814
  - -1.3778705636743216
  test_f1_macro:
  - 0.37805412924627513
  - 0.3927745688670181
  - 0.38736311126623685
  - 0.31737685029073753
  - 0.3544435508492973
  test_f1_micro:
  - 0.3744149765990639
  - 0.39506172839506176
  - 0.38198757763975155
  - 0.31884057971014496
  - 0.3497615262321145
  test_f1_samples:
  - 0.24616457461645744
  - 0.2595628415300546
  - 0.25017470300489164
  - 0.1972508591065292
  - 0.22581767571329156
  test_f1_weighted:
  - 0.3717442131485282
  - 0.381477885100112
  - 0.3722651858301643
  - 0.31295386569827566
  - 0.3410760132700489
  test_hamming_loss:
  - -0.1398186889818689
  - -0.13387978142076504
  - -0.13906359189378056
  - -0.14536082474226805
  - -0.14231036882393877
  test_jaccard_macro:
  - 0.2354225620431818
  - 0.2550820652025571
  - 0.24838564089397977
  - 0.1932831536196761
  - 0.22163735091599435
  test_jaccard_micro:
  - 0.23032629558541268
  - 0.24615384615384617
  - 0.236084452975048
  - 0.1896551724137931
  - 0.2119460500963391
  test_jaccard_samples:
  - 0.24372384937238495
  - 0.2581967213114754
  - 0.24737945492662475
  - 0.19484536082474227
  - 0.22407794015309676
  test_jaccard_weighted:
  - 0.23090959267229905
  - 0.2466437604052283
  - 0.23700015889408044
  - 0.19008402423003393
  - 0.21197798784005678
  test_label_ranking_average_precision_score:
  - 0.8881450488145045
  - 0.8751707650273222
  - 0.8752620545073372
  - 0.8795876288659792
  - 0.8960334029227556
  test_label_ranking_loss:
  - 0.06553347280334729
  - 0.06721311475409836
  - 0.06965408805031446
  - 0.06242268041237113
  - 0.05730688935281838
  test_matthews_corrcoef_macro:
  - 0.43717989745692604
  - 0.4525625826276387
  - 0.4379148102634549
  - 0.3852154515175137
  - 0.42452950925831284
  test_matthews_corrcoef_micro:
  - 0.43547597113789566
  - 0.4562439194579206
  - 0.437491567762353
  - 0.38997425911387384
  - 0.42276068712634013
  test_matthews_corrcoef_samples:
  - 0.24398993456953083
  - 0.2584627502625711
  - 0.24708520808442222
  - 0.19469523448296025
  - 0.22500424994495755
  test_matthews_corrcoef_weighted:
  - 0.43020758783600216
  - 0.4420397186251345
  - 0.42402873396770935
  - 0.38128537079673797
  - 0.4133987760186459
  test_ndgc:
  - 0.9174165594604573
  - 0.9083217723831281
  - 0.908109919366723
  - 0.9113587612405261
  - 0.9235626418155632
  test_precision_macro:
  - 0.9634502923976608
  - 0.9777777777777779
  - 0.9371980676328501
  - 0.938527147909299
  - 0.9907407407407408
  test_precision_micro:
  - 0.967741935483871
  - 0.9846153846153847
  - 0.9534883720930233
  - 0.9519230769230769
  - 0.990990990990991
  test_precision_samples:
  - 0.2510460251046025
  - 0.26229508196721313
  - 0.2557651991614256
  - 0.2020618556701031
  - 0.22964509394572025
  test_precision_weighted:
  - 0.9570735349010825
  - 0.9724581724581725
  - 0.9303644294357676
  - 0.9385619536950265
  - 0.9907764907764907
  test_recall_macro:
  - 0.23647265019658828
  - 0.25545361054537913
  - 0.250152920792486
  - 0.1946856456930367
  - 0.22201603754167376
  test_recall_micro:
  - 0.23210831721470018
  - 0.2471042471042471
  - 0.23883495145631067
  - 0.19148936170212766
  - 0.21235521235521235
  test_recall_samples:
  - 0.24372384937238495
  - 0.2581967213114754
  - 0.24737945492662475
  - 0.19484536082474227
  - 0.22407794015309676
  test_recall_weighted:
  - 0.23210831721470018
  - 0.2471042471042471
  - 0.23883495145631067
  - 0.19148936170212766
  - 0.21235521235521235
  test_roc_auc_macro:
  - 0.9489815540989733
  - 0.9495878013436984
  - 0.9474553726745979
  - 0.9502167854515401
  - 0.9505007993233959
  test_roc_auc_micro:
  - 0.9545409295357258
  - 0.955309280827953
  - 0.954633264526911
  - 0.9584167555111176
  - 0.9576305628937207
  test_roc_auc_samples:
  - 0.9344665271966526
  - 0.9327868852459017
  - 0.9303459119496855
  - 0.9375773195876289
  - 0.9426931106471816
  test_roc_auc_weighted:
  - 0.9449478183741892
  - 0.9450187427515148
  - 0.9427378389862243
  - 0.9449091257866061
  - 0.9457740913772834
start: 2023-11-28 04:02:07.119577
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
