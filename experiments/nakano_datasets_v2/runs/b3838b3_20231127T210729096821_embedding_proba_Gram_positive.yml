active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJv8CZmZmZmek/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ2b80MzMzMzPjP5iZmZmZmdm/NDMzMzMz4z+YmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b9AMzMzMzPjPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJiZmZmZyb8AmJmZmZnJvwCamZmZmek/AJiZmZmZyb8AmJmZmZnJvw==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_positive
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_positive.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 21:09:49.489935
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: b3838b3068f063c52c8f2026a9e75d53bf655d60458e9c787038457fe7ef736f
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/b3838b3_20231127T210729096821_embedding_proba_Gram_positive.yml
results:
  fit_time:
  - 65.51905226707458
  - 65.14697933197021
  - 68.93257808685303
  - 64.7552878856659
  - 67.28032565116882
  score_time:
  - 73.38596415519714
  - 72.96409058570862
  - 65.14804744720459
  - 74.36833667755127
  - 63.883305311203
  test_average_precision_macro:
  - 0.8807703597908376
  - 0.8696588279360964
  - 0.9062767503956037
  - 0.919075615444
  - 0.841972563951308
  test_average_precision_micro:
  - 0.9468470894189244
  - 0.951643940602604
  - 0.9565144713664411
  - 0.9583354648829393
  - 0.9499218736561577
  test_average_precision_samples:
  - 0.9583333333333333
  - 0.9527243589743589
  - 0.9595469255663431
  - 0.9599358974358974
  - 0.9615384615384616
  test_average_precision_weighted:
  - 0.9494908510240521
  - 0.9497885724684455
  - 0.9543902107507131
  - 0.9553558490419513
  - 0.954447443657206
  test_coverage_error:
  - -1.1346153846153846
  - -1.125
  - -1.116504854368932
  - -1.0865384615384615
  - -1.1346153846153846
  test_f1_macro:
  - 0.3141025641025641
  - 0.36989605894958805
  - 0.36273305934242184
  - 0.35827494769620005
  - 0.34049800328870095
  test_f1_micro:
  - 0.4060150375939849
  - 0.5211267605633803
  - 0.5142857142857142
  - 0.4817518248175182
  - 0.43283582089552247
  test_f1_samples:
  - 0.25961538461538464
  - 0.3557692307692308
  - 0.34951456310679613
  - 0.3173076923076923
  - 0.27884615384615385
  test_f1_weighted:
  - 0.4025752025752026
  - 0.5053402463654467
  - 0.4940713481586577
  - 0.46769678953849153
  - 0.42648411020504046
  test_hamming_loss:
  - -0.18990384615384615
  - -0.16346153846153846
  - -0.1650485436893204
  - -0.17067307692307693
  - -0.18269230769230768
  test_jaccard_macro:
  - 0.1986665773251139
  - 0.25547619047619047
  - 0.2492121848739496
  - 0.242404181184669
  - 0.22232142857142856
  test_jaccard_micro:
  - 0.25471698113207547
  - 0.3523809523809524
  - 0.34615384615384615
  - 0.3173076923076923
  - 0.2761904761904762
  test_jaccard_samples:
  - 0.25961538461538464
  - 0.3557692307692308
  - 0.34951456310679613
  - 0.3173076923076923
  - 0.27884615384615385
  test_jaccard_weighted:
  - 0.25457875457875456
  - 0.3523809523809524
  - 0.34615384615384615
  - 0.3173076923076923
  - 0.2761904761904762
  test_label_ranking_average_precision_score:
  - 0.9583333333333334
  - 0.952724358974359
  - 0.9595469255663429
  - 0.9599358974358976
  - 0.9615384615384616
  test_label_ranking_loss:
  - 0.041666666666666664
  - 0.038461538461538464
  - 0.03559870550161812
  - 0.028846153846153848
  - 0.04006410256410256
  test_matthews_corrcoef_macro:
  - 0.3217997511783921
  - 0.37282600580215086
  - 0.36966996316057343
  - 0.3662059450294876
  - 0.35151863300531516
  test_matthews_corrcoef_micro:
  - 0.4402400720755204
  - 0.5377331394497369
  - 0.532495591369685
  - 0.5084148303174132
  - 0.47111730983475675
  test_matthews_corrcoef_samples:
  - 0.25641025641025644
  - 0.3557692307692308
  - 0.34951456310679613
  - 0.3173076923076923
  - 0.27884615384615385
  test_matthews_corrcoef_weighted:
  - 0.4125972360761631
  - 0.4990466432388326
  - 0.492323195230149
  - 0.4740016964403144
  - 0.43907382274274703
  test_ndgc:
  - 0.9687898305467418
  - 0.9648767772410923
  - 0.9698329054438289
  - 0.9703510411057713
  - 0.9718245325053303
  test_precision_macro:
  - 0.71875
  - 0.75
  - 0.75
  - 0.75
  - 0.75
  test_precision_micro:
  - 0.9642857142857143
  - 1.0
  - 1.0
  - 1.0
  - 1.0
  test_precision_samples:
  - 0.25961538461538464
  - 0.3557692307692308
  - 0.34951456310679613
  - 0.3173076923076923
  - 0.27884615384615385
  test_precision_weighted:
  - 0.9321428571428572
  - 0.9714285714285714
  - 0.9615384615384616
  - 0.9711538461538461
  - 0.9619047619047619
  test_recall_macro:
  - 0.2013588850174216
  - 0.25547619047619047
  - 0.2492121848739496
  - 0.242404181184669
  - 0.22232142857142856
  test_recall_micro:
  - 0.2571428571428571
  - 0.3523809523809524
  - 0.34615384615384615
  - 0.3173076923076923
  - 0.2761904761904762
  test_recall_samples:
  - 0.25961538461538464
  - 0.3557692307692308
  - 0.34951456310679613
  - 0.3173076923076923
  - 0.27884615384615385
  test_recall_weighted:
  - 0.2571428571428571
  - 0.3523809523809524
  - 0.34615384615384615
  - 0.3173076923076923
  - 0.2761904761904762
  test_roc_auc_macro:
  - 0.975553789211923
  - 0.9720557272547912
  - 0.9804132187536752
  - 0.9814570145418102
  - 0.982898472458759
  test_roc_auc_micro:
  - 0.9767263818710764
  - 0.9793293523197061
  - 0.9814560439560439
  - 0.9839127218934911
  - 0.9804624100444037
  test_roc_auc_samples:
  - 0.9583333333333333
  - 0.9615384615384616
  - 0.9644012944983819
  - 0.9711538461538461
  - 0.9599358974358976
  test_roc_auc_weighted:
  - 0.9793475361403658
  - 0.979682010565921
  - 0.9788595633259418
  - 0.9776256102086951
  - 0.9873814310202811
start: 2023-11-27 21:07:29.096821
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
