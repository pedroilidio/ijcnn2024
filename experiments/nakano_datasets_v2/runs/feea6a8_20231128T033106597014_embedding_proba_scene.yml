active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AmpmZmZnZPwCamZmZmdk/ADMzMzMz478AMzMzMzPjvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyb+AmZmZmZnpPwCamZmZmcm/AJqZmZmZyb8AmpmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ADMzMzMz478AmpmZmZnZPwCamZmZmdk/ADMzMzMz478AmpmZmZnZPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gDMzMzMz4z8AmZmZmZnZvwCZmZmZmdm/gDMzMzMz4z8AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b8AmZmZmZnZv4AzMzMzM+M/AJmZmZmZ2b+AMzMzMzPjPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ6b8AmpmZmZnJPwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AGdmZmZm9j+AMzMzMzMDQACcmZmZmdk/ADIzMzMz47+AzMzMzMwMwA==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-11-28 03:45:17.396620
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: feea6a8bfaf6f4523b0ae704bbfd296a2fe27a3805ed9813e08337f2ee86c45b
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/feea6a8_20231128T033106597014_embedding_proba_scene.yml
results:
  fit_time:
  - 528.8155403137207
  - 588.1029229164124
  - 571.2220039367676
  - 580.567314863205
  - 601.5622780323029
  score_time:
  - 206.10085582733154
  - 208.19200134277344
  - 190.79713129997253
  - 199.46854782104492
  - 225.3143858909607
  test_average_precision_macro:
  - 0.7453779939776899
  - 0.7637419224485678
  - 0.775731290520366
  - 0.7388908699468711
  - 0.7204398571350454
  test_average_precision_micro:
  - 0.7465912753991464
  - 0.7601680873577136
  - 0.76384236925371
  - 0.7305372799452221
  - 0.7136589320284566
  test_average_precision_samples:
  - 0.8314930555555555
  - 0.843945720250522
  - 0.8553014553014553
  - 0.8196230982019364
  - 0.8064432989690722
  test_average_precision_weighted:
  - 0.727275527243649
  - 0.7546461794245899
  - 0.7617645951596
  - 0.7250414076468978
  - 0.7053242536456276
  test_coverage_error:
  - -1.6208333333333333
  - -1.582463465553236
  - -1.5197505197505197
  - -1.6390041493775933
  - -1.6432989690721649
  test_f1_macro:
  - 0.49274863844049094
  - 0.4918027289570181
  - 0.43910943506531736
  - 0.45423439715410896
  - 0.42878941294834677
  test_f1_micro:
  - 0.492040520984081
  - 0.4956772334293948
  - 0.43647234678624813
  - 0.4509516837481698
  - 0.4259818731117825
  test_f1_samples:
  - 0.3458333333333333
  - 0.35073068893528186
  - 0.29521829521829523
  - 0.31466113416320884
  - 0.2865979381443299
  test_f1_weighted:
  - 0.4765400595657305
  - 0.48358888931047284
  - 0.4289267520158423
  - 0.44686119169092264
  - 0.4212489873594257
  test_hamming_loss:
  - -0.121875
  - -0.12178148921363953
  - -0.13063063063063063
  - -0.12966804979253113
  - -0.13058419243986255
  test_jaccard_macro:
  - 0.33997765811607206
  - 0.3369167021485602
  - 0.2885209990738605
  - 0.2983010013346443
  - 0.2772199659503363
  test_jaccard_micro:
  - 0.32629558541266795
  - 0.32950191570881227
  - 0.27915869980879543
  - 0.29111531190926276
  - 0.2706333973128599
  test_jaccard_samples:
  - 0.3416666666666667
  - 0.3475991649269311
  - 0.2910602910602911
  - 0.31224066390041494
  - 0.2845360824742268
  test_jaccard_weighted:
  - 0.32657388621590344
  - 0.32990226651784055
  - 0.28031569945601825
  - 0.2923148757303109
  - 0.2711438177322257
  test_label_ranking_average_precision_score:
  - 0.8314930555555547
  - 0.8439457202505217
  - 0.8553014553014551
  - 0.8196230982019358
  - 0.806443298969072
  test_label_ranking_loss:
  - 0.10645833333333334
  - 0.09900835073068893
  - 0.08581081081081082
  - 0.10980290456431535
  - 0.115
  test_matthews_corrcoef_macro:
  - 0.5293608848003803
  - 0.5250697877099607
  - 0.4797647793237055
  - 0.4849458939412725
  - 0.47769596471225384
  test_matthews_corrcoef_micro:
  - 0.5284121376179883
  - 0.526717330403929
  - 0.47882779002111386
  - 0.4838265036145973
  - 0.4761498431401084
  test_matthews_corrcoef_samples:
  - 0.3437280549675086
  - 0.34758267179186453
  - 0.2914541920673682
  - 0.3095999766062982
  - 0.28452522307670525
  test_matthews_corrcoef_weighted:
  - 0.5162364080543085
  - 0.5181982836607824
  - 0.4693970748929657
  - 0.47760406439923586
  - 0.4704845202044646
  test_ndgc:
  - 0.874577428381423
  - 0.884445067672111
  - 0.8936011200660445
  - 0.8666179233419137
  - 0.8560306222773171
  test_precision_macro:
  - 0.9789473684210527
  - 0.9619444444444444
  - 0.9474358974358973
  - 0.9257894082650756
  - 0.9685786435786436
  test_precision_micro:
  - 0.9826589595375722
  - 0.9662921348314607
  - 0.954248366013072
  - 0.9333333333333333
  - 0.9724137931034482
  test_precision_samples:
  - 0.3541666666666667
  - 0.3569937369519833
  - 0.30353430353430355
  - 0.31950207468879666
  - 0.2907216494845361
  test_precision_weighted:
  - 0.9788864052021947
  - 0.9620671834625323
  - 0.9396839594514014
  - 0.9216104849739444
  - 0.965122627211602
  test_recall_macro:
  - 0.3415961448194764
  - 0.3403468964005006
  - 0.29093828989800236
  - 0.3031247673972007
  - 0.27867106097065153
  test_recall_micro:
  - 0.3281853281853282
  - 0.3333333333333333
  - 0.28294573643410853
  - 0.2972972972972973
  - 0.2727272727272727
  test_recall_samples:
  - 0.3416666666666667
  - 0.3475991649269311
  - 0.2910602910602911
  - 0.31224066390041494
  - 0.2845360824742268
  test_recall_weighted:
  - 0.3281853281853282
  - 0.3333333333333333
  - 0.28294573643410853
  - 0.2972972972972973
  - 0.2727272727272727
  test_roc_auc_macro:
  - 0.879976879700517
  - 0.9048463666335969
  - 0.9071872770772821
  - 0.891506580040507
  - 0.8709232310873262
  test_roc_auc_micro:
  - 0.8938951350043645
  - 0.9104434187427264
  - 0.9131807477185752
  - 0.900410008034271
  - 0.8835627123274605
  test_roc_auc_samples:
  - 0.8935416666666666
  - 0.9009916492693112
  - 0.9141891891891892
  - 0.8901970954356847
  - 0.885
  test_roc_auc_weighted:
  - 0.8688259103240579
  - 0.8995493577103958
  - 0.8993187356852015
  - 0.882095536294748
  - 0.8605290260479284
start: 2023-11-28 03:31:06.597014
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
