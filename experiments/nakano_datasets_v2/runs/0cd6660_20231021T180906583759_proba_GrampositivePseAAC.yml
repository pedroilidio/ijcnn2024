active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb/AmZmZmZnpPwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz4z+YmZmZmZnZvzQzMzMzM+M/mJmZmZmZ2b+YmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AM3MzMzM/D8AmpmZmZnpPwAzMzMzM/O/AJiZmZmZyb8AMzMzMzPzvw==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: GrampositivePseAAC
  params:
    path: nakano_datasets_v2/datasets/MLC/GrampositivePseAAC.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:10:00.649336
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - rf
          - call: deep_forest.estimator_adapters.EstimatorAsTransformer
            params:
              estimator:
                call: sklearn.ensemble._forest.RandomForestRegressor
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  criterion: squared_error
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: null
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: false
                  random_state: 0
                  verbose: true
                  warm_start: false
        - - xt
          - call: deep_forest.estimator_adapters.EstimatorAsTransformer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesRegressor
                params:
                  bootstrap: false
                  ccp_alpha: 0.0
                  criterion: squared_error
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: null
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: false
                  random_state: 0
                  verbose: true
                  warm_start: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: proba
  params:
    memory: estimators_cache
hash: 0cd6660b196a745e048785e639e07196f2f23d5f3802a6fc26c5e22d7ac9daa1
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/0cd6660_20231021T180906583759_proba_GrampositivePseAAC.yml
results:
  fit_time:
  - 31.99364161491394
  - 31.73524308204651
  - 31.018983602523804
  - 31.545177698135376
  - 30.668545246124268
  score_time:
  - 19.578495264053345
  - 21.792309999465942
  - 15.044218063354492
  - 12.913775444030762
  - 12.656916618347168
  test_average_precision_macro:
  - 0.41583523742029094
  - 0.3406097096274786
  - 0.4216487083747774
  - 0.446378145271532
  - 0.3457124418357378
  test_average_precision_micro:
  - 0.5384813797536419
  - 0.44536627776586407
  - 0.4581640801216944
  - 0.5788314644592704
  - 0.452185487726995
  test_average_precision_samples:
  - 0.7116013071895423
  - 0.7063106796116504
  - 0.661111111111111
  - 0.7443910256410255
  - 0.7015873015873013
  test_average_precision_weighted:
  - 0.5476673120516902
  - 0.43573182676262867
  - 0.45222452414757724
  - 0.5765763531554782
  - 0.44171473898244745
  test_coverage_error:
  - -1.7352941176470589
  - -1.7572815533980584
  - -1.838095238095238
  - -1.6442307692307692
  - -1.7904761904761906
  test_f1_macro:
  - 0.2765555986051918
  - 0.2522875816993464
  - 0.24171737660581474
  - 0.34726863454933626
  - 0.2862554112554112
  test_f1_micro:
  - 0.42105263157894735
  - 0.4
  - 0.38823529411764707
  - 0.5058823529411764
  - 0.43093922651933697
  test_f1_samples:
  - 0.34640522875816987
  - 0.33980582524271846
  - 0.3142857142857143
  - 0.41346153846153844
  - 0.3682539682539683
  test_f1_weighted:
  - 0.3835074359967812
  - 0.3628205128205128
  - 0.3494381660710261
  - 0.4761512042213797
  - 0.40122927387078333
  test_hamming_loss:
  - -0.2426470588235294
  - -0.25485436893203883
  - -0.24761904761904763
  - -0.20192307692307693
  - -0.24523809523809523
  test_jaccard_macro:
  - 0.17603189493433397
  - 0.16319158517756047
  - 0.1545195658000536
  - 0.23860495436766624
  - 0.1881720430107527
  test_jaccard_micro:
  - 0.26666666666666666
  - 0.25
  - 0.24087591240875914
  - 0.33858267716535434
  - 0.2746478873239437
  test_jaccard_samples:
  - 0.3431372549019608
  - 0.33980582524271846
  - 0.3142857142857143
  - 0.41346153846153844
  - 0.36666666666666664
  test_jaccard_weighted:
  - 0.24717311300331937
  - 0.23649516014093988
  - 0.2251888297532897
  - 0.33001905526025477
  - 0.26587543112193146
  test_label_ranking_average_precision_score:
  - 0.7116013071895426
  - 0.7063106796116505
  - 0.661111111111111
  - 0.7443910256410255
  - 0.7015873015873015
  test_label_ranking_loss:
  - 0.23692810457516342
  - 0.2508090614886731
  - 0.27936507936507937
  - 0.21474358974358976
  - 0.25873015873015875
  test_matthews_corrcoef_macro:
  - 0.16258029528459472
  - 0.09909504273079102
  - 0.10625833960146337
  - 0.256608804462481
  - 0.13265099715109838
  test_matthews_corrcoef_micro:
  - 0.2872428638395315
  - 0.25265473341222117
  - 0.2546497889010711
  - 0.40266070349072075
  - 0.2872563505803237
  test_matthews_corrcoef_samples:
  - 0.24334673730437176
  - 0.22330097087378645
  - 0.21269841269841272
  - 0.33974358974358976
  - 0.2531176216113298
  test_matthews_corrcoef_weighted:
  - 0.20693234728722099
  - 0.1437796953328014
  - 0.15162368720108918
  - 0.33390364505589953
  - 0.1880689988982521
  test_ndgc:
  - 0.7862538939529035
  - 0.781385166280658
  - 0.7479708280700976
  - 0.8098069450131147
  - 0.7783625461930802
  test_precision_macro:
  - 0.4625
  - 0.3232230392156863
  - 0.34097222222222223
  - 0.5295454545454545
  - 0.34345238095238095
  test_precision_micro:
  - 0.5373134328358209
  - 0.49295774647887325
  - 0.5076923076923077
  - 0.6515151515151515
  - 0.52
  test_precision_samples:
  - 0.35294117647058826
  - 0.33980582524271846
  - 0.3142857142857143
  - 0.41346153846153844
  - 0.37142857142857144
  test_precision_weighted:
  - 0.5793269230769231
  - 0.44350961538461536
  - 0.4634126984126984
  - 0.6652534965034965
  - 0.46462264150943394
  test_recall_macro:
  - 0.24062717770034842
  - 0.22820378151260504
  - 0.2123809523809524
  - 0.2939677700348432
  - 0.2580952380952381
  test_recall_micro:
  - 0.34615384615384615
  - 0.33653846153846156
  - 0.3142857142857143
  - 0.41346153846153844
  - 0.36792452830188677
  test_recall_samples:
  - 0.3431372549019608
  - 0.33980582524271846
  - 0.3142857142857143
  - 0.41346153846153844
  - 0.36666666666666664
  test_recall_weighted:
  - 0.34615384615384615
  - 0.33653846153846156
  - 0.3142857142857143
  - 0.41346153846153844
  - 0.36792452830188677
  test_roc_auc_macro:
  - 0.6248453103951501
  - 0.5870889500440367
  - 0.6141434518251745
  - 0.6888234618807756
  - 0.6363589642127478
  test_roc_auc_micro:
  - 0.7680921052631579
  - 0.7372002997002998
  - 0.7317006802721088
  - 0.81006533530572
  - 0.7426391058766976
  test_roc_auc_samples:
  - 0.7630718954248366
  - 0.749190938511327
  - 0.7206349206349206
  - 0.7852564102564101
  - 0.7412698412698412
  test_roc_auc_weighted:
  - 0.6851556709337477
  - 0.6148026052649509
  - 0.6075851451691788
  - 0.7376994246695333
  - 0.6337403703308337
start: 2023-10-21 18:09:06.583759
wrapper: null
