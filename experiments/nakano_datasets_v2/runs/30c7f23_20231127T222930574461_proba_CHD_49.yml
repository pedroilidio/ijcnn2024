active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZ2b8AmZmZmZnZv4AzMzMzM+M/AJmZmZmZ2b+AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/wJmZmZmZ6T8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZyT+gmZmZmZnJP6CZmZmZmck/oJmZmZmZyT+YmZmZmZnpvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z9AMzMzMzPjPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ADMzMzMz478AmpmZmZnZPwAzMzMzM+O/AJqZmZmZ2T8AmpmZmZnZPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AAAAAAAACEAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw==
      n_labels: 6
      n_samples: 555
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: CHD_49
  params:
    path: nakano_datasets_v2/datasets/MLC/CHD_49.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 22:30:36.420727
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba
  params:
    memory: estimators_cache
hash: 30c7f23ceaab41509d8e920ddac64ba5dd69c3f9141ac213824d423d91ae21c5
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/30c7f23_20231127T222930574461_proba_CHD_49.yml
results:
  fit_time:
  - 35.55468440055847
  - 31.952388763427734
  - 32.04212403297424
  - 34.4710910320282
  - 33.01257848739624
  score_time:
  - 22.87567639350891
  - 27.783504247665405
  - 27.94095540046692
  - 30.885884761810303
  - 25.190119743347168
  test_average_precision_macro:
  - 0.5385298103064903
  - 0.49296997598815256
  - 0.5036443866354391
  - 0.5023025798162474
  - 0.5000639761343301
  test_average_precision_micro:
  - 0.6672455318141816
  - 0.5749348507007127
  - 0.606595786642708
  - 0.627050644783609
  - 0.6312010818217022
  test_average_precision_samples:
  - 0.7438657407407406
  - 0.691531465093412
  - 0.7175300300300301
  - 0.7162537537537539
  - 0.7220362103174602
  test_average_precision_weighted:
  - 0.6741038595418897
  - 0.6054104484338907
  - 0.618716476370992
  - 0.620958280004703
  - 0.6287884644435295
  test_coverage_error:
  - -3.9166666666666665
  - -4.150442477876106
  - -3.990990990990991
  - -4.027027027027027
  - -4.080357142857143
  test_f1_macro:
  - 0.2634208763024846
  - 0.20102588627996978
  - 0.2481681814241982
  - 0.2723836017571016
  - 0.265414952917541
  test_f1_micro:
  - 0.3550913838120105
  - 0.2724795640326976
  - 0.33070866141732286
  - 0.3496143958868895
  - 0.37435897435897436
  test_f1_samples:
  - 0.3098765432098765
  - 0.21504424778761058
  - 0.26132561132561133
  - 0.2894894894894895
  - 0.3267006802721088
  test_f1_weighted:
  - 0.3473461106484059
  - 0.26399298977980756
  - 0.32211463542438584
  - 0.3463808659741234
  - 0.36169479972695273
  test_hamming_loss:
  - -0.38117283950617287
  - -0.3938053097345133
  - -0.38288288288288286
  - -0.37987987987987987
  - -0.3630952380952381
  test_jaccard_macro:
  - 0.16075992203151226
  - 0.11859716704787127
  - 0.1505223615419898
  - 0.16578867358863636
  - 0.16678828911383434
  test_jaccard_micro:
  - 0.21587301587301588
  - 0.15772870662460567
  - 0.19811320754716982
  - 0.2118380062305296
  - 0.2302839116719243
  test_jaccard_samples:
  - 0.22685185185185186
  - 0.16592920353982302
  - 0.19759759759759757
  - 0.21726726726726725
  - 0.24806547619047617
  test_jaccard_weighted:
  - 0.21546940351251861
  - 0.1572857209368963
  - 0.19773194520644982
  - 0.21324680185922643
  - 0.23240205946073064
  test_label_ranking_average_precision_score:
  - 0.7623842592592592
  - 0.6915314650934119
  - 0.7175300300300301
  - 0.7252627627627634
  - 0.7220362103174602
  test_label_ranking_loss:
  - 0.24020061728395062
  - 0.31157817109144537
  - 0.2900900900900901
  - 0.27815315315315314
  - 0.30493551587301587
  test_matthews_corrcoef_macro:
  - 0.09120903703190035
  - 0.038937254190629156
  - 0.06264364722690835
  - 0.07817918634362746
  - 0.09968310881616943
  test_matthews_corrcoef_micro:
  - 0.22284350222376717
  - 0.14931120810715354
  - 0.19587964976164435
  - 0.1964215311611313
  - 0.23914414164279407
  test_matthews_corrcoef_samples:
  - 0.21516465926451064
  - 0.12843941833254777
  - 0.15078701882539938
  - 0.17210095301504674
  - 0.23236004437118002
  test_matthews_corrcoef_weighted:
  - 0.0961544926992879
  - 0.04902125749161359
  - 0.05286300129140656
  - 0.07986198123826214
  - 0.13069887382574916
  test_ndgc:
  - 0.8302422173792734
  - 0.7928466661710064
  - 0.8082632972582232
  - 0.8079678502349585
  - 0.817042811873536
  test_precision_macro:
  - 0.5754347826086956
  - 0.4583333333333333
  - 0.5171550671550672
  - 0.5216269841269842
  - 0.5488578088578089
  test_precision_micro:
  - 0.7083333333333334
  - 0.625
  - 0.6702127659574468
  - 0.6538461538461539
  - 0.7019230769230769
  test_precision_samples:
  - 0.4876543209876544
  - 0.31342182890855463
  - 0.40540540540540543
  - 0.42792792792792794
  - 0.4895833333333333
  test_precision_weighted:
  - 0.7036494470534768
  - 0.5980255516840882
  - 0.6410524434914678
  - 0.6479573934837093
  - 0.6813884949549285
  test_recall_macro:
  - 0.17710476093969027
  - 0.13251205736385854
  - 0.16698558323402643
  - 0.18638549759526454
  - 0.18458237968726335
  test_recall_micro:
  - 0.23693379790940766
  - 0.17421602787456447
  - 0.21951219512195122
  - 0.23859649122807017
  - 0.25524475524475526
  test_recall_samples:
  - 0.24922839506172836
  - 0.1836283185840708
  - 0.2141141141141141
  - 0.23948948948948948
  - 0.27157738095238093
  test_recall_weighted:
  - 0.23693379790940766
  - 0.17421602787456447
  - 0.21951219512195122
  - 0.23859649122807017
  - 0.25524475524475526
  test_roc_auc_macro:
  - 0.5696458623239612
  - 0.5639951745792203
  - 0.5348599038979694
  - 0.5874441686285529
  - 0.5117956110037917
  test_roc_auc_micro:
  - 0.7281940409431794
  - 0.6735610469002022
  - 0.6992084432717679
  - 0.7179813049684579
  - 0.7062302981992101
  test_roc_auc_samples:
  - .nan
  - 0.6884218289085545
  - 0.7099099099099099
  - .nan
  - 0.6950644841269842
  test_roc_auc_weighted:
  - 0.5954706656077661
  - 0.5597211323463063
  - 0.5362668234185263
  - 0.5533833051621811
  - 0.5585779510580208
start: 2023-11-27 22:29:30.574461
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
