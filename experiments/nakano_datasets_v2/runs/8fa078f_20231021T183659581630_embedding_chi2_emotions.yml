active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ6b8AmpmZmZnJPwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb/AmZmZmZnpPwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z9AMzMzMzPjP4CZmZmZmdm/gJmZmZmZ2b+AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z9AMzMzMzPjP4CZmZmZmdm/gJmZmZmZ2b+AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          QGZmZmZm9r8gMzMzMzMDwHBmZmZmZhZAQGZmZmZm9r8AmZmZmZnZvw==
      n_labels: 6
      n_samples: 593
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: emotions
  params:
    path: nakano_datasets_v2/datasets/MLC/emotions.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:39:21.497853
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_pvalue
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_chi2
  params:
    memory: estimators_cache
hash: 8fa078f48a168f4ca24abd0abd1d603d4d63f04baea426ab593cf925ed4ecb63
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/8fa078f_20231021T183659581630_embedding_chi2_emotions.yml
results:
  fit_time:
  - 65.28445315361023
  - 61.23684859275818
  - 69.41300678253174
  - 70.7806453704834
  - 70.4604423046112
  score_time:
  - 60.46189308166504
  - 74.68713283538818
  - 51.62065243721008
  - 68.60463333129883
  - 63.66979455947876
  test_average_precision_macro:
  - 0.7334531746162135
  - 0.7553918796743258
  - 0.7719117277469604
  - 0.7119944054704194
  - 0.7298235249270703
  test_average_precision_micro:
  - 0.7512984654854888
  - 0.7426601109883529
  - 0.7615756557406099
  - 0.7400619594314423
  - 0.7225787450709386
  test_average_precision_samples:
  - 0.8180324074074075
  - 0.7997933884297521
  - 0.8186823992133727
  - 0.8142824074074074
  - 0.8028944911297851
  test_average_precision_weighted:
  - 0.7367380814622706
  - 0.7591519960858139
  - 0.7756428397377115
  - 0.7180124433361564
  - 0.7194049405519002
  test_coverage_error:
  - -2.6666666666666665
  - -2.5702479338842976
  - -2.7876106194690267
  - -2.7416666666666667
  - -2.7058823529411766
  test_f1_macro:
  - 0.5813644688644689
  - 0.6133783142880876
  - 0.5803772022868356
  - 0.6207514707514706
  - 0.5972040347040347
  test_f1_micro:
  - 0.6510416666666666
  - 0.6633663366336634
  - 0.6559999999999999
  - 0.6715328467153285
  - 0.6273458445040214
  test_f1_samples:
  - 0.5697222222222222
  - 0.6140495867768595
  - 0.5746312684365782
  - 0.6158333333333332
  - 0.5145658263305322
  test_f1_weighted:
  - 0.5972249846684236
  - 0.625073185002481
  - 0.6044440222615841
  - 0.6398313196519474
  - 0.6039399576561738
  test_hamming_loss:
  - -0.18611111111111112
  - -0.18732782369146006
  - -0.1902654867256637
  - -0.1875
  - -0.19467787114845939
  test_jaccard_macro:
  - 0.4537047872486956
  - 0.466981342912095
  - 0.45222842459684554
  - 0.4749890439148751
  - 0.4451842101842101
  test_jaccard_micro:
  - 0.4826254826254826
  - 0.4962962962962963
  - 0.4880952380952381
  - 0.5054945054945055
  - 0.45703125
  test_jaccard_samples:
  - 0.49861111111111106
  - 0.5392561983471075
  - 0.5088495575221239
  - 0.5486111111111112
  - 0.45308123249299725
  test_jaccard_weighted:
  - 0.4689159036375076
  - 0.4779797903960228
  - 0.4769635664372507
  - 0.4954954663773032
  - 0.4502574143114684
  test_label_ranking_average_precision_score:
  - 0.8180324074074071
  - 0.799793388429752
  - 0.8186823992133725
  - 0.8142824074074074
  - 0.8028944911297852
  test_label_ranking_loss:
  - 0.14034722222222223
  - 0.14483471074380164
  - 0.15078662733529993
  - 0.15921296296296295
  - 0.15282446311858075
  test_matthews_corrcoef_macro:
  - 0.49594716935439775
  - 0.5351304130772114
  - 0.5127492234305328
  - 0.5208825802228835
  - 0.5165437950903421
  test_matthews_corrcoef_micro:
  - 0.5394372512594252
  - 0.5391179167175709
  - 0.5481365504278821
  - 0.5455302282248431
  - 0.5190476709782981
  test_matthews_corrcoef_samples:
  - 0.5053423869712854
  - 0.5275935010898023
  - 0.5177686610943741
  - 0.5323352589898226
  - 0.4612508820392734
  test_matthews_corrcoef_weighted:
  - 0.5025764888349301
  - 0.5338889433484504
  - 0.5280355092392435
  - 0.5331985732344842
  - 0.5034041344838165
  test_ndgc:
  - 0.8771727423111102
  - 0.8590502515877284
  - 0.8776795435067188
  - 0.8744185546119747
  - 0.8635622453660435
  test_precision_macro:
  - 0.6600620978720825
  - 0.7986094866796621
  - 0.8415583930704899
  - 0.7295313382269905
  - 0.8467836829418752
  test_precision_micro:
  - 0.7668711656441718
  - 0.7282608695652174
  - 0.803921568627451
  - 0.7340425531914894
  - 0.7748344370860927
  test_precision_samples:
  - 0.65
  - 0.6735537190082644
  - 0.6592920353982301
  - 0.6708333333333333
  - 0.5700280112044818
  test_precision_weighted:
  - 0.6616683989789924
  - 0.7832255892255892
  - 0.8325182036875586
  - 0.7287084138322197
  - 0.8270810248211379
  test_recall_macro:
  - 0.5392880455339792
  - 0.5802905301997862
  - 0.5171536912438833
  - 0.5865736930022226
  - 0.5096536366645602
  test_recall_micro:
  - 0.5656108597285068
  - 0.6090909090909091
  - 0.5540540540540541
  - 0.6188340807174888
  - 0.527027027027027
  test_recall_samples:
  - 0.5541666666666667
  - 0.6170798898071624
  - 0.5604719764011798
  - 0.6194444444444446
  - 0.5126050420168067
  test_recall_weighted:
  - 0.5656108597285068
  - 0.6090909090909091
  - 0.5540540540540541
  - 0.6188340807174888
  - 0.527027027027027
  test_roc_auc_macro:
  - 0.8531740145915981
  - 0.8651252558685236
  - 0.8711893803843141
  - 0.8333590743565265
  - 0.8443314753264562
  test_roc_auc_micro:
  - 0.8726049383835545
  - 0.875
  - 0.8781511774932826
  - 0.8559067408937931
  - 0.8661374789423569
  test_roc_auc_samples:
  - 0.8596527777777777
  - 0.8551652892561983
  - 0.8492133726647001
  - 0.840787037037037
  - 0.8471755368814192
  test_roc_auc_weighted:
  - 0.8550499655551409
  - 0.8637155049179998
  - 0.8723159303882195
  - 0.8368182082194746
  - 0.8368451552967829
start: 2023-10-21 18:36:59.581630
wrapper: null
