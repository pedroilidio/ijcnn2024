active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb/AmZmZmZnpPwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz4z+YmZmZmZnZvzQzMzMzM+M/mJmZmZmZ2b+YmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z9AMzMzMzPjP4CZmZmZmdm/gJmZmZmZ2b+AmZmZmZnZvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJqZmZmZ6T8AmpmZmZnpPwCYmZmZmcm/gJmZmZmZAcAAmpmZmZnpPw==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_positive
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_positive.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 21:23:22.325928
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: dab3f0ca974612bec8448a92494869028083868f52b71176890bd9ab2d8ebd1d
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/dab3f0c_20231127T212105267997_embedding_proba_Gram_positive.yml
results:
  fit_time:
  - 61.72928047180176
  - 63.66571807861328
  - 68.6255567073822
  - 62.10952973365784
  - 62.29183101654053
  score_time:
  - 70.33915996551514
  - 72.45103144645691
  - 65.77535939216614
  - 72.36084961891174
  - 72.39478921890259
  test_average_precision_macro:
  - 0.848655787993869
  - 0.808135706717716
  - 0.8407597938619373
  - 0.7875134765127308
  - 0.7255960895015731
  test_average_precision_micro:
  - 0.8994066843648559
  - 0.8738444972869369
  - 0.953673877379682
  - 0.920273743823282
  - 0.8377100712042811
  test_average_precision_samples:
  - 0.9207119741100325
  - 0.9247572815533981
  - 0.9519230769230769
  - 0.9198113207547169
  - 0.9150485436893204
  test_average_precision_weighted:
  - 0.904665687153001
  - 0.8757242809763667
  - 0.9500970596827755
  - 0.9090417389232575
  - 0.8524279345472237
  test_coverage_error:
  - -1.2233009708737863
  - -1.174757281553398
  - -1.125
  - -1.2075471698113207
  - -1.2524271844660195
  test_f1_macro:
  - 0.18140602582496412
  - 0.11196911196911197
  - 0.16549953314659197
  - 0.08522727272727272
  - 0.16336682427107957
  test_f1_micro:
  - 0.2666666666666667
  - 0.17543859649122806
  - 0.23728813559322035
  - 0.1238938053097345
  - 0.22033898305084745
  test_f1_samples:
  - 0.1553398058252427
  - 0.0970873786407767
  - 0.1346153846153846
  - 0.0660377358490566
  - 0.1262135922330097
  test_f1_weighted:
  - 0.25949453702681824
  - 0.1683991683991684
  - 0.22480787186669535
  - 0.11856775300171526
  - 0.21830275057225412
  test_hamming_loss:
  - -0.21359223300970873
  - -0.22815533980582525
  - -0.21634615384615385
  - -0.23349056603773585
  - -0.22330097087378642
  test_jaccard_macro:
  - 0.10684523809523809
  - 0.06372549019607843
  - 0.0981184668989547
  - 0.047619047619047616
  - 0.09229965156794424
  test_jaccard_micro:
  - 0.15384615384615385
  - 0.09615384615384616
  - 0.1346153846153846
  - 0.0660377358490566
  - 0.12380952380952381
  test_jaccard_samples:
  - 0.1553398058252427
  - 0.0970873786407767
  - 0.1346153846153846
  - 0.0660377358490566
  - 0.1262135922330097
  test_jaccard_weighted:
  - 0.15384615384615385
  - 0.09615384615384616
  - 0.1346153846153846
  - 0.0660377358490566
  - 0.12380952380952381
  test_label_ranking_average_precision_score:
  - 0.9207119741100324
  - 0.9247572815533981
  - 0.9519230769230769
  - 0.9198113207547168
  - 0.9150485436893204
  test_label_ranking_loss:
  - 0.0703883495145631
  - 0.055016181229773455
  - 0.041666666666666664
  - 0.06918238993710692
  - 0.07605177993527507
  test_matthews_corrcoef_macro:
  - 0.22480290448037266
  - 0.14304264151960905
  - 0.21225642178012114
  - 0.12202054362747577
  - 0.21731039726455706
  test_matthews_corrcoef_micro:
  - 0.34591634777518054
  - 0.27142238482399317
  - 0.3232299675777271
  - 0.22440969727312549
  - 0.3086453700201848
  test_matthews_corrcoef_samples:
  - 0.1553398058252427
  - 0.0970873786407767
  - 0.1346153846153846
  - 0.0660377358490566
  - 0.1262135922330097
  test_matthews_corrcoef_weighted:
  - 0.30871804016351617
  - 0.21208861351252292
  - 0.2795969050755426
  - 0.17246382534789778
  - 0.2835513422164642
  test_ndgc:
  - 0.941353802790661
  - 0.9443077000783864
  - 0.9642102056841056
  - 0.9402891570930317
  - 0.9373579220116448
  test_precision_macro:
  - 0.75
  - 0.5
  - 0.75
  - 0.5
  - 0.75
  test_precision_micro:
  - 1.0
  - 1.0
  - 1.0
  - 1.0
  - 1.0
  test_precision_samples:
  - 0.1553398058252427
  - 0.0970873786407767
  - 0.1346153846153846
  - 0.0660377358490566
  - 0.1262135922330097
  test_precision_weighted:
  - 0.9711538461538461
  - 0.7307692307692307
  - 0.9711538461538461
  - 0.7264150943396226
  - 0.9619047619047619
  test_recall_macro:
  - 0.10684523809523809
  - 0.06372549019607843
  - 0.0981184668989547
  - 0.047619047619047616
  - 0.09229965156794424
  test_recall_micro:
  - 0.15384615384615385
  - 0.09615384615384616
  - 0.1346153846153846
  - 0.0660377358490566
  - 0.12380952380952381
  test_recall_samples:
  - 0.1553398058252427
  - 0.0970873786407767
  - 0.1346153846153846
  - 0.0660377358490566
  - 0.1262135922330097
  test_recall_weighted:
  - 0.15384615384615385
  - 0.09615384615384616
  - 0.1346153846153846
  - 0.0660377358490566
  - 0.12380952380952381
  test_roc_auc_macro:
  - 0.9404018567377148
  - 0.9561208673014814
  - 0.9593266502893245
  - 0.9492201347153363
  - 0.9385401475590999
  test_roc_auc_micro:
  - 0.9474900099900101
  - 0.9582292707292708
  - 0.97534516765286
  - 0.9545508484632728
  - 0.9458042500387778
  test_roc_auc_samples:
  - 0.9296116504854369
  - 0.9449838187702266
  - 0.9583333333333334
  - 0.9308176100628931
  - 0.923948220064725
  test_roc_auc_weighted:
  - 0.9273154141459288
  - 0.9522282817865519
  - 0.9802557658137795
  - 0.9627161183761701
  - 0.9437136621197342
start: 2023-11-27 21:21:05.267997
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
