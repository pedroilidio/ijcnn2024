active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT+AmZmZmZnpvwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/wJmZmZmZ6T8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP0AzMzMzM+M/gJmZmZmZ2b+AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+gmZmZmZn5P0AzMzMzM+M/MDMzMzMzA8CAmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          QGZmZmZm9r/gzMzMzMwEQACZmZmZmdm/AJmZmZmZ2b8AmZmZmZnZvw==
      n_labels: 6
      n_samples: 593
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: emotions
  params:
    path: nakano_datasets_v2/datasets/MLC/emotions.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 23:12:30.478959
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba
  params:
    memory: estimators_cache
hash: bc04d481c78b32a64d27f1591b78dc3522348c0b92ca2901227d730561790213
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/bc04d48_20231127T231126852672_proba_emotions.yml
results:
  fit_time:
  - 29.57643151283264
  - 28.774024486541748
  - 29.102737188339233
  - 31.27921485900879
  - 29.302929639816284
  score_time:
  - 24.73676323890686
  - 26.628899574279785
  - 27.126779794692993
  - 31.861133337020874
  - 27.101168155670166
  test_average_precision_macro:
  - 0.7071275709734803
  - 0.6446172891372649
  - 0.6699307942411
  - 0.6958835665554316
  - 0.6464550983371183
  test_average_precision_micro:
  - 0.7000259509615756
  - 0.6365799226408353
  - 0.6769476833279989
  - 0.6718995975401632
  - 0.6272542886251065
  test_average_precision_samples:
  - 0.7881944444444444
  - 0.7503831417624521
  - 0.7648692810457515
  - 0.7826797385620915
  - 0.7649159663865546
  test_average_precision_weighted:
  - 0.7091324093381144
  - 0.6495382940344254
  - 0.6827029568707402
  - 0.6988783917943145
  - 0.6484712174968985
  test_coverage_error:
  - -2.75
  - -3.043103448275862
  - -2.8907563025210083
  - -2.907563025210084
  - -3.0168067226890756
  test_f1_macro:
  - 0.4185557318807857
  - 0.41937785296918423
  - 0.41776811151811155
  - 0.4317188094217878
  - 0.3999561781283527
  test_f1_micro:
  - 0.41999999999999993
  - 0.43333333333333335
  - 0.4503311258278146
  - 0.45016077170418006
  - 0.4147157190635452
  test_f1_samples:
  - 0.32166666666666666
  - 0.32816091954022986
  - 0.38907563025210073
  - 0.34453781512605036
  - 0.3408963585434173
  test_f1_weighted:
  - 0.4022931701151505
  - 0.4262456724779687
  - 0.43862866300366304
  - 0.43485061109422357
  - 0.4049664200593719
  test_hamming_loss:
  - -0.24166666666666667
  - -0.2442528735632184
  - -0.23249299719887956
  - -0.23949579831932774
  - -0.24509803921568626
  test_jaccard_macro:
  - 0.2830974427898437
  - 0.2691416088982012
  - 0.27293243622091395
  - 0.28886817984152263
  - 0.25650181672427436
  test_jaccard_micro:
  - 0.26582278481012656
  - 0.2765957446808511
  - 0.2905982905982906
  - 0.29045643153526973
  - 0.2616033755274262
  test_jaccard_samples:
  - 0.2791666666666667
  - 0.2744252873563218
  - 0.3249299719887955
  - 0.288515406162465
  - 0.28851540616246507
  test_jaccard_weighted:
  - 0.26852736120497694
  - 0.27441664280484684
  - 0.28965631929046565
  - 0.29014075792701083
  - 0.2598710942073791
  test_label_ranking_average_precision_score:
  - 0.7881944444444444
  - 0.7503831417624517
  - 0.7648692810457517
  - 0.7826797385620916
  - 0.7649159663865546
  test_label_ranking_loss:
  - 0.16858796296296294
  - 0.20158045977011493
  - 0.1962418300653595
  - 0.1867880485527544
  - 0.19985994397759105
  test_matthews_corrcoef_macro:
  - 0.36914516936852687
  - 0.38714998691257424
  - 0.3885858860552865
  - 0.3715927641142982
  - 0.3683709982585792
  test_matthews_corrcoef_micro:
  - 0.37336258869050565
  - 0.3883727991189806
  - 0.4065653807656436
  - 0.3908614725629529
  - 0.3749474306551488
  test_matthews_corrcoef_samples:
  - 0.2755654853974426
  - 0.28240340263146196
  - 0.3466273326903009
  - 0.306064635005657
  - 0.2970431911616204
  test_matthews_corrcoef_weighted:
  - 0.3451836072696887
  - 0.3805184019172363
  - 0.39986511547007486
  - 0.3644961788669627
  - 0.36180996133216387
  test_ndgc:
  - 0.8511681037742601
  - 0.8303995436855253
  - 0.8365563020160129
  - 0.8517522610385261
  - 0.840824471808956
  test_precision_macro:
  - 0.779265873015873
  - 0.8689968741119637
  - 0.8558201058201057
  - 0.7668421855921856
  - 0.8464110165197122
  test_precision_micro:
  - 0.7974683544303798
  - 0.8227848101265823
  - 0.8292682926829268
  - 0.7954545454545454
  - 0.8157894736842105
  test_precision_samples:
  - 0.39166666666666666
  - 0.4482758620689655
  - 0.5252100840336135
  - 0.4425770308123249
  - 0.44537815126050423
  test_precision_weighted:
  - 0.7631302521008404
  - 0.855748496526291
  - 0.857106782106782
  - 0.7621425286223492
  - 0.8368910773375581
  test_recall_macro:
  - 0.29912595761652366
  - 0.28704840379633684
  - 0.29199339741769914
  - 0.3108214197223485
  - 0.27333813968547305
  test_recall_micro:
  - 0.2850678733031674
  - 0.29411764705882354
  - 0.3090909090909091
  - 0.31390134529147984
  - 0.27802690582959644
  test_recall_samples:
  - 0.2875
  - 0.2744252873563218
  - 0.3291316526610644
  - 0.31092436974789917
  - 0.2941176470588236
  test_recall_weighted:
  - 0.2850678733031674
  - 0.29411764705882354
  - 0.3090909090909091
  - 0.31390134529147984
  - 0.27802690582959644
  test_roc_auc_macro:
  - 0.8329910950176367
  - 0.7873400869104765
  - 0.8092573265320598
  - 0.8181386022350736
  - 0.7800967555022571
  test_roc_auc_micro:
  - 0.8444218754250582
  - 0.7919028340080971
  - 0.8156882591093118
  - 0.810618030376371
  - 0.7845524371421004
  test_roc_auc_samples:
  - 0.831412037037037
  - 0.798419540229885
  - 0.8037581699346406
  - 0.8132119514472456
  - 0.800140056022409
  test_roc_auc_weighted:
  - 0.8334705716702498
  - 0.7863064444925953
  - 0.8129377393998296
  - 0.816025849519254
  - 0.7739235374957002
start: 2023-11-27 23:11:26.852672
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
