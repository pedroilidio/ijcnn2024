active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwCamZmZmdk/ADMzMzMz478AmpmZmZnZPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyb+AmZmZmZnpPwCamZmZmcm/AJqZmZmZyb8AmpmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ADMzMzMz478AmpmZmZnZPwAzMzMzM+O/AJqZmZmZ2T8AmpmZmZnZPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gDMzMzMz4z8AmZmZmZnZvwCZmZmZmdm/AJmZmZmZ2b+AMzMzMzPjPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gDMzMzMz4z+AMzMzMzPjPwCZmZmZmdm/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ6b8AmpmZmZnJPwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJmZmZmZ+b8AnJmZmZnZPwBnZmZmZvY/gDMzMzMzA0CAzMzMzMwEwA==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-11-28 03:14:32.204292
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba
  params:
    memory: estimators_cache
hash: a876433ab349986956f91b957cfcbf848af05cdc03b56edd4df03bd1af070fda
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/a876433_20231128T031320343101_proba_scene.yml
results:
  fit_time:
  - 36.365336656570435
  - 35.341790199279785
  - 35.840494871139526
  - 34.84489703178406
  - 35.75013756752014
  score_time:
  - 32.77383208274841
  - 35.4977126121521
  - 28.031289100646973
  - 33.798032999038696
  - 25.24651265144348
  test_average_precision_macro:
  - 0.8348005821941179
  - 0.8276436486269971
  - 0.8299623668234649
  - 0.8113512989512269
  - 0.8187757482643092
  test_average_precision_micro:
  - 0.8127387210473034
  - 0.8227759045672826
  - 0.820467673747734
  - 0.809641854992774
  - 0.8152907746674841
  test_average_precision_samples:
  - 0.8795031055900622
  - 0.883922383922384
  - 0.8834027777777778
  - 0.8636395267919277
  - 0.8752754820936639
  test_average_precision_weighted:
  - 0.820455697130737
  - 0.8127221589011134
  - 0.8189868803893529
  - 0.7985766306306195
  - 0.8063235017261303
  test_coverage_error:
  - -1.4057971014492754
  - -1.4074844074844075
  - -1.4270833333333333
  - -1.501043841336117
  - -1.4090909090909092
  test_f1_macro:
  - 0.5065813558757212
  - 0.49864978384248165
  - 0.5117007572542059
  - 0.48014018730599034
  - 0.4812603600198817
  test_f1_micro:
  - 0.5070821529745043
  - 0.5
  - 0.5112994350282486
  - 0.47826086956521735
  - 0.481962481962482
  test_f1_samples:
  - 0.36438923395445133
  - 0.3575883575883576
  - 0.3680555555555556
  - 0.34029227557411273
  - 0.3364325068870523
  test_f1_weighted:
  - 0.4973298377261679
  - 0.4847811038828304
  - 0.5061964604463264
  - 0.4710259962818085
  - 0.4745190055539712
  test_hamming_loss:
  - -0.12008281573498965
  - -0.12196812196812197
  - -0.12013888888888889
  - -0.12526096033402923
  - -0.12362258953168044
  test_jaccard_macro:
  - 0.34896337807296707
  - 0.3443959262174783
  - 0.3475771859178319
  - 0.3227124538992784
  - 0.32385296978557904
  test_jaccard_micro:
  - 0.3396584440227704
  - 0.3333333333333333
  - 0.34345351043643263
  - 0.3142857142857143
  - 0.31749049429657794
  test_jaccard_samples:
  - 0.3612836438923395
  - 0.35343035343035345
  - 0.36354166666666665
  - 0.33820459290187893
  - 0.3323002754820937
  test_jaccard_weighted:
  - 0.3404088237810642
  - 0.33350024337508527
  - 0.34303574686237226
  - 0.3154795483931478
  - 0.31806128526797456
  test_label_ranking_average_precision_score:
  - 0.879503105590062
  - 0.8839223839223839
  - 0.8834027777777773
  - 0.863639526791927
  - 0.8752754820936637
  test_label_ranking_loss:
  - 0.06454451345755693
  - 0.06481288981288982
  - 0.066875
  - 0.08225469728601252
  - 0.06668388429752066
  test_matthews_corrcoef_macro:
  - 0.5318553944095071
  - 0.522180800186667
  - 0.5369421455597915
  - 0.5118431714374992
  - 0.5102549153219791
  test_matthews_corrcoef_micro:
  - 0.5303366448219291
  - 0.5217552326940381
  - 0.5347352801991851
  - 0.511363691008738
  - 0.510415196180224
  test_matthews_corrcoef_samples:
  - 0.35937033544986796
  - 0.3517452523584285
  - 0.363136862813377
  - 0.3369409878751609
  - 0.3314136868757652
  test_matthews_corrcoef_weighted:
  - 0.5227618625267818
  - 0.510256630515489
  - 0.5313532763572689
  - 0.502895274843984
  - 0.5032938401007964
  test_ndgc:
  - 0.9115224100816782
  - 0.9145669504238786
  - 0.9144752339047693
  - 0.8991218058351153
  - 0.9078859214157298
  test_precision_macro:
  - 0.9492738444351349
  - 0.9352140856342537
  - 0.956959950381003
  - 0.9515256008359456
  - 0.9399014778325122
  test_precision_micro:
  - 0.9470899470899471
  - 0.9361702127659575
  - 0.9526315789473684
  - 0.9593023255813954
  - 0.943502824858757
  test_precision_samples:
  - 0.37060041407867494
  - 0.3659043659043659
  - 0.3770833333333333
  - 0.3444676409185804
  - 0.3450413223140496
  test_precision_weighted:
  - 0.9446734501329872
  - 0.9323664349460714
  - 0.9540630001156317
  - 0.9461845051500224
  - 0.9356913735823117
  test_recall_macro:
  - 0.35447052932342066
  - 0.35191300136169495
  - 0.3537890130301761
  - 0.32558046687797093
  - 0.32916539115581883
  test_recall_micro:
  - 0.34622823984526113
  - 0.34108527131782945
  - 0.34942084942084944
  - 0.3185328185328185
  - 0.3236434108527132
  test_recall_samples:
  - 0.3612836438923395
  - 0.35343035343035345
  - 0.36354166666666665
  - 0.33820459290187893
  - 0.3323002754820937
  test_recall_weighted:
  - 0.34622823984526113
  - 0.34108527131782945
  - 0.34942084942084944
  - 0.3185328185328185
  - 0.3236434108527132
  test_roc_auc_macro:
  - 0.9422425273452553
  - 0.9411837927992265
  - 0.9387168693639046
  - 0.9297470897826403
  - 0.9339305425550076
  test_roc_auc_micro:
  - 0.9455115733275276
  - 0.946762666404998
  - 0.9434637552757789
  - 0.9362516469901868
  - 0.9427304481061638
  test_roc_auc_samples:
  - 0.9354554865424431
  - 0.9351871101871103
  - 0.933125
  - 0.9177453027139876
  - 0.9333161157024794
  test_roc_auc_weighted:
  - 0.9360303302676461
  - 0.9348718775416128
  - 0.9335699650552519
  - 0.9238345565054958
  - 0.9274143188468416
start: 2023-11-28 03:13:20.343101
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
