active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gDMzMzMz4z8AmZmZmZnZvwCZmZmZmdm/AJmZmZmZ2b+AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb/AmZmZmZnpPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZyT+gmZmZmZnJP5iZmZmZmem/oJmZmZmZyT+gmZmZmZnJPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwCamZmZmdk/AJqZmZmZ2T8AMzMzMzPjvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AAAAAAAAAAAAAAAAAAAAAAAAAAAAABDAAAAAAAAA8L8AAAAAAAAUQA==
      n_labels: 6
      n_samples: 555
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: CHD_49
  params:
    path: nakano_datasets_v2/datasets/MLC/CHD_49.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:19:58.136404
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding
  params:
    memory: estimators_cache
hash: 6fb8e9945d565fc7b1de783458b4dfb5b1dac26d13f1f401b199da73d53182c2
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/6fb8e99_20231021T181802260416_embedding_CHD_49.yml
results:
  fit_time:
  - 53.11921525001526
  - 57.138375997543335
  - 55.962127923965454
  - 56.48807096481323
  - 52.15979290008545
  score_time:
  - 57.398637533187866
  - 54.02539610862732
  - 58.099992513656616
  - 56.214343309402466
  - 56.29132127761841
  test_average_precision_macro:
  - 0.4975334834290064
  - 0.5579868326110344
  - 0.5535031081623255
  - 0.5122591422803029
  - 0.5250341828795945
  test_average_precision_micro:
  - 0.6762512718193578
  - 0.70069197207477
  - 0.6904175183344303
  - 0.6953035510312168
  - 0.7239906074544289
  test_average_precision_samples:
  - 0.789914914914915
  - 0.7947197197197197
  - 0.7702536231884057
  - 0.7895585317460317
  - 0.7922562893081762
  test_average_precision_weighted:
  - 0.6165221821918527
  - 0.6744164680800415
  - 0.6595742223101362
  - 0.6364880926744607
  - 0.6625146298931455
  test_coverage_error:
  - -3.630630630630631
  - -3.684684684684685
  - -3.6869565217391305
  - -3.6964285714285716
  - -3.8207547169811322
  test_f1_macro:
  - 0.5011761409061313
  - 0.5004583585379838
  - 0.46406483895765055
  - 0.47150837707382065
  - 0.4342841888085856
  test_f1_micro:
  - 0.6801346801346803
  - 0.7036395147313692
  - 0.6495726495726495
  - 0.6790540540540541
  - 0.6666666666666666
  test_f1_samples:
  - 0.6625268125268128
  - 0.6773058773058774
  - 0.6187991718426501
  - 0.6422902494331068
  - 0.6318508535489669
  test_f1_weighted:
  - 0.6506137833354751
  - 0.6574998584878561
  - 0.6070374766887081
  - 0.629968343291678
  - 0.6040922430675568
  test_hamming_loss:
  - -0.2852852852852853
  - -0.25675675675675674
  - -0.2971014492753623
  - -0.28273809523809523
  - -0.28459119496855345
  test_jaccard_macro:
  - 0.3794095669787807
  - 0.38577577577577576
  - 0.3451047929893112
  - 0.3614714326729831
  - 0.33843048273790083
  test_jaccard_micro:
  - 0.5153061224489796
  - 0.5427807486631016
  - 0.4810126582278481
  - 0.5140664961636828
  - 0.5
  test_jaccard_samples:
  - 0.5531531531531533
  - 0.575975975975976
  - 0.5004347826086957
  - 0.5291666666666667
  - 0.5231132075471698
  test_jaccard_weighted:
  - 0.5107564206050472
  - 0.5257680597263931
  - 0.4688049188604779
  - 0.5008603627208278
  - 0.48711112024344133
  test_label_ranking_average_precision_score:
  - 0.7989239239239241
  - 0.7947197197197196
  - 0.7702536231884055
  - 0.7895585317460317
  - 0.8111242138364785
  test_label_ranking_loss:
  - 0.19549549549549547
  - 0.19862362362362357
  - 0.21427536231884056
  - 0.20625000000000002
  - 0.1997117400419287
  test_matthews_corrcoef_macro:
  - 0.13101020647408315
  - 0.1962926977360919
  - 0.1182353656332726
  - 0.1428579864003544
  - 0.08291079918487555
  test_matthews_corrcoef_micro:
  - 0.42489491315971606
  - 0.4771528791413226
  - 0.3919566822767969
  - 0.42768832348255453
  - 0.42144048924208594
  test_matthews_corrcoef_samples:
  - 0.44584809025535316
  - 0.4913959552829705
  - 0.41845362660565016
  - 0.4498435917545357
  - 0.42720868056569283
  test_matthews_corrcoef_weighted:
  - 0.13073173253945405
  - 0.20672961877398358
  - 0.10976652273074441
  - 0.15540614668622899
  - 0.09576469068099283
  test_ndgc:
  - 0.8617767581024958
  - 0.8653003128778028
  - 0.8482548287807512
  - 0.8621233769864668
  - 0.8622688556714978
  test_precision_macro:
  - 0.5191968800749943
  - 0.5928815413351497
  - 0.5425325913598225
  - 0.545251433906896
  - 0.4988381639325035
  test_precision_micro:
  - 0.6516129032258065
  - 0.7024221453287197
  - 0.6397306397306397
  - 0.6568627450980392
  - 0.7042801556420234
  test_precision_samples:
  - 0.668918918918919
  - 0.7027027027027029
  - 0.6492753623188406
  - 0.6651785714285714
  - 0.699685534591195
  test_precision_weighted:
  - 0.6345516296793157
  - 0.7005104868614319
  - 0.6392890756824539
  - 0.6522780440847668
  - 0.6395651122857878
  test_recall_macro:
  - 0.5274359945362622
  - 0.5110141214108382
  - 0.47867565630903525
  - 0.5058253841246898
  - 0.4386348679881018
  test_recall_micro:
  - 0.7112676056338029
  - 0.7048611111111112
  - 0.6597222222222222
  - 0.7027972027972028
  - 0.6328671328671329
  test_recall_samples:
  - 0.7057057057057057
  - 0.7034534534534534
  - 0.6608695652173913
  - 0.690922619047619
  - 0.604559748427673
  test_recall_weighted:
  - 0.7112676056338029
  - 0.7048611111111112
  - 0.6597222222222222
  - 0.7027972027972028
  - 0.6328671328671329
  test_roc_auc_macro:
  - 0.5574263830213028
  - 0.6098758226621204
  - 0.6287623433354231
  - 0.5779238275248443
  - 0.5265782575602821
  test_roc_auc_micro:
  - 0.7818744930314874
  - 0.8006962815990594
  - 0.7884017412935324
  - 0.7900014493278742
  - 0.7875624375624375
  test_roc_auc_samples:
  - .nan
  - 0.8013763763763764
  - 0.7857246376811593
  - 0.7937500000000001
  - .nan
  test_roc_auc_weighted:
  - 0.5583000842764292
  - 0.5997794182888703
  - 0.6251327991130567
  - 0.6075990828395191
  - 0.5787337148422584
start: 2023-10-21 18:18:02.260416
wrapper: null
