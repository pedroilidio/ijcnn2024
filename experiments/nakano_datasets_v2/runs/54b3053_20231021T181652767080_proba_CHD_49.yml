active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZ2b+AMzMzMzPjP4AzMzMzM+M/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJv8CZmZmZmek/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb/AmZmZmZnpPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZyT+gmZmZmZnJPzQzMzMzM/M/oJmZmZmZyT/MzMzMzMz8vw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ADMzMzMz478AMzMzMzPjvwCamZmZmdk/AJqZmZmZ2T8AmpmZmZnZPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8L8AAAAAAAAAAA==
      n_labels: 6
      n_samples: 555
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: CHD_49
  params:
    path: nakano_datasets_v2/datasets/MLC/CHD_49.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:17:58.793091
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - rf
          - call: deep_forest.estimator_adapters.EstimatorAsTransformer
            params:
              estimator:
                call: sklearn.ensemble._forest.RandomForestRegressor
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  criterion: squared_error
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: null
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: false
                  random_state: 0
                  verbose: true
                  warm_start: false
        - - xt
          - call: deep_forest.estimator_adapters.EstimatorAsTransformer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesRegressor
                params:
                  bootstrap: false
                  ccp_alpha: 0.0
                  criterion: squared_error
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: null
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: false
                  random_state: 0
                  verbose: true
                  warm_start: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: proba
  params:
    memory: estimators_cache
hash: 54b305342d2db9a6ad048bb8e69ce221441a84429bd59696d8c20538d8379279
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/54b3053_20231021T181652767080_proba_CHD_49.yml
results:
  fit_time:
  - 37.01101112365723
  - 37.19200658798218
  - 34.58193039894104
  - 34.5435836315155
  - 36.08133840560913
  score_time:
  - 28.56883978843689
  - 25.904208421707153
  - 30.484101057052612
  - 30.58680295944214
  - 27.855314016342163
  test_average_precision_macro:
  - 0.5332408926920658
  - 0.5390693738286084
  - 0.593512565582769
  - 0.5043368547773922
  - 0.5246760320926972
  test_average_precision_micro:
  - 0.6593052845787248
  - 0.6706844892440147
  - 0.673069274746791
  - 0.6253451335103204
  - 0.6594465885456667
  test_average_precision_samples:
  - 0.7883758758758759
  - 0.7652152152152152
  - 0.763989898989899
  - 0.7641245039682539
  - 0.7751626626626625
  test_average_precision_weighted:
  - 0.6459616438619363
  - 0.6647469069192966
  - 0.6633012881634078
  - 0.6179425384066027
  - 0.6399142487419972
  test_coverage_error:
  - -3.828828828828829
  - -3.81981981981982
  - -3.9272727272727272
  - -3.7589285714285716
  - -3.7567567567567566
  test_f1_macro:
  - 0.5008984451002473
  - 0.5261917294175359
  - 0.4880483164769891
  - 0.529675683808719
  - 0.5042768772115088
  test_f1_micro:
  - 0.6429840142095914
  - 0.6789915966386555
  - 0.6445993031358884
  - 0.674698795180723
  - 0.662020905923345
  test_f1_samples:
  - 0.6102531102531101
  - 0.6356284856284857
  - 0.60991341991342
  - 0.6421201814058958
  - 0.6313599313599313
  test_f1_weighted:
  - 0.6315633696596328
  - 0.6668249513028652
  - 0.6331532723555626
  - 0.6636572596627922
  - 0.6411761856436909
  test_hamming_loss:
  - -0.30180180180180183
  - -0.28678678678678676
  - -0.3090909090909091
  - -0.28125
  - -0.2912912912912913
  test_jaccard_macro:
  - 0.3683895302715599
  - 0.39742742323387487
  - 0.3618906259283515
  - 0.3985813094708288
  - 0.37873452883239905
  test_jaccard_micro:
  - 0.4738219895287958
  - 0.5139949109414759
  - 0.4755784061696658
  - 0.509090909090909
  - 0.4947916666666667
  test_jaccard_samples:
  - 0.5022522522522523
  - 0.5367867867867867
  - 0.5084848484848485
  - 0.5389880952380953
  - 0.5262762762762763
  test_jaccard_weighted:
  - 0.47711354695214414
  - 0.5192569734662574
  - 0.48492969594345736
  - 0.5131797875293267
  - 0.4981186395809434
  test_label_ranking_average_precision_score:
  - 0.7883758758758761
  - 0.7742242242242243
  - 0.7730808080808083
  - 0.7641245039682539
  - 0.7841716716716718
  test_label_ranking_loss:
  - 0.225025025025025
  - 0.24484484484484487
  - 0.2546969696969697
  - 0.23955853174603176
  - 0.23678678678678677
  test_matthews_corrcoef_macro:
  - 0.12647589486623165
  - 0.16268017389738557
  - 0.11473167029360304
  - 0.1891035116515111
  - 0.1494281065100047
  test_matthews_corrcoef_micro:
  - 0.38215243475219507
  - 0.42127192136835423
  - 0.3713477393214499
  - 0.42715188595890086
  - 0.4060842304616035
  test_matthews_corrcoef_samples:
  - 0.40473229096651364
  - 0.44182921110999396
  - 0.37483856761858514
  - 0.44478288465174504
  - 0.4271059153100387
  test_matthews_corrcoef_weighted:
  - 0.11132057644304304
  - 0.17038629829792576
  - 0.1326092312640543
  - 0.2030006325680257
  - 0.15813123953946828
  test_ndgc:
  - 0.8660348779914718
  - 0.8369852767459651
  - 0.8412441042756826
  - 0.8392492171601729
  - 0.8464879871188074
  test_precision_macro:
  - 0.5196468861417315
  - 0.5284194548191294
  - 0.48499472142153904
  - 0.529945688257242
  - 0.5159221486276281
  test_precision_micro:
  - 0.6581818181818182
  - 0.6558441558441559
  - 0.6357388316151202
  - 0.6666666666666666
  - 0.662020905923345
  test_precision_samples:
  - 0.6576576576576575
  - 0.6493993993993995
  - 0.6363636363636364
  - 0.6681547619047619
  - 0.6591591591591592
  test_precision_weighted:
  - 0.6422388516568069
  - 0.6479506894428497
  - 0.6184499727950026
  - 0.6517173658678177
  - 0.6351670381072319
  test_recall_macro:
  - 0.4894820460483935
  - 0.543069163335819
  - 0.49617853948265495
  - 0.5355922644682334
  - 0.506444338741786
  test_recall_micro:
  - 0.6284722222222222
  - 0.7038327526132404
  - 0.6537102473498233
  - 0.6829268292682927
  - 0.662020905923345
  test_recall_samples:
  - 0.6336336336336335
  - 0.6861861861861863
  - 0.6325757575757576
  - 0.687202380952381
  - 0.668918918918919
  test_recall_weighted:
  - 0.6284722222222222
  - 0.7038327526132404
  - 0.6537102473498233
  - 0.6829268292682927
  - 0.662020905923345
  test_roc_auc_macro:
  - 0.6005793142096051
  - 0.5991701982715457
  - 0.6245467347734125
  - 0.5353061412727012
  - 0.5283480861941311
  test_roc_auc_micro:
  - 0.7595164609053499
  - 0.7532659759315272
  - 0.7408028793431499
  - 0.7455540974704737
  - 0.7526592077077952
  test_roc_auc_samples:
  - 0.774974974974975
  - .nan
  - .nan
  - 0.7604414682539683
  - .nan
  test_roc_auc_weighted:
  - 0.5622537963072363
  - 0.6123052395989041
  - 0.6155221946047209
  - 0.5755210550256007
  - 0.5781408976832364
start: 2023-10-21 18:16:52.767080
wrapper: null
