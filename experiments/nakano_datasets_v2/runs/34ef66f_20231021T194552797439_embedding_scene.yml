active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            ADMzMzMz478AmpmZmZnZPwCamZmZmdk/ADMzMzMz478AmpmZmZnZPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyb8AmpmZmZnJv4CZmZmZmek/AJqZmZmZyb8AmpmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwCamZmZmdk/ADMzMzMz478AmpmZmZnZPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b+AMzMzMzPjPwCZmZmZmdm/gDMzMzMz4z8AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b8AmZmZmZnZv4AzMzMzM+M/gDMzMzMz4z8AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ6b8AmpmZmZnJPwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gMzMzMzMBMDAmZmZmZkZQABnZmZmZvY/ADIzMzMz479AZmZmZmYSwA==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 20:01:15.275555
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding
  params:
    memory: estimators_cache
hash: 34ef66f95a0859f243bcd69e96bb562521920961da80063e2797cb9fc454ad69
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/34ef66f_20231021T194552797439_embedding_scene.yml
results:
  fit_time:
  - 635.3115477561951
  - 640.1917581558228
  - 720.3828589916229
  - 650.4018490314484
  - 651.8672029972076
  score_time:
  - 164.98393893241882
  - 180.3238091468811
  - 169.2980251312256
  - 191.0186071395874
  - 104.86602091789246
  test_average_precision_macro:
  - 0.8389570474515821
  - 0.8207102627611146
  - 0.8458962249694447
  - 0.8401413858167999
  - 0.8140044466351277
  test_average_precision_micro:
  - 0.841665040715736
  - 0.822237625190941
  - 0.8568385802148155
  - 0.8503447465761012
  - 0.82272133095616
  test_average_precision_samples:
  - 0.8786329201101928
  - 0.8618947368421053
  - 0.8771180555555556
  - 0.8696749654218533
  - 0.8578532235939642
  test_average_precision_weighted:
  - 0.8263360256965155
  - 0.8074610495451704
  - 0.8351798731314402
  - 0.8301186807897265
  - 0.8029318380185029
  test_coverage_error:
  - -1.4297520661157024
  - -1.4884210526315789
  - -1.3979166666666667
  - -1.45850622406639
  - -1.4794238683127572
  test_f1_macro:
  - 0.632719053485504
  - 0.615831817045131
  - 0.6358040872032434
  - 0.6219827288781673
  - 0.6251228685587614
  test_f1_micro:
  - 0.6457286432160805
  - 0.6289308176100629
  - 0.6515723270440252
  - 0.6370558375634517
  - 0.6377171215880892
  test_f1_samples:
  - 0.5106749311294766
  - 0.5108771929824562
  - 0.5222222222222223
  - 0.508298755186722
  - 0.5150891632373114
  test_f1_weighted:
  - 0.6105995930739091
  - 0.5915359944632359
  - 0.616662473151382
  - 0.5984136098429034
  - 0.6021334273792405
  test_hamming_loss:
  - -0.09710743801652892
  - -0.10350877192982456
  - -0.09618055555555556
  - -0.09889349930843706
  - -0.10013717421124829
  test_jaccard_macro:
  - 0.4947888459273609
  - 0.48118570686432643
  - 0.5027726598869302
  - 0.49104131040198856
  - 0.48693040808327304
  test_jaccard_micro:
  - 0.47680890538033394
  - 0.45871559633027525
  - 0.4832089552238806
  - 0.46741154562383613
  - 0.4681238615664845
  test_jaccard_samples:
  - 0.502754820936639
  - 0.5031578947368421
  - 0.5145833333333333
  - 0.5031120331950207
  - 0.5092592592592593
  test_jaccard_weighted:
  - 0.4734659239160304
  - 0.45799585985498603
  - 0.4836950082680965
  - 0.4683793636020135
  - 0.46564027671452995
  test_label_ranking_average_precision_score:
  - 0.8786329201101927
  - 0.861894736842105
  - 0.8771180555555552
  - 0.8696749654218533
  - 0.8578532235939641
  test_label_ranking_loss:
  - 0.06921487603305786
  - 0.07673684210526316
  - 0.06276041666666667
  - 0.07546680497925311
  - 0.08096707818930042
  test_matthews_corrcoef_macro:
  - 0.6366528829320619
  - 0.6115743075757799
  - 0.6359218663784233
  - 0.622178196485473
  - 0.6172564307176374
  test_matthews_corrcoef_micro:
  - 0.6349011453418797
  - 0.6124620935072647
  - 0.6390128184890594
  - 0.6272533828841127
  - 0.6183169802194927
  test_matthews_corrcoef_samples:
  - 0.5002660739012544
  - 0.49652444345404956
  - 0.5123208785515435
  - 0.4989353381338281
  - 0.5004846013962051
  test_matthews_corrcoef_weighted:
  - 0.6178459003972
  - 0.5909880611013573
  - 0.6196794752771231
  - 0.6016464488089083
  - 0.5974799609504747
  test_ndgc:
  - 0.9106579271165742
  - 0.8988890692992587
  - 0.9097472966783494
  - 0.9037026887759768
  - 0.8951388462625327
  test_precision_macro:
  - 0.9338952133614518
  - 0.8956435065822883
  - 0.9158878202510278
  - 0.909034472229621
  - 0.8835829457974443
  test_precision_micro:
  - 0.927797833935018
  - 0.8992805755395683
  - 0.925
  - 0.9261992619926199
  - 0.889273356401384
  test_precision_samples:
  - 0.5268595041322314
  - 0.5263157894736842
  - 0.5364583333333334
  - 0.5186721991701245
  - 0.5267489711934157
  test_precision_weighted:
  - 0.9323080494139967
  - 0.893686937004838
  - 0.9148630305092111
  - 0.905134444829783
  - 0.8798998807905514
  test_recall_macro:
  - 0.5169974914205925
  - 0.5070400843911416
  - 0.5222311772689148
  - 0.5087107995175325
  - 0.5189304687075652
  test_recall_micro:
  - 0.4951830443159923
  - 0.4835589941972921
  - 0.5029126213592233
  - 0.48549323017408125
  - 0.49709864603481624
  test_recall_samples:
  - 0.502754820936639
  - 0.5031578947368421
  - 0.515625
  - 0.5031120331950207
  - 0.5092592592592593
  test_recall_weighted:
  - 0.4951830443159923
  - 0.4835589941972921
  - 0.5029126213592233
  - 0.48549323017408125
  - 0.49709864603481624
  test_roc_auc_macro:
  - 0.9416452368756992
  - 0.9369043095168076
  - 0.948873365752644
  - 0.9478865065204071
  - 0.9348295694534016
  test_roc_auc_micro:
  - 0.9488445365422136
  - 0.944310917033464
  - 0.9563858043063281
  - 0.9548602260002035
  - 0.9405401831678737
  test_roc_auc_samples:
  - 0.9307851239669421
  - 0.923263157894737
  - 0.9372395833333333
  - 0.9245331950207469
  - 0.9190329218106996
  test_roc_auc_weighted:
  - 0.9355909257885017
  - 0.930628907015909
  - 0.9436275911806352
  - 0.9433859798180741
  - 0.9293315759473191
start: 2023-10-21 19:45:52.797439
wrapper: null
