active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z9AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ6b8AmpmZmZnJPwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b+AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            0MzMzMzMDEDMzMzMzMwiwNDMzMzMzAxAgJmZmZmZ2b/QzMzMzMwEQA==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb/AmZmZmZnpPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          4MzMzMzMBEAgMzMzMzMLwJCZmZmZmRHAwJmZmZmZ+T/gzMzMzMwMQA==
      n_labels: 6
      n_samples: 593
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: emotions
  params:
    path: nakano_datasets_v2/datasets/MLC/emotions.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 23:20:57.589139
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler:
            call: deep_forest.weak_labels.PositiveUnlabeledImputer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesClassifier
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  class_weight: null
                  criterion: gini
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: 0.9
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: true
                  random_state: 0
                  verbose: true
                  warm_start: false
              sampling_strategy: auto
              threshold: 0.8
              use_oob_proba: true
              verbose: true
              weight_proba: true
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba_weak
  params:
    memory: estimators_cache
hash: 037c83d90aadc24c142c59426b1436c877283757a0ae8a7eaf067439c825f723
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/037c83d_20231127T232010917244_proba_weak_emotions.yml
results:
  fit_time:
  - 38.45090293884277
  - 36.43759894371033
  - 38.738293170928955
  - 36.686912298202515
  - 36.473084688186646
  score_time:
  - 7.33366322517395
  - 7.047806262969971
  - 7.433203220367432
  - 7.033646821975708
  - 7.088715314865112
  test_average_precision_macro:
  - 0.701501835245165
  - 0.7256806903203982
  - 0.7136217173119954
  - 0.7201080508698219
  - 0.7702576131141902
  test_average_precision_micro:
  - 0.7056172979373324
  - 0.7262255269037339
  - 0.7109156786091703
  - 0.7157404604930369
  - 0.7786643701356634
  test_average_precision_samples:
  - 0.7704022988505749
  - 0.8040983606557378
  - 0.797877145438121
  - 0.8167616334283001
  - 0.8369565217391303
  test_average_precision_weighted:
  - 0.7039381019925045
  - 0.7328534337542227
  - 0.7135142141100719
  - 0.7257122689190992
  - 0.7648438644723261
  test_coverage_error:
  - -2.9224137931034484
  - -2.8442622950819674
  - -2.6097560975609757
  - -2.658119658119658
  - -2.5652173913043477
  test_f1_macro:
  - 0.2583958231487301
  - 0.2518753652906971
  - 0.3211415780350312
  - 0.31562812321110506
  - 0.34147027338053776
  test_f1_micro:
  - 0.2625482625482626
  - 0.26811594202898553
  - 0.3345454545454546
  - 0.3453237410071942
  - 0.3358208955223881
  test_f1_samples:
  - 0.17528735632183906
  - 0.19207650273224045
  - 0.24498644986449863
  - 0.2774928774928775
  - 0.23652173913043478
  test_f1_weighted:
  - 0.25374516024452015
  - 0.25863647764292835
  - 0.3294335623560341
  - 0.3310953627739329
  - 0.31701624733456885
  test_hamming_loss:
  - -0.2744252873563218
  - -0.27595628415300544
  - -0.24796747967479674
  - -0.25925925925925924
  - -0.2579710144927536
  test_jaccard_macro:
  - 0.1552506421093469
  - 0.14920171252081574
  - 0.19476871829813006
  - 0.197869097133803
  - 0.21907760010622124
  test_jaccard_micro:
  - 0.1511111111111111
  - 0.15481171548117154
  - 0.20087336244541484
  - 0.20869565217391303
  - 0.20179372197309417
  test_jaccard_samples:
  - 0.139367816091954
  - 0.1557377049180328
  - 0.2059620596205962
  - 0.23789173789173787
  - 0.20072463768115942
  test_jaccard_weighted:
  - 0.15147689696246422
  - 0.1547165414939086
  - 0.20098053106687752
  - 0.2091746635864283
  - 0.20093045258589798
  test_label_ranking_average_precision_score:
  - 0.7704022988505745
  - 0.8040983606557379
  - 0.797877145438121
  - 0.8167616334282999
  - 0.8369565217391305
  test_label_ranking_loss:
  - 0.19195402298850575
  - 0.16425318761384336
  - 0.1556910569105691
  - 0.14195156695156694
  - 0.11942028985507247
  test_matthews_corrcoef_macro:
  - 0.2574173375336978
  - 0.27082252260727685
  - 0.31299874567167163
  - 0.3081499037505698
  - 0.35704877741546787
  test_matthews_corrcoef_micro:
  - 0.27837486708243175
  - 0.2847868715120293
  - 0.32444547736106627
  - 0.34248186924466967
  - 0.3511565836584809
  test_matthews_corrcoef_samples:
  - 0.14968972131842884
  - 0.17008777772537614
  - 0.2126242874453296
  - 0.2526355569638942
  - 0.21465976102252676
  test_matthews_corrcoef_weighted:
  - 0.24380980566517108
  - 0.272495995015292
  - 0.3112036772349284
  - 0.3156041416777997
  - 0.33215897293813146
  test_ndgc:
  - 0.8422228001377392
  - 0.869550799594782
  - 0.8577045902763132
  - 0.8754765066088362
  - 0.8888969556119792
  test_precision_macro:
  - 0.6994047619047619
  - 0.8681547619047619
  - 0.8084064327485381
  - 0.808982683982684
  - 0.9033670033670034
  test_precision_micro:
  - 0.8292682926829268
  - 0.8409090909090909
  - 0.8070175438596491
  - 0.8571428571428571
  - 0.9
  test_precision_samples:
  - 0.24568965517241378
  - 0.26639344262295084
  - 0.3333333333333333
  - 0.3547008547008547
  - 0.30434782608695654
  test_precision_weighted:
  - 0.689629750982962
  - 0.8719288793103448
  - 0.8030882826331885
  - 0.8145450645450646
  - 0.8915577796311741
  test_recall_macro:
  - 0.1590336916561962
  - 0.15382545677688977
  - 0.20377059790305005
  - 0.20409436381455773
  - 0.22511660716343684
  test_recall_micro:
  - 0.1559633027522936
  - 0.15948275862068967
  - 0.21100917431192662
  - 0.21621621621621623
  - 0.20642201834862386
  test_recall_samples:
  - 0.14367816091954022
  - 0.1598360655737705
  - 0.2059620596205962
  - 0.24501424501424499
  - 0.20579710144927535
  test_recall_weighted:
  - 0.1559633027522936
  - 0.15948275862068967
  - 0.21100917431192662
  - 0.21621621621621623
  - 0.20642201834862386
  test_roc_auc_macro:
  - 0.81982103450804
  - 0.8391945226273508
  - 0.8453314146796037
  - 0.8507170831200824
  - 0.8699287847899947
  test_roc_auc_micro:
  - 0.8421365782503552
  - 0.8554482758620691
  - 0.8684633027522937
  - 0.8603791291291292
  - 0.8862152075882445
  test_roc_auc_samples:
  - 0.8080459770114943
  - 0.8357468123861567
  - 0.8443089430894308
  - 0.8580484330484331
  - 0.8805797101449275
  test_roc_auc_weighted:
  - 0.8211310116517219
  - 0.8397926093572631
  - 0.8445277882000122
  - 0.8494771965058063
  - 0.8651175697754002
start: 2023-11-27 23:20:10.917244
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
