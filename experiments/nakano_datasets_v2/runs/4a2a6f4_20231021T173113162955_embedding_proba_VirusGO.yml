active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            NDMzMzMz4z+YmZmZmZnZv5iZmZmZmdm/mJmZmZmZ2b80MzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            kJmZmZmZ2b+QmZmZmZnZvzgzMzMzM+M/ODMzMzMz4z+QmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ2T8gMzMzMzPjv8CZmZmZmdk/IDMzMzMz47/AmZmZmZnZPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+gmZmZmZnpP4CZmZmZmcm/gJmZmZmZyb+AmZmZmZnJvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          wMzMzMzMBMDAzMzMzMwEwKCZmZmZmRFAADMzMzMz47+AZmZmZmb2Pw==
      n_labels: 6
      n_samples: 207
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: VirusGO
  params:
    path: nakano_datasets_v2/datasets/MLC/VirusGO.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:33:01.355080
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.ExtraTreesRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.8
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        - - rf
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.RandomForestRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.95
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 4a2a6f4a6dd8f6f7cd7c6012b2ac7544a5444788f862f7fdc8d7e95ee8d3cd4a
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/4a2a6f4_20231021T173113162955_embedding_proba_VirusGO.yml
results:
  fit_time:
  - 50.33405661582947
  - 52.17984628677368
  - 50.16303539276123
  - 54.08290696144104
  - 51.22620630264282
  score_time:
  - 55.954315423965454
  - 40.067002058029175
  - 54.208091020584106
  - 50.21517992019653
  - 56.41755151748657
  test_average_precision_macro:
  - 0.9917790981201562
  - 0.9320895796590242
  - 0.8845513171889327
  - 0.982648411888431
  - 0.9477854760767385
  test_average_precision_micro:
  - 0.9661017263914535
  - 0.9296169270413241
  - 0.8921284841752827
  - 0.946160632382243
  - 0.929540938282921
  test_average_precision_samples:
  - 0.9886363636363636
  - 0.9299242424242423
  - 0.9177177177177177
  - 0.9444444444444444
  - 0.93625
  test_average_precision_weighted:
  - 0.9832293601651187
  - 0.953505291005291
  - 0.9185084965892321
  - 0.9774329661212743
  - 0.9465917816273854
  test_coverage_error:
  - -1.1590909090909092
  - -1.3636363636363635
  - -1.7027027027027026
  - -1.3571428571428572
  - -1.5
  test_f1_macro:
  - 0.7973977411477411
  - 0.6384259259259258
  - 0.5453405017921147
  - 0.618314603713585
  - 0.5959595959595959
  test_f1_micro:
  - 0.8602150537634408
  - 0.8421052631578948
  - 0.7640449438202247
  - 0.8260869565217392
  - 0.7999999999999999
  test_f1_samples:
  - 0.8106060606060606
  - 0.7613636363636364
  - 0.7432432432432432
  - 0.7579365079365079
  - 0.775
  test_f1_weighted:
  - 0.844742673992674
  - 0.8086056644880174
  - 0.7284946236559141
  - 0.7909660298754477
  - 0.7784242424242425
  test_hamming_loss:
  - -0.04924242424242424
  - -0.056818181818181816
  - -0.0945945945945946
  - -0.06349206349206349
  - -0.075
  test_jaccard_macro:
  - 0.7065826330532213
  - 0.5546296296296296
  - 0.4338624338624339
  - 0.5203703703703704
  - 0.4861111111111111
  test_jaccard_micro:
  - 0.7547169811320755
  - 0.7272727272727273
  - 0.6181818181818182
  - 0.7037037037037037
  - 0.6666666666666666
  test_jaccard_samples:
  - 0.7954545454545454
  - 0.7462121212121211
  - 0.7252252252252251
  - 0.746031746031746
  - 0.7625
  test_jaccard_weighted:
  - 0.755
  - 0.7215686274509804
  - 0.6084126984126983
  - 0.6956427015250544
  - 0.6633333333333334
  test_label_ranking_average_precision_score:
  - 0.9886363636363636
  - 0.9299242424242425
  - 0.9177177177177177
  - 0.9444444444444444
  - 0.93625
  test_label_ranking_loss:
  - 0.004545454545454546
  - 0.03920454545454545
  - 0.06411411411411412
  - 0.026785714285714284
  - 0.046875
  test_matthews_corrcoef_macro:
  - 0.7926703994528214
  - 0.6369011991717924
  - 0.527260001592207
  - 0.6130775629915645
  - 0.5784820126290331
  test_matthews_corrcoef_micro:
  - 0.8340147709044144
  - 0.810964628594746
  - 0.7145388063213721
  - 0.7948323447868619
  - 0.761660236450265
  test_matthews_corrcoef_samples:
  - 0.8029505029121524
  - 0.7488037862750233
  - 0.714279795286058
  - 0.7455267776087455
  - 0.7545284707521047
  test_matthews_corrcoef_weighted:
  - 0.8095360275993799
  - 0.7787618593520236
  - 0.6525784904687799
  - 0.7568322452967066
  - 0.7249301835354744
  test_ndgc:
  - 0.9916120398538968
  - 0.9487087865439989
  - 0.942900002557862
  - 0.9598216678538705
  - 0.9550392868131695
  test_precision_macro:
  - 0.9722222222222222
  - 0.7999999999999999
  - 0.7863408521303259
  - 0.8047619047619047
  - 0.7684294871794872
  test_precision_micro:
  - 0.9302325581395349
  - 0.9090909090909091
  - 0.8717948717948718
  - 0.926829268292683
  - 0.9
  test_precision_samples:
  - 0.8181818181818182
  - 0.7613636363636364
  - 0.7702702702702703
  - 0.7738095238095238
  - 0.7875
  test_precision_weighted:
  - 0.9433333333333335
  - 0.8980392156862744
  - 0.8641353383458646
  - 0.9016806722689076
  - 0.8975961538461539
  test_recall_macro:
  - 0.728641456582633
  - 0.5879629629629629
  - 0.468954248366013
  - 0.5441176470588235
  - 0.532563025210084
  test_recall_micro:
  - 0.8
  - 0.7843137254901961
  - 0.68
  - 0.7450980392156863
  - 0.72
  test_recall_samples:
  - 0.8181818181818182
  - 0.7727272727272727
  - 0.7387387387387387
  - 0.757936507936508
  - 0.775
  test_recall_weighted:
  - 0.8
  - 0.7843137254901961
  - 0.68
  - 0.7450980392156863
  - 0.72
  test_roc_auc_macro:
  - 0.9945533769063181
  - 0.970529990842491
  - 0.9552340290955091
  - 0.9926925429041011
  - 0.9791490212685865
  test_roc_auc_micro:
  - 0.9936448598130841
  - 0.9755132099788272
  - 0.9546511627906976
  - 0.9882938249926836
  - 0.9787368421052631
  test_roc_auc_samples:
  - 0.9954545454545454
  - 0.9607954545454543
  - 0.935885885885886
  - 0.9732142857142857
  - 0.953125
  test_roc_auc_weighted:
  - 0.9888888888888888
  - 0.9761258349493644
  - 0.9543763440860217
  - 0.9866081871345029
  - 0.9663438735177864
start: 2023-10-21 17:31:13.162955
wrapper: null
