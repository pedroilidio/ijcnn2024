active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/wJmZmZmZ6T8AmZmZmZnJvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz4z+YmZmZmZnZv5iZmZmZmdm/mJmZmZmZ2b80MzMzMzPjPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP0AzMzMzM+M/gJmZmZmZ2b+AmZmZmZnZvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJqZmZmZ6T8AmJmZmZnJvwCYmZmZmcm/AJqZmZmZ6T8AMzMzMzPzvw==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: GrampositivePseAAC
  params:
    path: nakano_datasets_v2/datasets/MLC/GrampositivePseAAC.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:16:35.393651
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_pvalue
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_chi2
  params:
    memory: estimators_cache
hash: fe2a19387314bc8e321360e5afa59f47e865f976b98f157c32e74d0c4a7a7bc5
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/fe2a193_20231021T181419927150_embedding_chi2_GrampositivePseAAC.yml
results:
  fit_time:
  - 61.40403342247009
  - 58.75938820838928
  - 57.74812602996826
  - 66.26007890701294
  - 66.6955623626709
  score_time:
  - 67.99367117881775
  - 74.72534155845642
  - 74.49115347862244
  - 63.03831672668457
  - 61.151883602142334
  test_average_precision_macro:
  - 0.3879942241989581
  - 0.39574784334040786
  - 0.35406132577934674
  - 0.4396653847430367
  - 0.3989690330219438
  test_average_precision_micro:
  - 0.4640871478398342
  - 0.4890428174645468
  - 0.45479124674880095
  - 0.4782303517652119
  - 0.491117264346978
  test_average_precision_samples:
  - 0.6998381877022651
  - 0.7003205128205128
  - 0.6634615384615384
  - 0.6974110032362459
  - 0.6896825396825397
  test_average_precision_weighted:
  - 0.4916450710746447
  - 0.4904707806694375
  - 0.4526620533966885
  - 0.4968117024605054
  - 0.502283029152509
  test_coverage_error:
  - -1.796116504854369
  - -1.7884615384615385
  - -1.875
  - -1.8155339805825244
  - -1.8095238095238095
  test_f1_macro:
  - 0.2514141414141414
  - 0.20496453900709222
  - 0.23304920573421156
  - 0.21236559139784944
  - 0.24210164835164832
  test_f1_micro:
  - 0.44067796610169496
  - 0.3832335329341317
  - 0.38636363636363635
  - 0.3764705882352941
  - 0.4311377245508982
  test_f1_samples:
  - 0.3786407766990291
  - 0.3076923076923077
  - 0.3237179487179487
  - 0.3106796116504854
  - 0.34285714285714286
  test_f1_weighted:
  - 0.37107614607614614
  - 0.31016548463356974
  - 0.3406948211287614
  - 0.31244830438378823
  - 0.36236263736263735
  test_hamming_loss:
  - -0.24029126213592233
  - -0.24759615384615385
  - -0.25961538461538464
  - -0.25728155339805825
  - -0.2261904761904762
  test_jaccard_macro:
  - 0.16910436980859517
  - 0.1340497737556561
  - 0.15200922266139658
  - 0.13695652173913042
  - 0.1631610576923077
  test_jaccard_micro:
  - 0.2826086956521739
  - 0.23703703703703705
  - 0.23943661971830985
  - 0.2318840579710145
  - 0.2748091603053435
  test_jaccard_samples:
  - 0.3786407766990291
  - 0.3076923076923077
  - 0.32211538461538464
  - 0.3106796116504854
  - 0.34285714285714286
  test_jaccard_weighted:
  - 0.2503923938105953
  - 0.2042232277526395
  - 0.2220026350461133
  - 0.2025083612040134
  - 0.2456730769230769
  test_label_ranking_average_precision_score:
  - 0.6998381877022656
  - 0.7003205128205127
  - 0.6634615384615389
  - 0.6974110032362463
  - 0.6896825396825397
  test_label_ranking_loss:
  - 0.2605177993527508
  - 0.25881410256410253
  - 0.28846153846153844
  - 0.26779935275080907
  - 0.2698412698412698
  test_matthews_corrcoef_macro:
  - 0.1348681372562432
  - 0.09445540804928526
  - 0.07326938827709457
  - 0.083623171254285
  - 0.14365266049825998
  test_matthews_corrcoef_micro:
  - 0.30104931334727064
  - 0.2540763885916691
  - 0.23650897722882602
  - 0.23367649679945465
  - 0.3177721753133461
  test_matthews_corrcoef_samples:
  - 0.26860841423948223
  - 0.21153846153846156
  - 0.20426939361400281
  - 0.2006472491909385
  - 0.2603174603174603
  test_matthews_corrcoef_weighted:
  - 0.19288666649690717
  - 0.13900490742687405
  - 0.10602189954410349
  - 0.11816729739804994
  - 0.21076083766132692
  test_ndgc:
  - 0.7770439930588067
  - 0.7772324916896962
  - 0.7493863207775582
  - 0.7748394186547823
  - 0.7687611645844183
  test_precision_macro:
  - 0.3040229885057471
  - 0.275
  - 0.2585568917668825
  - 0.2582417582417582
  - 0.3108320251177394
  test_precision_micro:
  - 0.5342465753424658
  - 0.5161290322580645
  - 0.4788732394366197
  - 0.48484848484848486
  - 0.5806451612903226
  test_precision_samples:
  - 0.3786407766990291
  - 0.3076923076923077
  - 0.3269230769230769
  - 0.3106796116504854
  - 0.34285714285714286
  test_precision_weighted:
  - 0.4371131741821397
  - 0.4
  - 0.37311131668208447
  - 0.3687658495350803
  - 0.4511773940345368
  test_recall_macro:
  - 0.24930313588850175
  - 0.19761904761904764
  - 0.21904761904761905
  - 0.20516499282639883
  - 0.225
  test_recall_micro:
  - 0.375
  - 0.3047619047619048
  - 0.3238095238095238
  - 0.3076923076923077
  - 0.34285714285714286
  test_recall_samples:
  - 0.3786407766990291
  - 0.3076923076923077
  - 0.32211538461538464
  - 0.3106796116504854
  - 0.34285714285714286
  test_recall_weighted:
  - 0.375
  - 0.3047619047619048
  - 0.3238095238095238
  - 0.3076923076923077
  - 0.34285714285714286
  test_roc_auc_macro:
  - 0.667952368322503
  - 0.6712843900270486
  - 0.6268595033560409
  - 0.633912452454003
  - 0.6871955004223912
  test_roc_auc_micro:
  - 0.7596466033966034
  - 0.7563925891900168
  - 0.7395192160465472
  - 0.7505307192807193
  - 0.7601814058956916
  test_roc_auc_samples:
  - 0.7394822006472491
  - 0.7411858974358974
  - 0.7115384615384616
  - 0.732200647249191
  - 0.7301587301587302
  test_roc_auc_weighted:
  - 0.6580300133987552
  - 0.6613221910550102
  - 0.6189091253144549
  - 0.6471008373317145
  - 0.6589498021430794
start: 2023-10-21 18:14:19.927150
wrapper: null
