active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ6b8AmpmZmZnJPwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJv8CZmZmZmek/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ+T+gmZmZmZn5P0AzMzMzM+M/mJmZmZmZEcBAMzMzMzPjPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          IDMzMzMzA8CAMzMzMzPjP4AzMzMzM+M/4MzMzMzMBEBAZmZmZmb2vw==
      n_labels: 6
      n_samples: 593
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: emotions
  params:
    path: nakano_datasets_v2/datasets/MLC/emotions.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 23:27:15.791208
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba
  params:
    memory: estimators_cache
hash: 2a698c40a74872b0edd3a75968193984d4740efaa4ed78b44ac1bebeca5cfb8b
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/2a698c4_20231127T232613863737_proba_emotions.yml
results:
  fit_time:
  - 30.772182941436768
  - 31.964912176132202
  - 32.43841361999512
  - 30.43302822113037
  - 29.562769889831543
  score_time:
  - 26.70490312576294
  - 17.732999086380005
  - 28.998780965805054
  - 26.45802068710327
  - 28.8649263381958
  test_average_precision_macro:
  - 0.594243736820603
  - 0.6791677096132608
  - 0.6173721952849619
  - 0.6757085210628313
  - 0.6826576911420309
  test_average_precision_micro:
  - 0.5531181529099084
  - 0.6314837973477744
  - 0.6161432733216083
  - 0.6588199099902926
  - 0.6662435526026225
  test_average_precision_samples:
  - 0.7296831955922866
  - 0.7438323917137476
  - 0.7171139359698682
  - 0.7471264367816093
  - 0.7778703703703703
  test_average_precision_weighted:
  - 0.589919249629436
  - 0.6808384518182454
  - 0.6272457685622881
  - 0.6830405441904877
  - 0.6937332817025919
  test_coverage_error:
  - -2.9338842975206614
  - -2.940677966101695
  - -3.0847457627118646
  - -3.1120689655172415
  - -2.7916666666666665
  test_f1_macro:
  - 0.2063604588194752
  - 0.19367839585757263
  - 0.20593216608396878
  - 0.21020844896857005
  - 0.2380169205750601
  test_f1_micro:
  - 0.2047244094488189
  - 0.20634920634920634
  - 0.2151394422310757
  - 0.21176470588235294
  - 0.2595419847328244
  test_f1_samples:
  - 0.13360881542699724
  - 0.15112994350282485
  - 0.13559322033898302
  - 0.15086206896551724
  - 0.19277777777777777
  test_f1_weighted:
  - 0.19962987204790486
  - 0.19206449914326287
  - 0.21154446439076424
  - 0.20616900938809005
  - 0.24838611171106456
  test_hamming_loss:
  - -0.27823691460055094
  - -0.2824858757062147
  - -0.2782485875706215
  - -0.28879310344827586
  - -0.26944444444444443
  test_jaccard_macro:
  - 0.11867793973057132
  - 0.1142526678162643
  - 0.11707272208031598
  - 0.12087664130651925
  - 0.14100895153526732
  test_jaccard_micro:
  - 0.11403508771929824
  - 0.11504424778761062
  - 0.12053571428571429
  - 0.11842105263157894
  - 0.14912280701754385
  test_jaccard_samples:
  - 0.1115702479338843
  - 0.12429378531073446
  - 0.10805084745762712
  - 0.11637931034482758
  - 0.15833333333333333
  test_jaccard_weighted:
  - 0.11408072896111174
  - 0.11258717819803793
  - 0.12052937813204184
  - 0.11813576788740186
  - 0.14758286024288872
  test_label_ranking_average_precision_score:
  - 0.7296831955922866
  - 0.7438323917137476
  - 0.717113935969868
  - 0.7471264367816097
  - 0.7778703703703702
  test_label_ranking_loss:
  - 0.20982552800734622
  - 0.20270715630885122
  - 0.23253295668549906
  - 0.22016283524904215
  - 0.1768287037037037
  test_matthews_corrcoef_macro:
  - 0.21634356182612421
  - 0.2223382931454555
  - 0.2487203584942261
  - 0.2591565411017907
  - 0.2551955101918642
  test_matthews_corrcoef_micro:
  - 0.22267596136691184
  - 0.24316961913254492
  - 0.2590403521572909
  - 0.2616972556342017
  - 0.2844781976268305
  test_matthews_corrcoef_samples:
  - 0.11417255706518303
  - 0.1353747259318171
  - 0.11931564379543486
  - 0.13303522596957867
  - 0.17066800616493788
  test_matthews_corrcoef_weighted:
  - 0.20591445152984805
  - 0.21849543240648345
  - 0.2500843217847091
  - 0.25156739874152817
  - 0.2549170135189292
  test_ndgc:
  - 0.8096359120365773
  - 0.8195548160108385
  - 0.8020178660059851
  - 0.8257773983658615
  - 0.8484185029755645
  test_precision_macro:
  - 0.7359126984126984
  - 0.7579365079365079
  - 0.8888888888888888
  - 0.9083333333333333
  - 0.7524509803921569
  test_precision_micro:
  - 0.7647058823529411
  - 0.8387096774193549
  - 0.8709677419354839
  - 0.9
  - 0.85
  test_precision_samples:
  - 0.17768595041322313
  - 0.211864406779661
  - 0.1906779661016949
  - 0.23275862068965517
  - 0.26666666666666666
  test_precision_weighted:
  - 0.731547619047619
  - 0.7654600301659126
  - 0.8895454545454545
  - 0.9011111111111111
  - 0.7557631160572337
  test_recall_macro:
  - 0.12290766134567561
  - 0.11942784437508867
  - 0.1191767039290259
  - 0.12281571564662946
  - 0.1454221603178902
  test_recall_micro:
  - 0.11818181818181818
  - 0.11764705882352941
  - 0.12272727272727273
  - 0.12
  - 0.15315315315315314
  test_recall_samples:
  - 0.11570247933884298
  - 0.12429378531073446
  - 0.10875706214689264
  - 0.11637931034482758
  - 0.15833333333333333
  test_recall_weighted:
  - 0.11818181818181818
  - 0.11764705882352941
  - 0.12272727272727273
  - 0.12
  - 0.15315315315315314
  test_roc_auc_macro:
  - 0.7561910081618644
  - 0.7968144147776348
  - 0.7610058704195701
  - 0.7789897395057124
  - 0.8247016184874584
  test_roc_auc_micro:
  - 0.7544286740927058
  - 0.8017226160721751
  - 0.765024217585693
  - 0.7801934418494928
  - 0.8205253446217301
  test_roc_auc_samples:
  - 0.7901744719926538
  - 0.7972928436911487
  - 0.7674670433145009
  - 0.7798371647509579
  - 0.8231712962962964
  test_roc_auc_weighted:
  - 0.7453660099718484
  - 0.7966509474404907
  - 0.7626707728545963
  - 0.7797617078816562
  - 0.8293213098409401
start: 2023-11-27 23:26:13.863737
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
