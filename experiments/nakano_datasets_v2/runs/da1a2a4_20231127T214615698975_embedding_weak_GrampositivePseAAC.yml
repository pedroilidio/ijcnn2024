active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb/AmZmZmZnpPwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ2b+YmZmZmZnZv5iZmZmZmdm/NDMzMzMz4z80MzMzMzPjPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b+AmZmZmZnZvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJiZmZmZyb8AmJmZmZnJvwCYmZmZmcm/AJiZmZmZyb8AmpmZmZnpPw==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: GrampositivePseAAC
  params:
    path: nakano_datasets_v2/datasets/MLC/GrampositivePseAAC.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 21:48:36.005481
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_tree_embedder
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler:
      call: deep_forest.weak_labels.PositiveUnlabeledImputer
      params:
        estimator:
          call: sklearn.ensemble._forest.ExtraTreesClassifier
          params:
            bootstrap: true
            ccp_alpha: 0.0
            class_weight: null
            criterion: gini
            max_depth: null
            max_features: sqrt
            max_leaf_nodes: null
            max_samples: 0.9
            min_impurity_decrease: 0.0
            min_samples_leaf: 5
            min_samples_split: 2
            min_weight_fraction_leaf: 0.0
            n_estimators: 150
            n_jobs: 14
            oob_score: true
            random_state: 0
            verbose: true
            warm_start: false
        sampling_strategy: auto
        threshold: 0.8
        use_oob_proba: true
        verbose: true
        weight_proba: true
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_weak
  params:
    memory: estimators_cache
hash: da1a2a4faa44d64a74933d43e36664ac6f3db39ff4440f71672925e8b60266d3
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/da1a2a4_20231127T214615698975_embedding_weak_GrampositivePseAAC.yml
results:
  fit_time:
  - 69.58840584754944
  - 74.49120330810547
  - 71.20743489265442
  - 74.24115681648254
  - 69.92656350135803
  score_time:
  - 60.69788146018982
  - 63.133835554122925
  - 45.78194499015808
  - 63.483765840530396
  - 61.88780903816223
  test_average_precision_macro:
  - 0.4174331222497116
  - 0.34938902234264724
  - 0.3521423349370273
  - 0.4149163338797145
  - 0.38494344024955157
  test_average_precision_micro:
  - 0.48949566586538573
  - 0.41995768554245044
  - 0.4506588938464076
  - 0.4879092599413314
  - 0.4374300083092458
  test_average_precision_samples:
  - 0.717948717948718
  - 0.703525641025641
  - 0.6987179487179487
  - 0.71875
  - 0.675566343042071
  test_average_precision_weighted:
  - 0.5047805697000936
  - 0.43431633445707973
  - 0.44349039008298663
  - 0.517650523132576
  - 0.4796596184490537
  test_coverage_error:
  - -1.7596153846153846
  - -1.7788461538461537
  - -1.8173076923076923
  - -1.7115384615384615
  - -1.8640776699029127
  test_f1_macro:
  - 0.2611111111111111
  - 0.2143857543017207
  - 0.22115384615384615
  - 0.2422517394054396
  - 0.23956521739130437
  test_f1_micro:
  - 0.4615384615384615
  - 0.37777777777777777
  - 0.38095238095238093
  - 0.41860465116279066
  - 0.4
  test_f1_samples:
  - 0.4006410256410256
  - 0.3269230769230769
  - 0.30448717948717946
  - 0.342948717948718
  - 0.3268608414239482
  test_f1_weighted:
  - 0.3881481481481482
  - 0.3133445685966694
  - 0.3282051282051282
  - 0.35884461311406285
  - 0.35008361204013383
  test_hamming_loss:
  - -0.23557692307692307
  - -0.2692307692307692
  - -0.25
  - -0.2403846153846154
  - -0.24757281553398058
  test_jaccard_macro:
  - 0.17857142857142855
  - 0.13741883116883116
  - 0.14285714285714285
  - 0.16066176470588237
  - 0.1575187969924812
  test_jaccard_micro:
  - 0.3
  - 0.2328767123287671
  - 0.23529411764705882
  - 0.2647058823529412
  - 0.25
  test_jaccard_samples:
  - 0.39903846153846156
  - 0.3269230769230769
  - 0.30288461538461536
  - 0.34134615384615385
  - 0.32524271844660196
  test_jaccard_weighted:
  - 0.26666666666666666
  - 0.20155469530469533
  - 0.2126984126984127
  - 0.23872549019607844
  - 0.2301764025448236
  test_label_ranking_average_precision_score:
  - 0.7179487179487178
  - 0.7035256410256413
  - 0.6987179487179488
  - 0.71875
  - 0.6755663430420713
  test_label_ranking_loss:
  - 0.25
  - 0.25961538461538464
  - 0.2676282051282052
  - 0.23317307692307693
  - 0.28398058252427183
  test_matthews_corrcoef_macro:
  - 0.13867704976652767
  - 0.06925614472026673
  - 0.0926307951954569
  - 0.12233395717211543
  - 0.11713472164057799
  test_matthews_corrcoef_micro:
  - 0.32151908861836465
  - 0.21549855796030778
  - 0.24851226490205222
  - 0.2873758290289087
  - 0.2641431792935608
  test_matthews_corrcoef_samples:
  - 0.28760272694733613
  - 0.19230769230769232
  - 0.20426939361400281
  - 0.24273093207554128
  - 0.22243382138371812
  test_matthews_corrcoef_weighted:
  - 0.20220294561987306
  - 0.09312571935031974
  - 0.13251193114486312
  - 0.17462076047080355
  - 0.16156984999755875
  test_ndgc:
  - 0.7896815367803026
  - 0.779035279671787
  - 0.776003349384496
  - 0.7912912676766287
  - 0.7586373113641948
  test_precision_macro:
  - 0.2872050816696915
  - 0.2524590163934426
  - 0.2666240409207161
  - 0.29442401960784315
  - 0.307843137254902
  test_precision_micro:
  - 0.5454545454545454
  - 0.4473684210526316
  - 0.5079365079365079
  - 0.5373134328358209
  - 0.5151515151515151
  test_precision_samples:
  - 0.40384615384615385
  - 0.3269230769230769
  - 0.3076923076923077
  - 0.34615384615384615
  - 0.3300970873786408
  test_precision_weighted:
  - 0.4174228675136116
  - 0.3577238335435057
  - 0.38738277919863595
  - 0.4252450980392157
  - 0.43929110105580693
  test_recall_macro:
  - 0.2642857142857143
  - 0.2186154949784792
  - 0.20238095238095238
  - 0.22738095238095238
  - 0.21986062717770036
  test_recall_micro:
  - 0.4
  - 0.3269230769230769
  - 0.3047619047619048
  - 0.34285714285714286
  - 0.3269230769230769
  test_recall_samples:
  - 0.39903846153846156
  - 0.3269230769230769
  - 0.30288461538461536
  - 0.34134615384615385
  - 0.32524271844660196
  test_recall_weighted:
  - 0.4
  - 0.3269230769230769
  - 0.3047619047619048
  - 0.34285714285714286
  - 0.3269230769230769
  test_roc_auc_macro:
  - 0.6302973946854338
  - 0.6279612851109364
  - 0.6430977269501771
  - 0.7184526868252565
  - 0.6011947101663397
  test_roc_auc_micro:
  - 0.7675088041647528
  - 0.7313239644970414
  - 0.7375593324146379
  - 0.7762976573265963
  - 0.739572927072927
  test_roc_auc_samples:
  - 0.75
  - 0.7403846153846154
  - 0.7323717948717949
  - 0.7668269230769231
  - 0.7160194174757283
  test_roc_auc_weighted:
  - 0.6735161179011109
  - 0.6005480981746804
  - 0.6138896792003383
  - 0.6839740009548485
  - 0.6123532780166848
start: 2023-11-27 21:46:15.698975
wrapper: null
