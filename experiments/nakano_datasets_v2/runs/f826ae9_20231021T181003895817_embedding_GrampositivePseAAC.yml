active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz4z+YmZmZmZnZv5iZmZmZmdm/NDMzMzMz4z+YmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP0AzMzMzM+M/gJmZmZmZ2b+AmZmZmZnZvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b+AmZmZmZnZvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AM3MzMzM/D8AmpmZmZnpPwCYmZmZmcm/AJiZmZmZyb+AmZmZmZkBwA==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: GrampositivePseAAC
  params:
    path: nakano_datasets_v2/datasets/MLC/GrampositivePseAAC.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:12:02.057880
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding
  params:
    memory: estimators_cache
hash: f826ae92dabfc62c3246a348f12a38edfdda0b2ef61141e539bae39c53146776
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/f826ae9_20231021T181003895817_embedding_GrampositivePseAAC.yml
results:
  fit_time:
  - 58.31036615371704
  - 57.682719230651855
  - 56.181469678878784
  - 53.08887052536011
  - 53.89160895347595
  score_time:
  - 53.316179513931274
  - 45.46156454086304
  - 60.0528450012207
  - 56.49430990219116
  - 59.18073868751526
  test_average_precision_macro:
  - 0.4151569393435411
  - 0.39032155219757114
  - 0.3709108076852635
  - 0.43661350054506187
  - 0.418199732864312
  test_average_precision_micro:
  - 0.4915195808294348
  - 0.4967192510876806
  - 0.44507271255409847
  - 0.46594139955196506
  - 0.5085880646703975
  test_average_precision_samples:
  - 0.7214052287581699
  - 0.715210355987055
  - 0.6826923076923077
  - 0.6979166666666667
  - 0.7342767295597484
  test_average_precision_weighted:
  - 0.5182527904534031
  - 0.48959826220689007
  - 0.47059287786059334
  - 0.4872584733226382
  - 0.5272868144470688
  test_coverage_error:
  - -1.7156862745098038
  - -1.7378640776699028
  - -1.8076923076923077
  - -1.7980769230769231
  - -1.7075471698113207
  test_f1_macro:
  - 0.2713032581453634
  - 0.2556063122923588
  - 0.21633790737564323
  - 0.1902173913043478
  - 0.24804736709498612
  test_f1_micro:
  - 0.4523809523809524
  - 0.4327485380116959
  - 0.4044943820224719
  - 0.345679012345679
  - 0.41509433962264153
  test_f1_samples:
  - 0.369281045751634
  - 0.35275080906148865
  - 0.34615384615384615
  - 0.2692307692307692
  - 0.3113207547169811
  test_f1_weighted:
  - 0.3989098960994719
  - 0.3727021040974529
  - 0.32279159519725564
  - 0.28695652173913044
  - 0.3634820804632125
  test_hamming_loss:
  - -0.22549019607843138
  - -0.2354368932038835
  - -0.2548076923076923
  - -0.2548076923076923
  - -0.21933962264150944
  test_jaccard_macro:
  - 0.18627065302911094
  - 0.1723555888972243
  - 0.14145314145314147
  - 0.12083333333333332
  - 0.16558876003568243
  test_jaccard_micro:
  - 0.2923076923076923
  - 0.27611940298507465
  - 0.2535211267605634
  - 0.208955223880597
  - 0.2619047619047619
  test_jaccard_samples:
  - 0.36764705882352944
  - 0.34951456310679613
  - 0.34615384615384615
  - 0.2692307692307692
  - 0.3113207547169811
  test_jaccard_weighted:
  - 0.27350988824639266
  - 0.2519272675311685
  - 0.21214596214596215
  - 0.18333333333333332
  - 0.24332637638227325
  test_label_ranking_average_precision_score:
  - 0.7214052287581699
  - 0.7152103559870553
  - 0.6826923076923078
  - 0.6979166666666666
  - 0.7342767295597484
  test_label_ranking_loss:
  - 0.2344771241830065
  - 0.238673139158576
  - 0.2692307692307692
  - 0.2612179487179487
  - 0.23584905660377356
  test_matthews_corrcoef_macro:
  - 0.15129727321826014
  - 0.13544395997975633
  - 0.10614583078833924
  - 0.07177958680259208
  - 0.15992973569507282
  test_matthews_corrcoef_micro:
  - 0.3328544286306346
  - 0.3064334464620094
  - 0.25404374118044964
  - 0.21907209701790317
  - 0.3252681760121396
  test_matthews_corrcoef_samples:
  - 0.28017010067832965
  - 0.25716537739526785
  - 0.22435897435897434
  - 0.1762820512820513
  - 0.24842767295597487
  test_matthews_corrcoef_weighted:
  - 0.21456542409216411
  - 0.19450176520879417
  - 0.15080221377609687
  - 0.10471031995437668
  - 0.22852083202239018
  test_ndgc:
  - 0.7931519860554412
  - 0.7885919261790559
  - 0.7638093977006352
  - 0.7756390484483516
  - 0.8018485855809435
  test_precision_macro:
  - 0.3048654244306418
  - 0.28809523809523807
  - 0.305982905982906
  - 0.2559288537549407
  - 0.3374542124542125
  test_precision_micro:
  - 0.5846153846153846
  - 0.5606060606060606
  - 0.4864864864864865
  - 0.49122807017543857
  - 0.6226415094339622
  test_precision_samples:
  - 0.37254901960784315
  - 0.3592233009708738
  - 0.34615384615384615
  - 0.2692307692307692
  - 0.3113207547169811
  test_precision_weighted:
  - 0.44322498944702404
  - 0.4146031746031746
  - 0.4376397107166338
  - 0.37312252964426873
  - 0.48294629898403485
  test_recall_macro:
  - 0.24859943977591037
  - 0.239198606271777
  - 0.2268292682926829
  - 0.1738095238095238
  - 0.20952380952380953
  test_recall_micro:
  - 0.36893203883495146
  - 0.3523809523809524
  - 0.34615384615384615
  - 0.26666666666666666
  - 0.3113207547169811
  test_recall_samples:
  - 0.36764705882352944
  - 0.34951456310679613
  - 0.34615384615384615
  - 0.2692307692307692
  - 0.3113207547169811
  test_recall_weighted:
  - 0.36893203883495146
  - 0.3523809523809524
  - 0.34615384615384615
  - 0.26666666666666666
  - 0.3113207547169811
  test_roc_auc_macro:
  - 0.6586095505321283
  - 0.6967574267239884
  - 0.6159303988032117
  - 0.72146569761988
  - 0.6752303742799937
  test_roc_auc_micro:
  - 0.7757122393760942
  - 0.7622460058942144
  - 0.7466099605522682
  - 0.7584749655489205
  - 0.7796072149044737
  test_roc_auc_samples:
  - 0.7655228758169935
  - 0.7613268608414241
  - 0.7307692307692307
  - 0.7387820512820513
  - 0.7641509433962266
  test_roc_auc_weighted:
  - 0.6572654453865191
  - 0.6764571151667925
  - 0.6382961060678453
  - 0.6520291766019376
  - 0.6930059535440538
start: 2023-10-21 18:10:03.895817
wrapper: null
