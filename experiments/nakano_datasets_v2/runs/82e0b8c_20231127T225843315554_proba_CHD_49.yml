active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZ2b+AMzMzMzPjPwCZmZmZmdm/gDMzMzMz4z8AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T/AmZmZmZnpP8CZmZmZmek/kJmZmZmZCcDAmZmZmZnpPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJv8CZmZmZmek/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ6b80MzMzMzPzP5iZmZmZmem/oJmZmZmZyT+gmZmZmZnJPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ADMzMzMz478AmpmZmZnZPwCamZmZmdk/AJqZmZmZ2T8AMzMzMzPjvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AAAAAAAAAMAAAAAAAADwPwAAAAAAAPA/AAAAAAAAAAAAAAAAAAAAAA==
      n_labels: 6
      n_samples: 555
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: CHD_49
  params:
    path: nakano_datasets_v2/datasets/MLC/CHD_49.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 22:59:46.290144
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.9
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba
  params:
    memory: estimators_cache
hash: 82e0b8c16f1e3464a7dd4b26df37d715431d00e1c677fa898af24c5cea847685
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/82e0b8c_20231127T225843315554_proba_CHD_49.yml
results:
  fit_time:
  - 34.77835154533386
  - 34.482720613479614
  - 32.013407945632935
  - 32.70023703575134
  - 32.46954560279846
  score_time:
  - 17.39816665649414
  - 12.360790014266968
  - 30.52456569671631
  - 14.186712980270386
  - 11.957926750183105
  test_average_precision_macro:
  - 0.4758479414687136
  - 0.4516584254017006
  - 0.49909068210704044
  - 0.5028661590922114
  - 0.47718410059328237
  test_average_precision_micro:
  - 0.5396818000404375
  - 0.523744745757152
  - 0.5671270770216379
  - 0.5827146817383031
  - 0.5649730859648348
  test_average_precision_samples:
  - 0.6754547689282202
  - 0.6736616161616161
  - 0.6600151515151516
  - 0.7025650650650649
  - 0.706206206206206
  test_average_precision_weighted:
  - 0.6032082532983136
  - 0.5807573072589385
  - 0.5989637268710108
  - 0.6314865411315715
  - 0.6167211330298357
  test_coverage_error:
  - -4.15929203539823
  - -4.1
  - -4.2272727272727275
  - -4.225225225225225
  - -4.09009009009009
  test_f1_macro:
  - 0.007575757575757576
  - 0.0
  - 0.011235955056179775
  - 0.01629894653150467
  - 0.0
  test_f1_micro:
  - 0.0136986301369863
  - 0.0
  - 0.020689655172413793
  - 0.020477815699658702
  - 0.0
  test_f1_samples:
  - 0.008849557522123894
  - 0.0
  - 0.01090909090909091
  - 0.015015015015015013
  - 0.0
  test_f1_weighted:
  - 0.01341540404040404
  - 0.0
  - 0.019869899467770548
  - 0.02026191935260898
  - 0.0
  test_hamming_loss:
  - -0.4247787610619469
  - -0.4303030303030303
  - -0.4303030303030303
  - -0.43093093093093093
  - -0.4294294294294294
  test_jaccard_macro:
  - 0.003875968992248062
  - 0.0
  - 0.005813953488372093
  - 0.00835421888053467
  - 0.0
  test_jaccard_micro:
  - 0.006896551724137931
  - 0.0
  - 0.010452961672473868
  - 0.010344827586206896
  - 0.0
  test_jaccard_samples:
  - 0.0058997050147492625
  - 0.0
  - 0.006818181818181818
  - 0.01051051051051051
  - 0.0
  test_jaccard_weighted:
  - 0.006863695090439276
  - 0.0
  - 0.010281517747858017
  - 0.010380622837370242
  - 0.0
  test_label_ranking_average_precision_score:
  - 0.6754547689282203
  - 0.6918434343434343
  - 0.6691060606060608
  - 0.7025650650650651
  - 0.7062062062062064
  test_label_ranking_loss:
  - 0.33596361848574235
  - 0.320959595959596
  - 0.3493181818181818
  - 0.32102102102102104
  - 0.3134884884884886
  test_matthews_corrcoef_macro:
  - -0.017796946117427534
  - 0.0
  - -0.014008295367013146
  - 0.015215440306107672
  - 0.0
  test_matthews_corrcoef_micro:
  - 0.011723078580596163
  - 0.0
  - 0.02966533568699768
  - 0.04957166483062211
  - 0.0
  test_matthews_corrcoef_samples:
  - 0.0033468975662219284
  - 0.0
  - 0.003931413927578871
  - 0.009726748896699404
  - 0.0
  test_matthews_corrcoef_weighted:
  - -0.020715195544753068
  - 0.0
  - -0.02477256443850746
  - 0.012421284358876293
  - 0.0
  test_ndgc:
  - 0.7753492368736754
  - 0.769263278255748
  - 0.7644551830095931
  - 0.801622720758402
  - 0.8062920113857709
  test_precision_macro:
  - 0.1111111111111111
  - 0.0
  - 0.09999999999999999
  - 0.3333333333333333
  - 0.0
  test_precision_micro:
  - 0.5
  - 0.0
  - 0.6
  - 0.75
  - 0.0
  test_precision_samples:
  - 0.017699115044247787
  - 0.0
  - 0.02727272727272727
  - 0.02702702702702703
  - 0.0
  test_precision_weighted:
  - 0.19675925925925924
  - 0.0
  - 0.17684210526315788
  - 0.42214532871972316
  - 0.0
  test_recall_macro:
  - 0.00392156862745098
  - 0.0
  - 0.005952380952380952
  - 0.00835421888053467
  - 0.0
  test_recall_micro:
  - 0.006944444444444444
  - 0.0
  - 0.010526315789473684
  - 0.010380622837370242
  - 0.0
  test_recall_samples:
  - 0.0058997050147492625
  - 0.0
  - 0.006818181818181818
  - 0.01051051051051051
  - 0.0
  test_recall_weighted:
  - 0.006944444444444444
  - 0.0
  - 0.010526315789473684
  - 0.010380622837370242
  - 0.0
  test_roc_auc_macro:
  - 0.5768885512137114
  - 0.4744618068650917
  - 0.5629831421021035
  - 0.4888685475745476
  - 0.4948440830963992
  test_roc_auc_micro:
  - 0.6413461538461539
  - 0.6577015283188493
  - 0.6742549707602339
  - 0.6533321707525264
  - 0.6731137283768862
  test_roc_auc_samples:
  - 0.6640363815142576
  - .nan
  - .nan
  - 0.6789789789789791
  - 0.6865115115115115
  test_roc_auc_weighted:
  - 0.5620589747078254
  - 0.5400337928382746
  - 0.5207954516203892
  - 0.5454383578552151
  - 0.558249206073132
start: 2023-11-27 22:58:43.315554
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop90
  params:
    drop: 0.9
    random_state: 0
