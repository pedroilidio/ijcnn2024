active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb/AmZmZmZnpPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ2b+YmZmZmZnZvzQzMzMzM+M/NDMzMzMz4z+YmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z9AMzMzMzPjP4CZmZmZmdm/gJmZmZmZ2b+AmZmZmZnZvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/gJmZmZmZ2b9AMzMzMzPjPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJiZmZmZyb8AmJmZmZnJvwAzMzMzM/O/AJqZmZmZ6T8AmpmZmZnpPw==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: GrampositivePseAAC
  params:
    path: nakano_datasets_v2/datasets/MLC/GrampositivePseAAC.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 21:56:48.378683
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 52ec6e3a66a3691ec572c46061ccc0629580c659222edb04350cad541eab36df
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/52ec6e3_20231127T215430246124_embedding_proba_GrampositivePseAAC.yml
results:
  fit_time:
  - 58.84149980545044
  - 64.81326818466187
  - 68.85068964958191
  - 67.01132798194885
  - 62.68994331359863
  score_time:
  - 71.99624156951904
  - 65.9705011844635
  - 66.5479199886322
  - 54.14425086975098
  - 73.94876718521118
  test_average_precision_macro:
  - 0.3749690252557436
  - 0.4118598133335052
  - 0.32375811147446665
  - 0.3546581716434598
  - 0.36970755223803764
  test_average_precision_micro:
  - 0.4948509623545107
  - 0.41892572964985964
  - 0.41789700874513125
  - 0.44161483385428385
  - 0.4511601150954452
  test_average_precision_samples:
  - 0.6690705128205128
  - 0.6314102564102563
  - 0.6626984126984127
  - 0.6367313915857604
  - 0.7249190938511326
  test_average_precision_weighted:
  - 0.47349221561516225
  - 0.4645552435896286
  - 0.42508002590934035
  - 0.44219539931127183
  - 0.458981782235461
  test_coverage_error:
  - -1.8653846153846154
  - -1.9615384615384615
  - -1.8571428571428572
  - -1.9514563106796117
  - -1.7281553398058251
  test_f1_macro:
  - 0.12499999999999999
  - 0.09561965811965813
  - 0.1048076923076923
  - 0.07050528789659223
  - 0.16072701354240915
  test_f1_micro:
  - 0.18803418803418803
  - 0.14035087719298248
  - 0.1652892561983471
  - 0.1081081081081081
  - 0.2518518518518519
  test_f1_samples:
  - 0.10576923076923077
  - 0.07692307692307693
  - 0.09523809523809523
  - 0.055016181229773455
  - 0.1650485436893204
  test_f1_weighted:
  - 0.17445887445887445
  - 0.13500575279421434
  - 0.1576923076923077
  - 0.10560125342734038
  - 0.23288009211031307
  test_hamming_loss:
  - -0.2283653846153846
  - -0.23557692307692307
  - -0.24047619047619048
  - -0.24029126213592233
  - -0.24514563106796117
  test_jaccard_macro:
  - 0.07384823848238482
  - 0.05285714285714286
  - 0.05915915915915916
  - 0.03809523809523809
  - 0.09590080971659919
  test_jaccard_micro:
  - 0.10377358490566038
  - 0.07547169811320754
  - 0.09009009009009009
  - 0.05714285714285714
  - 0.1440677966101695
  test_jaccard_samples:
  - 0.10576923076923077
  - 0.07692307692307693
  - 0.09523809523809523
  - 0.05339805825242718
  - 0.1650485436893204
  test_jaccard_weighted:
  - 0.10264550264550265
  - 0.07516483516483516
  - 0.08924924924924925
  - 0.05714285714285714
  - 0.1387223606353161
  test_label_ranking_average_precision_score:
  - 0.6690705128205132
  - 0.6314102564102567
  - 0.6626984126984129
  - 0.6367313915857609
  - 0.7249190938511327
  test_label_ranking_loss:
  - 0.2860576923076923
  - 0.32051282051282054
  - 0.2857142857142857
  - 0.3114886731391586
  - 0.2394822006472492
  test_matthews_corrcoef_macro:
  - 0.14335693808750272
  - 0.1205736809877359
  - 0.06758870843995063
  - 0.10959691811637119
  - 0.080925396781788
  test_matthews_corrcoef_micro:
  - 0.26354717921128606
  - 0.19934210348050618
  - 0.1723454968864278
  - 0.2078677650359176
  - 0.1943374219650585
  test_matthews_corrcoef_samples:
  - 0.10256410256410256
  - 0.07051282051282051
  - 0.0761904761904762
  - 0.05414903173970511
  - 0.1197411003236246
  test_matthews_corrcoef_weighted:
  - 0.20335046373744273
  - 0.16752740688948084
  - 0.10858418493884073
  - 0.16227881082783027
  - 0.11073279336659156
  test_ndgc:
  - 0.7537938675524699
  - 0.7253478592390967
  - 0.7489183862510868
  - 0.7297489209988498
  - 0.795036304197033
  test_precision_macro:
  - 0.4722222222222222
  - 0.5892857142857143
  - 0.32499999999999996
  - 0.5
  - 0.2850877192982456
  test_precision_micro:
  - 0.9166666666666666
  - 0.8
  - 0.625
  - 1.0
  - 0.5483870967741935
  test_precision_samples:
  - 0.10576923076923077
  - 0.07692307692307693
  - 0.09523809523809523
  - 0.05825242718446602
  - 0.1650485436893204
  test_precision_weighted:
  - 0.6867724867724868
  - 0.7898351648351648
  - 0.48
  - 0.7333333333333333
  - 0.4092442645074224
  test_recall_macro:
  - 0.0754355400696864
  - 0.054144889663182344
  - 0.0630952380952381
  - 0.03809523809523809
  - 0.11239495798319327
  test_recall_micro:
  - 0.10476190476190476
  - 0.07692307692307693
  - 0.09523809523809523
  - 0.05714285714285714
  - 0.16346153846153846
  test_recall_samples:
  - 0.10576923076923077
  - 0.07692307692307693
  - 0.09523809523809523
  - 0.05339805825242718
  - 0.1650485436893204
  test_recall_weighted:
  - 0.10476190476190476
  - 0.07692307692307693
  - 0.09523809523809523
  - 0.05714285714285714
  - 0.16346153846153846
  test_roc_auc_macro:
  - 0.5985466546165383
  - 0.5905569652746216
  - 0.5908300653594771
  - 0.6237790576508031
  - 0.6050329293574277
  test_roc_auc_micro:
  - 0.7336701883325678
  - 0.6824149408284024
  - 0.7131972789115646
  - 0.7154645571583682
  - 0.7436938061938062
  test_roc_auc_samples:
  - 0.7139423076923077
  - 0.6794871794871795
  - 0.7142857142857144
  - 0.6885113268608415
  - 0.7605177993527509
  test_roc_auc_weighted:
  - 0.6041888895960756
  - 0.5748585231193927
  - 0.5793384020274777
  - 0.5846332910633779
  - 0.6271052408319295
start: 2023-11-27 21:54:30.246124
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
