active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz4z+YmZmZmZnZv5iZmZmZmdm/NDMzMzMz4z+YmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/gJmZmZmZ2b9AMzMzMzPjPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AM3MzMzM/D8AMzMzMzPzv4CZmZmZmQHAAJqZmZmZ6T8AmpmZmZnpPw==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_positive
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_positive.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:03:32.046965
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_pvalue
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_chi2
  params:
    memory: estimators_cache
hash: a111ec0d0e33b0961ebe8b3fdf218b108a237b77d90ead903e0f6d0ac31a5a7b
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/a111ec0_20231021T180134389069_embedding_chi2_Gram_positive.yml
results:
  fit_time:
  - 61.68462562561035
  - 62.32581043243408
  - 61.246026039123535
  - 59.84178113937378
  - 55.78286385536194
  score_time:
  - 44.40294694900513
  - 49.69013786315918
  - 33.81480622291565
  - 46.16304969787598
  - 61.07623362541199
  test_average_precision_macro:
  - 0.9186571527378327
  - 0.9454353150235453
  - 0.9958810382992735
  - 0.8083894256585897
  - 0.9480616318667833
  test_average_precision_micro:
  - 0.9897113635155996
  - 0.9867056581877284
  - 0.9919050297451673
  - 0.978281823695437
  - 0.9718567204779105
  test_average_precision_samples:
  - 0.9665032679738563
  - 0.9626984126984126
  - 0.9701257861635221
  - 0.9546925566343042
  - 0.9587378640776699
  test_average_precision_weighted:
  - 0.9849515074847144
  - 0.987138760635756
  - 0.9957565672805747
  - 0.9666677009295325
  - 0.9691903081555996
  test_coverage_error:
  - -1.088235294117647
  - -1.1047619047619048
  - -1.0660377358490567
  - -1.1359223300970873
  - -1.1359223300970873
  test_f1_macro:
  - 0.7177083333333334
  - 0.7076563880996727
  - 0.7188755671940038
  - 0.689092618157076
  - 0.692154331612163
  test_f1_micro:
  - 0.9435897435897437
  - 0.9253731343283582
  - 0.9411764705882353
  - 0.9199999999999999
  - 0.9170731707317075
  test_f1_samples:
  - 0.9019607843137255
  - 0.8857142857142857
  - 0.9056603773584906
  - 0.8899676375404529
  - 0.9093851132686083
  test_f1_weighted:
  - 0.9299019607843136
  - 0.9081807002982174
  - 0.9237109517970337
  - 0.9041038408140457
  - 0.899827882960413
  test_hamming_loss:
  - -0.02696078431372549
  - -0.03571428571428571
  - -0.02830188679245283
  - -0.038834951456310676
  - -0.0412621359223301
  test_jaccard_macro:
  - 0.6883931133428981
  - 0.6699678249678249
  - 0.6907551750575006
  - 0.6418511569731082
  - 0.6472406792174235
  test_jaccard_micro:
  - 0.8932038834951457
  - 0.8611111111111112
  - 0.8888888888888888
  - 0.8518518518518519
  - 0.8468468468468469
  test_jaccard_samples:
  - 0.9019607843137255
  - 0.8857142857142857
  - 0.9056603773584906
  - 0.8883495145631068
  - 0.9077669902912622
  test_jaccard_weighted:
  - 0.8929411764705882
  - 0.8600203977562468
  - 0.888758564822628
  - 0.8510848126232742
  - 0.8501731441930777
  test_label_ranking_average_precision_score:
  - 0.9665032679738562
  - 0.9626984126984126
  - 0.970125786163522
  - 0.9546925566343043
  - 0.9587378640776698
  test_label_ranking_loss:
  - 0.029411764705882353
  - 0.031746031746031744
  - 0.0220125786163522
  - 0.04045307443365695
  - 0.038834951456310676
  test_matthews_corrcoef_macro:
  - 0.7045206739754291
  - 0.6901952141594292
  - 0.7051639368442714
  - 0.6721304090598448
  - 0.6697713743826552
  test_matthews_corrcoef_micro:
  - 0.9276311316538999
  - 0.9043300776774429
  - 0.9238119332199606
  - 0.8956621635581681
  - 0.8901003554764819
  test_matthews_corrcoef_samples:
  - 0.8986928104575164
  - 0.8793650793650795
  - 0.8993710691823901
  - 0.8761555042316145
  - 0.8891004880503848
  test_matthews_corrcoef_weighted:
  - 0.9125252556767205
  - 0.8843543944122344
  - 0.9053241719088428
  - 0.8831637530229054
  - 0.8736754712173327
  test_ndgc:
  - 0.9750430938466591
  - 0.9722411935802923
  - 0.9778740449797857
  - 0.9669268970372833
  - 0.9691598623183278
  test_precision_macro:
  - 0.7395833333333334
  - 0.7361111111111112
  - 0.7333333333333334
  - 0.7236842105263158
  - 0.6950929152148665
  test_precision_micro:
  - 0.989247311827957
  - 0.9789473684210527
  - 0.9795918367346939
  - 0.9583333333333334
  - 0.94
  test_precision_samples:
  - 0.9019607843137255
  - 0.8857142857142857
  - 0.9056603773584906
  - 0.8932038834951457
  - 0.912621359223301
  test_precision_weighted:
  - 0.9607843137254902
  - 0.9439203354297694
  - 0.9425314465408805
  - 0.9357287449392714
  - 0.9045296167247386
  test_recall_macro:
  - 0.6979764466762315
  - 0.6830952380952381
  - 0.705
  - 0.6667595818815331
  - 0.6892857142857143
  test_recall_micro:
  - 0.9019607843137255
  - 0.8773584905660378
  - 0.9056603773584906
  - 0.8846153846153846
  - 0.8952380952380953
  test_recall_samples:
  - 0.9019607843137255
  - 0.8857142857142857
  - 0.9056603773584906
  - 0.8883495145631068
  - 0.9077669902912622
  test_recall_weighted:
  - 0.9019607843137255
  - 0.8773584905660378
  - 0.9056603773584906
  - 0.8846153846153846
  - 0.8952380952380953
  test_roc_auc_macro:
  - 0.9938129177636661
  - 0.994214660836832
  - 0.9985168650793651
  - 0.9827115432507204
  - 0.9872293912125522
  test_roc_auc_micro:
  - 0.9948417275406894
  - 0.9941413291671675
  - 0.9966180135279459
  - 0.9891670829170829
  - 0.987560105475415
  test_roc_auc_samples:
  - 0.9705882352941176
  - 0.9682539682539681
  - 0.9779874213836478
  - 0.9595469255663431
  - 0.9611650485436893
  test_roc_auc_weighted:
  - 0.9950025173520551
  - 0.996663660638301
  - 0.9983621593291404
  - 0.9922477347495592
  - 0.9858542824358286
start: 2023-10-21 18:01:34.389069
wrapper: null
