active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyT+AmZmZmZnJP6CZmZmZmem/gJmZmZmZyT+AmZmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZAcCYmZmZmZkBwNDMzMzMzPw/oJmZmZmZ6T/QzMzMzMz8Pw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyT/QzMzMzMz8vzAzMzMzM/M/oJmZmZmZ6b8wMzMzMzPzPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT8AmpmZmZnJP8DMzMzMzPy/QDMzMzMz8z8AmpmZmZnJPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMzA0BoZmZmZmb2PzAzMzMzM+O/mJmZmZmZ+b+YmZmZmZn5vw==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ZmZmZmZmDsCgmZmZmZnJP5qZmZmZmQlANDMzMzMz8z+YmZmZmZnpvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          4MzMzMzM/D8gMzMzMzPzv8CZmZmZmek/wJmZmZmZ6T+QmZmZmZkBwA==
      n_labels: 7
      n_samples: 194
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: flags
  params:
    path: nakano_datasets_v2/datasets/MLC/flags.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:25:02.561775
estimator:
  call: nakano_datasets_v2.estimators.final_estimator
  final_params:
    estimators:
    - - rf
      - call: sklearn.ensemble._forest.RandomForestClassifier
        params:
          bootstrap: true
          ccp_alpha: 0.0
          class_weight: null
          criterion: gini
          max_depth: null
          max_features: sqrt
          max_leaf_nodes: null
          max_samples: 0.9
          min_impurity_decrease: 0.0
          min_samples_leaf: 5
          min_samples_split: 2
          min_weight_fraction_leaf: 0.0
          n_estimators: 150
          n_jobs: 14
          oob_score: true
          random_state: 0
          verbose: true
          warm_start: false
    - - xt
      - call: sklearn.ensemble._forest.ExtraTreesClassifier
        params:
          bootstrap: true
          ccp_alpha: 0.0
          class_weight: null
          criterion: gini
          max_depth: null
          max_features: sqrt
          max_leaf_nodes: null
          max_samples: 0.9
          min_impurity_decrease: 0.0
          min_samples_leaf: 5
          min_samples_split: 2
          min_weight_fraction_leaf: 0.0
          n_estimators: 150
          n_jobs: 14
          oob_score: true
          random_state: 0
          verbose: true
          warm_start: false
  name: final_estimator
  params: {}
hash: 81b68b64ff852a2acd3a9b5c5a38444a223a84367386356e0cebd1543565e9c6
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/81b68b6_20231021T172457740621_final_estimator_flags.yml
results:
  fit_time:
  - 1.3478834629058838
  - 1.3565802574157715
  - 1.3892161846160889
  - 1.3554115295410156
  - 1.3657104969024658
  score_time:
  - 3.194260835647583
  - 3.0969595909118652
  - 3.2816507816314697
  - 3.1386029720306396
  - 3.3691539764404297
  test_average_precision_macro:
  - 0.7806308219065706
  - 0.763337168661562
  - 0.7620841583839187
  - 0.7763304553985807
  - 0.752341923794096
  test_average_precision_micro:
  - 0.8456671965189084
  - 0.7991951555707675
  - 0.8119755221809638
  - 0.8436261600848296
  - 0.7609713022459534
  test_average_precision_samples:
  - 0.8418489918489919
  - 0.8125615079365079
  - 0.848485797827903
  - 0.8544434001670843
  - 0.7882007355787843
  test_average_precision_weighted:
  - 0.8403854356322259
  - 0.8020223338255681
  - 0.7911936155079909
  - 0.8507115165349679
  - 0.8004566013683693
  test_coverage_error:
  - -4.837837837837838
  - -4.6
  - -4.447368421052632
  - -4.526315789473684
  - -4.7073170731707314
  test_f1_macro:
  - 0.5965543957140597
  - 0.5451465150201688
  - 0.5531123739818508
  - 0.5514755330824255
  - 0.5225945678493785
  test_f1_micro:
  - 0.769811320754717
  - 0.7224334600760457
  - 0.7480314960629921
  - 0.7351778656126482
  - 0.7094339622641509
  test_f1_samples:
  - 0.7449533949533951
  - 0.7089574314574316
  - 0.7412451583504216
  - 0.7046233006759323
  - 0.6954492661809735
  test_f1_weighted:
  - 0.7239487463016875
  - 0.6777940081940996
  - 0.7128139877422743
  - 0.6866063970396806
  - 0.6501062387662483
  test_hamming_loss:
  - -0.23552123552123552
  - -0.26071428571428573
  - -0.24060150375939848
  - -0.2518796992481203
  - -0.2682926829268293
  test_jaccard_macro:
  - 0.49383042861303733
  - 0.4306689342403628
  - 0.4481621474102678
  - 0.44329492562575273
  - 0.4194681624995213
  test_jaccard_micro:
  - 0.6257668711656442
  - 0.5654761904761905
  - 0.5974842767295597
  - 0.58125
  - 0.5497076023391813
  test_jaccard_samples:
  - 0.6487773487773487
  - 0.5891071428571429
  - 0.6271929824561404
  - 0.5876566416040102
  - 0.5653310104529616
  test_jaccard_weighted:
  - 0.6154561101421004
  - 0.548777463613609
  - 0.5969551855653829
  - 0.5664506512638292
  - 0.5307484416771471
  test_label_ranking_average_precision_score:
  - 0.8418489918489918
  - 0.8125615079365078
  - 0.848485797827903
  - 0.8544434001670843
  - 0.7882007355787843
  test_label_ranking_loss:
  - 0.1954954954954955
  - 0.19250000000000003
  - 0.16622807017543859
  - 0.1618421052631579
  - 0.21422764227642277
  test_matthews_corrcoef_macro:
  - 0.220141879764889
  - 0.1837778416890495
  - 0.2139090600761884
  - 0.20464458998927607
  - 0.17359689091972408
  test_matthews_corrcoef_micro:
  - 0.5292750554325483
  - 0.4771161064925182
  - 0.517901773875368
  - 0.4967547853243614
  - 0.46069064491438605
  test_matthews_corrcoef_samples:
  - 0.4850734143664302
  - 0.46016046043385783
  - 0.5008409031362149
  - 0.4641962922764717
  - 0.42978674667757505
  test_matthews_corrcoef_weighted:
  - 0.2067046055985853
  - 0.15596760434756077
  - 0.24570957800655435
  - 0.19083509409247973
  - 0.1659741509879558
  test_ndgc:
  - 0.9036766140819668
  - 0.8853396332760276
  - 0.9045925016625604
  - 0.912032927121184
  - 0.8735500217392145
  test_precision_macro:
  - 0.627399580031159
  - 0.6637796414112204
  - 0.5812433519200436
  - 0.6822386849476633
  - 0.49139424062307846
  test_precision_micro:
  - 0.7846153846153846
  - 0.7364341085271318
  - 0.753968253968254
  - 0.7622950819672131
  - 0.6962962962962963
  test_precision_samples:
  - 0.768918918918919
  - 0.7316666666666667
  - 0.7578947368421054
  - 0.7346491228070176
  - 0.6959349593495935
  test_precision_weighted:
  - 0.7167841525736263
  - 0.7222040103128085
  - 0.7146265766742741
  - 0.758733525551643
  - 0.599141651031895
  test_recall_macro:
  - 0.6058802308802308
  - 0.5499800965318207
  - 0.5602129208940354
  - 0.5511695906432749
  - 0.5681605975723623
  test_recall_micro:
  - 0.7555555555555555
  - 0.7089552238805971
  - 0.7421875
  - 0.7099236641221374
  - 0.7230769230769231
  test_recall_samples:
  - 0.7324324324324324
  - 0.7099404761904762
  - 0.7412280701754387
  - 0.7038847117794487
  - 0.7174796747967479
  test_recall_weighted:
  - 0.7555555555555555
  - 0.7089552238805971
  - 0.7421875
  - 0.7099236641221374
  - 0.7230769230769231
  test_roc_auc_macro:
  - 0.7624591438532577
  - 0.7496949403687049
  - 0.7360562852799167
  - 0.7743633497014439
  - 0.7684075565622187
  test_roc_auc_micro:
  - 0.8384707287933094
  - 0.8304027806174608
  - 0.8448256340579711
  - 0.8471586089906702
  - 0.8089171974522292
  test_roc_auc_samples:
  - 0.8045045045045046
  - .nan
  - 0.8337719298245614
  - .nan
  - 0.7857723577235772
  test_roc_auc_weighted:
  - 0.7388250799412325
  - 0.7116925844176686
  - 0.6616523404866332
  - 0.7916120263353975
  - 0.7579290100204643
start: 2023-10-21 17:24:57.740621
wrapper: null
