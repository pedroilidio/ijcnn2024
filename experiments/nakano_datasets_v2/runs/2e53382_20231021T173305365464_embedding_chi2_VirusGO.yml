active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            mJmZmZmZ2b80MzMzMzPjPzQzMzMzM+M/mJmZmZmZ2b+YmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ODMzMzMz4z84MzMzMzPjP5CZmZmZmdm/kJmZmZmZ2b+QmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ2T8gMzMzMzPjv8CZmZmZmdk/wJmZmZmZ2T8gMzMzMzPjvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+AmZmZmZnJv4CZmZmZmcm/oJmZmZmZ6T+AmZmZmZnJvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJqZmZmZ2T9AMzMzMzMDQACamZmZmdk/AJqZmZmZ2T/AzMzMzMwMwA==
      n_labels: 6
      n_samples: 207
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: VirusGO
  params:
    path: nakano_datasets_v2/datasets/MLC/VirusGO.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:34:41.308489
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_pvalue
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_chi2
  params:
    memory: estimators_cache
hash: 2e533823aa2460ad9d02ed1e57be94b008cef2c391ccda97095c0d5543be3572
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/2e53382_20231021T173305365464_embedding_chi2_VirusGO.yml
results:
  fit_time:
  - 51.34407186508179
  - 49.81619119644165
  - 49.51418471336365
  - 45.88262677192688
  - 47.993239879608154
  score_time:
  - 44.03611516952515
  - 43.416528940200806
  - 26.070223093032837
  - 46.97237944602966
  - 42.658684492111206
  test_average_precision_macro:
  - 0.9314990583850992
  - 0.9310804117170975
  - 0.9730288250503146
  - 0.9497060871574279
  - 0.9765901230633293
  test_average_precision_micro:
  - 0.9400013515749206
  - 0.9155488553449223
  - 0.9322981841325824
  - 0.8866556358943583
  - 0.9360792606240478
  test_average_precision_samples:
  - 0.9491869918699186
  - 0.9410256410256411
  - 0.9532520325203251
  - 0.9369918699186991
  - 0.9574074074074075
  test_average_precision_weighted:
  - 0.9457209218184449
  - 0.9461044972399462
  - 0.9702168983407374
  - 0.938227156830098
  - 0.971832035783274
  test_coverage_error:
  - -1.3902439024390243
  - -1.5384615384615385
  - -1.3170731707317074
  - -1.3658536585365855
  - -1.288888888888889
  test_f1_macro:
  - 0.5087752525252526
  - 0.6426587301587301
  - 0.6190476190476191
  - 0.5621996996996997
  - 0.5823232323232324
  test_f1_micro:
  - 0.7816091954022989
  - 0.8045977011494254
  - 0.7674418604651163
  - 0.7956989247311828
  - 0.7777777777777778
  test_f1_samples:
  - 0.6829268292682927
  - 0.7649572649572649
  - 0.7235772357723577
  - 0.7195121951219511
  - 0.7111111111111111
  test_f1_weighted:
  - 0.7325681818181817
  - 0.7586428571428572
  - 0.7188571428571429
  - 0.7549234234234234
  - 0.7517482517482518
  test_hamming_loss:
  - -0.07723577235772358
  - -0.07264957264957266
  - -0.08130081300813008
  - -0.07723577235772358
  - -0.07407407407407407
  test_jaccard_macro:
  - 0.42462774583517615
  - 0.5616471734892787
  - 0.5312238930659984
  - 0.458994708994709
  - 0.4667366946778711
  test_jaccard_micro:
  - 0.6415094339622641
  - 0.6730769230769231
  - 0.6226415094339622
  - 0.6607142857142857
  - 0.6363636363636364
  test_jaccard_samples:
  - 0.6707317073170732
  - 0.7521367521367521
  - 0.7073170731707317
  - 0.7032520325203253
  - 0.7111111111111111
  test_jaccard_weighted:
  - 0.6419548872180451
  - 0.6676023391812865
  - 0.6129824561403509
  - 0.6482539682539682
  - 0.631868131868132
  test_label_ranking_average_precision_score:
  - 0.9491869918699188
  - 0.9410256410256411
  - 0.9532520325203251
  - 0.9369918699186991
  - 0.9574074074074073
  test_label_ranking_loss:
  - 0.03231707317073171
  - 0.04358974358974359
  - 0.020731707317073172
  - 0.028658536585365855
  - 0.02302469135802469
  test_matthews_corrcoef_macro:
  - 0.48339032912621566
  - 0.6326128472310906
  - 0.6091574682610482
  - 0.5605889625424935
  - 0.5735143898429612
  test_matthews_corrcoef_micro:
  - 0.7482740966206982
  - 0.774214621725871
  - 0.7340162691534324
  - 0.751647952625833
  - 0.7476311434701277
  test_matthews_corrcoef_samples:
  - 0.6706674779536836
  - 0.7567211451171105
  - 0.7076486429784846
  - 0.7011552828317323
  - 0.6977777777777777
  test_matthews_corrcoef_weighted:
  - 0.6835018109971948
  - 0.7137417040861339
  - 0.6738031631110252
  - 0.7136586295162555
  - 0.7056278674189831
  test_ndgc:
  - 0.962959197580318
  - 0.9590549473090655
  - 0.9655174552276011
  - 0.9545577123671045
  - 0.9699788506617839
  test_precision_macro:
  - 0.6041666666666666
  - 0.8124183006535949
  - 0.801994301994302
  - 0.7825396825396825
  - 0.8055555555555557
  test_precision_micro:
  - 0.918918918918919
  - 0.9459459459459459
  - 0.9166666666666666
  - 0.8604651162790697
  - 0.9210526315789473
  test_precision_samples:
  - 0.6951219512195121
  - 0.782051282051282
  - 0.7439024390243902
  - 0.7073170731707317
  - 0.7111111111111111
  test_precision_weighted:
  - 0.8075
  - 0.8761568627450981
  - 0.8560683760683762
  - 0.8611428571428571
  - 0.9038461538461539
  test_recall_macro:
  - 0.45098039215686275
  - 0.5770697167755992
  - 0.5542717086834734
  - 0.5063025210084033
  - 0.486577964519141
  test_recall_micro:
  - 0.68
  - 0.7
  - 0.66
  - 0.74
  - 0.6730769230769231
  test_recall_samples:
  - 0.6829268292682927
  - 0.7649572649572649
  - 0.7195121951219512
  - 0.7439024390243902
  - 0.7111111111111111
  test_recall_weighted:
  - 0.68
  - 0.7
  - 0.66
  - 0.74
  - 0.6730769230769231
  test_roc_auc_macro:
  - 0.9759699825876297
  - 0.9720915975817936
  - 0.9909200166553108
  - 0.9787579491255962
  - 0.9908430783312973
  test_roc_auc_micro:
  - 0.9778571428571429
  - 0.9667391304347825
  - 0.9814285714285714
  - 0.9739795918367348
  - 0.9817395906845449
  test_roc_auc_samples:
  - 0.9676829268292683
  - 0.9564102564102563
  - 0.9792682926829269
  - 0.9713414634146342
  - 0.9769753086419753
  test_roc_auc_weighted:
  - 0.9692232947232948
  - 0.9721991341991343
  - 0.9858306836248012
  - 0.9683567567567567
  - 0.984375546955778
start: 2023-10-21 17:33:05.365464
wrapper: null
