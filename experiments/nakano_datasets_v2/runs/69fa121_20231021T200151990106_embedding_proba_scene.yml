active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AmpmZmZnZPwAzMzMzM+O/ADMzMzMz478AmpmZmZnZPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyb8AmpmZmZnJvwCamZmZmcm/AJqZmZmZyb+AmZmZmZnpPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZ2T8AmpmZmZnZPwAzMzMzM+O/AJqZmZmZ2T8AMzMzMzPjvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b8AmZmZmZnZvwCZmZmZmdm/gDMzMzMz4z+AMzMzMzPjPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b+AMzMzMzPjPwCZmZmZmdm/gDMzMzMz4z8AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT+AmZmZmZnpvwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          wJmZmZmZEUCAzMzMzMwMwIDMzMzMzAzAADIzMzMz47+AMzMzMzMLQA==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 20:13:37.437248
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.ExtraTreesRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.8
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        - - rf
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.RandomForestRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.95
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 69fa121aa06ac960bc34da164334d97a865cb9bddefdbedde624f953b43c6bc2
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/69fa121_20231021T200151990106_embedding_proba_scene.yml
results:
  fit_time:
  - 460.7167229652405
  - 472.57235646247864
  - 484.04743361473083
  - 509.70948600769043
  - 474.30022525787354
  score_time:
  - 175.399804353714
  - 163.10507321357727
  - 160.0571904182434
  - 162.52739357948303
  - 209.1297905445099
  test_average_precision_macro:
  - 0.8235401356620374
  - 0.8187137931659465
  - 0.808689996681292
  - 0.8342835060479659
  - 0.8130118693787208
  test_average_precision_micro:
  - 0.8023561713468977
  - 0.8003758232049608
  - 0.7845727177463361
  - 0.8124189777793825
  - 0.7896012238826213
  test_average_precision_samples:
  - 0.8839273235499651
  - 0.8847766323024056
  - 0.8477491408934709
  - 0.8752593360995851
  - 0.8740585774058577
  test_average_precision_weighted:
  - 0.8110257426795134
  - 0.803671322380148
  - 0.7966031962386891
  - 0.8226128563310738
  - 0.8024555923676214
  test_coverage_error:
  - -1.440251572327044
  - -1.4144329896907217
  - -1.5340206185567011
  - -1.4356846473029046
  - -1.4476987447698744
  test_f1_macro:
  - 0.7877851198738536
  - 0.794251477125807
  - 0.7419020077688859
  - 0.7731268240415914
  - 0.7745299081122968
  test_f1_micro:
  - 0.780835881753313
  - 0.7849898580121704
  - 0.7331975560081466
  - 0.7672064777327935
  - 0.7690742624618516
  test_f1_samples:
  - 0.7756813417190775
  - 0.7731958762886598
  - 0.7109965635738831
  - 0.7579529737206085
  - 0.7562761506276151
  test_f1_weighted:
  - 0.7762788219195592
  - 0.7824727898514865
  - 0.7309240522484471
  - 0.7648733831303431
  - 0.7646156662341791
  test_hamming_loss:
  - -0.07512229210342418
  - -0.07285223367697595
  - -0.09003436426116838
  - -0.07952973720608575
  - -0.07914923291492329
  test_jaccard_macro:
  - 0.6616723616785709
  - 0.6731679430858429
  - 0.6027517059492522
  - 0.6363343515101795
  - 0.6403657967814369
  test_jaccard_micro:
  - 0.6404682274247492
  - 0.6460767946577629
  - 0.5787781350482315
  - 0.6223316912972086
  - 0.6247933884297521
  test_jaccard_samples:
  - 0.7641509433962265
  - 0.7628865979381443
  - 0.7006872852233677
  - 0.745850622406639
  - 0.7454672245467224
  test_jaccard_weighted:
  - 0.6465722412719348
  - 0.6570480188602105
  - 0.5894033921403202
  - 0.6255082245052233
  - 0.6278517743039966
  test_label_ranking_average_precision_score:
  - 0.8839273235499646
  - 0.8847766323024053
  - 0.8477491408934706
  - 0.875259336099585
  - 0.8740585774058572
  test_label_ranking_loss:
  - 0.06881551362683438
  - 0.06721649484536082
  - 0.09108247422680411
  - 0.07053941908713693
  - 0.0717573221757322
  test_matthews_corrcoef_macro:
  - 0.7466109027988553
  - 0.7515652043460056
  - 0.6896851267325775
  - 0.7267281293212036
  - 0.7300192108963359
  test_matthews_corrcoef_micro:
  - 0.737232321890389
  - 0.7425341783291736
  - 0.6808565489927485
  - 0.7204034554949742
  - 0.722765714379501
  test_matthews_corrcoef_samples:
  - 0.7389044825890847
  - 0.7383685667978205
  - 0.6676107431525291
  - 0.7197167802679356
  - 0.7173058499130957
  test_matthews_corrcoef_weighted:
  - 0.7331641510615123
  - 0.7367841578732881
  - 0.6756426331202608
  - 0.7161095423462632
  - 0.7182495228839788
  test_ndgc:
  - 0.9147902846329833
  - 0.915329133392159
  - 0.8869616003032585
  - 0.9082699286887528
  - 0.9071166030302057
  test_precision_macro:
  - 0.831500012780206
  - 0.8307795644852863
  - 0.785204870428576
  - 0.8066021543291667
  - 0.8119732734476836
  test_precision_micro:
  - 0.8254310344827587
  - 0.8251599147121536
  - 0.7775377969762419
  - 0.8029661016949152
  - 0.8094218415417559
  test_precision_samples:
  - 0.7966457023060797
  - 0.788659793814433
  - 0.7278350515463917
  - 0.7738589211618258
  - 0.7751046025104602
  test_precision_weighted:
  - 0.8252151042160292
  - 0.8210089729230187
  - 0.7748555384250496
  - 0.8005325757898863
  - 0.8072543574167451
  test_recall_macro:
  - 0.755423107039645
  - 0.7620019281869356
  - 0.7049708609900023
  - 0.7446903710085925
  - 0.7458955001257186
  test_recall_micro:
  - 0.7408123791102514
  - 0.7485493230174082
  - 0.6936416184971098
  - 0.7344961240310077
  - 0.7325581395348837
  test_recall_samples:
  - 0.7662473794549266
  - 0.7680412371134021
  - 0.7041237113402062
  - 0.754149377593361
  - 0.7486052998605299
  test_recall_weighted:
  - 0.7408123791102514
  - 0.7485493230174082
  - 0.6936416184971098
  - 0.7344961240310077
  - 0.7325581395348837
  test_roc_auc_macro:
  - 0.9309300957363384
  - 0.9301663877967407
  - 0.9269108226358377
  - 0.9393961857702537
  - 0.9329576210070966
  test_roc_auc_micro:
  - 0.9353808465272423
  - 0.933229656776171
  - 0.9269341759278733
  - 0.9405448216010232
  - 0.9344661314138059
  test_roc_auc_samples:
  - 0.9311844863731656
  - 0.9327835051546393
  - 0.9089175257731958
  - 0.9294605809128631
  - 0.9282426778242678
  test_roc_auc_weighted:
  - 0.9235086378239912
  - 0.9228824445684355
  - 0.9214444096755613
  - 0.9339463446805877
  - 0.9261828875664762
start: 2023-10-21 20:01:51.990106
wrapper: null
