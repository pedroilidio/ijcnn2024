active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z9AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT8AmpmZmZnJP4CZmZmZmem/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z9AMzMzMzPjPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZHcDQzMzMzMwEQNDMzMzMzARAQDMzMzMz4z+gmZmZmZn5Pw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb/AmZmZmZnpPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          QGZmZmZm9r+QmZmZmZkRwCAzMzMzMwPA4MzMzMzMBEBwZmZmZmYWQA==
      n_labels: 6
      n_samples: 593
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: emotions
  params:
    path: nakano_datasets_v2/datasets/MLC/emotions.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 23:17:24.387387
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 94a64e8793ac9cdf0a73f4301d2d09cd6d17fcfa1d0af1764b4abfb65a3f2c34
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/94a64e8_20231127T231453324913_embedding_proba_emotions.yml
results:
  fit_time:
  - 64.64457631111145
  - 66.26454496383667
  - 67.10527634620667
  - 70.37793064117432
  - 73.8258650302887
  score_time:
  - 80.12470364570618
  - 82.06909441947937
  - 81.65710139274597
  - 72.6489782333374
  - 72.59243679046631
  test_average_precision_macro:
  - 0.6984545945674192
  - 0.6966861450339598
  - 0.5970200204109501
  - 0.7161148562957212
  - 0.6617647504153918
  test_average_precision_micro:
  - 0.7030187134348743
  - 0.6837462145962518
  - 0.5801914677376843
  - 0.7050396050179102
  - 0.6330440495311966
  test_average_precision_samples:
  - 0.7736805555555556
  - 0.7613143631436314
  - 0.7247704315886134
  - 0.7840756704980842
  - 0.7206735496558505
  test_average_precision_weighted:
  - 0.7047813411855187
  - 0.6933708549184998
  - 0.6017180909804983
  - 0.7124255703483307
  - 0.6555687702988909
  test_coverage_error:
  - -2.966666666666667
  - -2.83739837398374
  - -3.190082644628099
  - -2.913793103448276
  - -3.230088495575221
  test_f1_macro:
  - 0.4045339054450848
  - 0.4305158632394404
  - 0.3162087912087912
  - 0.4222745713029712
  - 0.4080212526467422
  test_f1_micro:
  - 0.41196013289036554
  - 0.430976430976431
  - 0.33451957295373663
  - 0.4353741496598639
  - 0.4068965517241379
  test_f1_samples:
  - 0.3175
  - 0.3186991869918699
  - 0.26060606060606056
  - 0.3336206896551724
  - 0.3023598820058997
  test_f1_weighted:
  - 0.4076575243918919
  - 0.4258308323441361
  - 0.3259683755158868
  - 0.42428491337067054
  - 0.3972579877896966
  test_hamming_loss:
  - -0.24583333333333332
  - -0.22899728997289973
  - -0.25757575757575757
  - -0.23850574712643677
  - -0.2536873156342183
  test_jaccard_macro:
  - 0.2574557805819665
  - 0.2814545625730069
  - 0.1940375034125034
  - 0.27604617604617604
  - 0.26766117510966125
  test_jaccard_micro:
  - 0.2594142259414226
  - 0.27467811158798283
  - 0.20085470085470086
  - 0.2782608695652174
  - 0.2554112554112554
  test_jaccard_samples:
  - 0.2708333333333333
  - 0.2696476964769648
  - 0.22451790633608815
  - 0.29166666666666663
  - 0.25073746312684364
  test_jaccard_weighted:
  - 0.25942554866678397
  - 0.2772847700854005
  - 0.20074796361561068
  - 0.27667256985438804
  - 0.25742584719425177
  test_label_ranking_average_precision_score:
  - 0.7736805555555553
  - 0.7613143631436314
  - 0.7247704315886135
  - 0.7840756704980844
  - 0.7206735496558507
  test_label_ranking_loss:
  - 0.19747685185185185
  - 0.19625112917795845
  - 0.24740587695133148
  - 0.18900862068965518
  - 0.24213372664700097
  test_matthews_corrcoef_macro:
  - 0.3816834724179891
  - 0.3960521106543302
  - 0.2958257362463992
  - 0.40543412280732793
  - 0.37398300785150435
  test_matthews_corrcoef_micro:
  - 0.38868431501474104
  - 0.3977458303447058
  - 0.31239305869741946
  - 0.40710623651388234
  - 0.3674546694957884
  test_matthews_corrcoef_samples:
  - 0.2824007796828764
  - 0.28731872004800274
  - 0.23096880145703794
  - 0.3021679403737258
  - 0.256029676542652
  test_matthews_corrcoef_weighted:
  - 0.3776058409138516
  - 0.38197544474601375
  - 0.29831852175941476
  - 0.39935769877354116
  - 0.34770109478176364
  test_ndgc:
  - 0.844672430195679
  - 0.8338981284977012
  - 0.8089298100177592
  - 0.8515268510290077
  - 0.8027474730810293
  test_precision_macro:
  - 0.8604833762728501
  - 0.831296992481203
  - 0.7715686274509804
  - 0.8967418546365916
  - 0.8570105820105819
  test_precision_micro:
  - 0.8611111111111112
  - 0.8311688311688312
  - 0.7833333333333333
  - 0.8648648648648649
  - 0.8194444444444444
  test_precision_samples:
  - 0.4166666666666667
  - 0.40785907859078596
  - 0.33195592286501374
  - 0.40948275862068967
  - 0.41150442477876104
  test_precision_weighted:
  - 0.8571388620572716
  - 0.8213422761449077
  - 0.7742214532871972
  - 0.8913294600136705
  - 0.8317569535459445
  test_recall_macro:
  - 0.26810370844388814
  - 0.29436134601429154
  - 0.2052419366055036
  - 0.28969410735989914
  - 0.2787315237669729
  test_recall_micro:
  - 0.27074235807860264
  - 0.2909090909090909
  - 0.21266968325791855
  - 0.2909090909090909
  - 0.2706422018348624
  test_recall_samples:
  - 0.2763888888888889
  - 0.2831978319783198
  - 0.23140495867768593
  - 0.3017241379310344
  - 0.2522123893805309
  test_recall_weighted:
  - 0.27074235807860264
  - 0.2909090909090909
  - 0.21266968325791855
  - 0.2909090909090909
  - 0.2706422018348624
  test_roc_auc_macro:
  - 0.7927716059732267
  - 0.8049809414145819
  - 0.7173880111591808
  - 0.8118637399067755
  - 0.7809570092090957
  test_roc_auc_micro:
  - 0.8115155773352662
  - 0.8191733941733942
  - 0.732001254424085
  - 0.828590527119939
  - 0.7955325089748704
  test_roc_auc_samples:
  - 0.8025231481481482
  - 0.8037488708220416
  - 0.7525941230486686
  - 0.8109913793103447
  - 0.7578662733529989
  test_roc_auc_weighted:
  - 0.7940484233378773
  - 0.7970471531682539
  - 0.7158784471339197
  - 0.8026628110552538
  - 0.776420213975758
start: 2023-11-27 23:14:53.324913
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
