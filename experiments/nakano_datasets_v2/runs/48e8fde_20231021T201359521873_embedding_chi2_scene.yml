active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AmpmZmZnZPwCamZmZmdk/ADMzMzMz478AMzMzMzPjvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyb8AmpmZmZnJvwCamZmZmcm/gJmZmZmZ6T8AmpmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwAzMzMzM+O/AJqZmZmZ2T8AmpmZmZnZPw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b8AmZmZmZnZv4AzMzMzM+M/AJmZmZmZ2b+AMzMzMzPjPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b+AMzMzMzPjPwCZmZmZmdm/AJmZmZmZ2b+AMzMzMzPjPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT8AmpmZmZnJPwCamZmZmck/gJmZmZmZ6b8AmpmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gMzMzMzMBMDAmZmZmZkVQABnZmZmZvY/gMzMzMzMDMAAMjMzMzPjvw==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 20:28:26.973353
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_pvalue
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_chi2
  params:
    memory: estimators_cache
hash: 48e8fde569c0705fc5ae1d2393e6bc745299246fc81d78ad88239a5788918959
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/48e8fde_20231021T201359521873_embedding_chi2_scene.yml
results:
  fit_time:
  - 558.2502253055573
  - 529.8887882232666
  - 562.1633751392365
  - 573.6230368614197
  - 627.6875138282776
  score_time:
  - 167.60532093048096
  - 197.92538619041443
  - 203.81087684631348
  - 166.77647185325623
  - 207.81947827339172
  test_average_precision_macro:
  - 0.8329172669632089
  - 0.8281996304655985
  - 0.8257707541435941
  - 0.8542549483596097
  - 0.8129415895828044
  test_average_precision_micro:
  - 0.8386640390219582
  - 0.8338144940548143
  - 0.8354638014757116
  - 0.8640211863673622
  - 0.8151168855441109
  test_average_precision_samples:
  - 0.8716597796143251
  - 0.8642857142857142
  - 0.87
  - 0.8851202749140894
  - 0.8481327800829874
  test_average_precision_weighted:
  - 0.8207610698812599
  - 0.8173813078255512
  - 0.8127861241518293
  - 0.8418708320474223
  - 0.8024762285166421
  test_coverage_error:
  - -1.43801652892562
  - -1.5
  - -1.4458333333333333
  - -1.3752577319587629
  - -1.4937759336099585
  test_f1_macro:
  - 0.6258242210782058
  - 0.6176439670238268
  - 0.6114648524588883
  - 0.6450497744164664
  - 0.5957839119394402
  test_f1_micro:
  - 0.6384039900249376
  - 0.6330390920554855
  - 0.6246851385390428
  - 0.6541353383458646
  - 0.6102564102564102
  test_f1_samples:
  - 0.5151515151515151
  - 0.507703081232493
  - 0.5013888888888889
  - 0.5233676975945016
  - 0.4785615491009681
  test_f1_weighted:
  - 0.6016458109965803
  - 0.5953884656138703
  - 0.5903413386241303
  - 0.6209855362164953
  - 0.5736741055102181
  test_hamming_loss:
  - -0.09986225895316804
  - -0.10189075630252101
  - -0.10347222222222222
  - -0.09484536082474226
  - -0.10511756569847856
  test_jaccard_macro:
  - 0.4915646217002505
  - 0.4817031286356676
  - 0.47549370261932905
  - 0.509894361643915
  - 0.4567205939834816
  test_jaccard_micro:
  - 0.46886446886446886
  - 0.46309963099630996
  - 0.4542124542124542
  - 0.4860335195530726
  - 0.43911439114391143
  test_jaccard_samples:
  - 0.5092975206611571
  - 0.5
  - 0.49375
  - 0.5161512027491408
  - 0.47199170124481327
  test_jaccard_weighted:
  - 0.4683623674101138
  - 0.4612174809659721
  - 0.45507857965423576
  - 0.48673919773958063
  - 0.43617906772667925
  test_label_ranking_average_precision_score:
  - 0.8716597796143248
  - 0.8642857142857141
  - 0.8699999999999994
  - 0.8851202749140893
  - 0.8481327800829874
  test_label_ranking_loss:
  - 0.07117768595041322
  - 0.07935924369747899
  - 0.07171875
  - 0.05984536082474227
  - 0.08246887966804979
  test_matthews_corrcoef_macro:
  - 0.6194870013938591
  - 0.6161403764306997
  - 0.6032516399040205
  - 0.6416739728212899
  - 0.5992749912416239
  test_matthews_corrcoef_micro:
  - 0.6210723021687786
  - 0.618744258964282
  - 0.6084229462635765
  - 0.6432774490937764
  - 0.5985948944079618
  test_matthews_corrcoef_samples:
  - 0.501726273302801
  - 0.4951293406989647
  - 0.4874954040390084
  - 0.5140130396622133
  - 0.4661834592170602
  test_matthews_corrcoef_weighted:
  - 0.598451991515857
  - 0.5974786974121219
  - 0.5826569438705802
  - 0.620112345007494
  - 0.5812155273549545
  test_ndgc:
  - 0.9056578194046564
  - 0.9003922172239678
  - 0.9043410134811578
  - 0.915550827360718
  - 0.8879433659862054
  test_precision_macro:
  - 0.8881275834677093
  - 0.9066846092074545
  - 0.8727338543991539
  - 0.9162537985702034
  - 0.912930402930403
  test_precision_micro:
  - 0.8982456140350877
  - 0.9094202898550725
  - 0.8953068592057761
  - 0.9321428571428572
  - 0.9015151515151515
  test_precision_samples:
  - 0.5268595041322314
  - 0.523109243697479
  - 0.5166666666666667
  - 0.5381443298969072
  - 0.491701244813278
  test_precision_weighted:
  - 0.8845793473545499
  - 0.9052140397400873
  - 0.8617575293545546
  - 0.9098198878824173
  - 0.9134730385893177
  test_recall_macro:
  - 0.5192270854600953
  - 0.5065571745022568
  - 0.5002358165490072
  - 0.5272185758933156
  - 0.48198535650644164
  test_recall_micro:
  - 0.4951644100580271
  - 0.48549323017408125
  - 0.4796905222437137
  - 0.5038610038610039
  - 0.46124031007751937
  test_recall_samples:
  - 0.5092975206611571
  - 0.5
  - 0.49375
  - 0.5161512027491408
  - 0.47199170124481327
  test_recall_weighted:
  - 0.4951644100580271
  - 0.48549323017408125
  - 0.4796905222437137
  - 0.5038610038610039
  - 0.46124031007751937
  test_roc_auc_macro:
  - 0.9434467720628389
  - 0.9371032739403948
  - 0.9414907081837982
  - 0.9509533226464996
  - 0.9370407982640317
  test_roc_auc_micro:
  - 0.9498881352004207
  - 0.9439145992228324
  - 0.9486522967312804
  - 0.9582545098849446
  - 0.9428645303160806
  test_roc_auc_samples:
  - 0.9288223140495868
  - 0.9206407563025211
  - 0.92828125
  - 0.9401546391752578
  - 0.9175311203319502
  test_roc_auc_weighted:
  - 0.9382901296687675
  - 0.9314734691219637
  - 0.9359071118488549
  - 0.945706950715879
  - 0.9318337282484973
start: 2023-10-21 20:13:59.521873
wrapper: null
