active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyT+AmZmZmZnJP4CZmZmZmck/oJmZmZmZ6b+AmZmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            aGZmZmZmDkAwMzMzMzPzv2hmZmZmZgZAMDMzMzMz87/MzMzMzMwQwA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            MDMzMzMz8z+AmZmZmZnJP9DMzMzMzPy/oJmZmZmZ6b8wMzMzMzPzPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT8AmpmZmZnJP4CZmZmZmem/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ZmZmZmZmEsA0MzMzMzMLQKCZmZmZmdk/NDMzMzMzA0CYmZmZmZn5vw==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mpmZmZmZAUA0MzMzMzPzP5qZmZmZmQlAZmZmZmZmBsBmZmZmZmYOwA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AJmZmZmZyb/AmZmZmZnpP+DMzMzMzPw/IDMzMzMz878gMzMzMzPzvw==
      n_labels: 7
      n_samples: 194
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: flags
  params:
    path: nakano_datasets_v2/datasets/MLC/flags.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:48:16.168770
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding
  params:
    memory: estimators_cache
hash: 53cf2009e82f6d9609bb4a042db70731ee62d31557b3e7a5789219b9e1edd967
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/53cf200_20231021T174657786759_embedding_flags.yml
results:
  fit_time:
  - 43.33840870857239
  - 44.751779079437256
  - 41.585710287094116
  - 43.70119547843933
  - 41.99936628341675
  score_time:
  - 31.1325101852417
  - 31.46516227722168
  - 33.00759029388428
  - 34.25191283226013
  - 29.948782682418823
  test_average_precision_macro:
  - 0.7402064466741599
  - 0.7554852510150462
  - 0.7030848219432839
  - 0.7707493920926932
  - 0.78050295792932
  test_average_precision_micro:
  - 0.7384019978561511
  - 0.8374820519795709
  - 0.8197772037528861
  - 0.7927378835468737
  - 0.7550565195076644
  test_average_precision_samples:
  - 0.8189000814000814
  - 0.8472692147034251
  - 0.8460199485199484
  - 0.8340297619047619
  - 0.8205714285714285
  test_average_precision_weighted:
  - 0.7820945368155237
  - 0.8371555613934836
  - 0.8193125581856857
  - 0.8201055375483344
  - 0.7994693338172867
  test_coverage_error:
  - -4.6923076923076925
  - -4.473684210526316
  - -4.54054054054054
  - -4.775
  - -4.825
  test_f1_macro:
  - 0.5244930230156578
  - 0.5900613250070895
  - 0.5777258989720291
  - 0.5411717068762959
  - 0.582325739983993
  test_f1_micro:
  - 0.7209302325581395
  - 0.75
  - 0.7704280155642024
  - 0.739622641509434
  - 0.7266187050359713
  test_f1_samples:
  - 0.6990823990823991
  - 0.732097288676236
  - 0.7544070044070044
  - 0.7005014430014429
  - 0.717121212121212
  test_f1_weighted:
  - 0.6599480402313465
  - 0.7248689000371057
  - 0.7375961995144948
  - 0.6831582297331099
  - 0.6779335040803572
  test_hamming_loss:
  - -0.26373626373626374
  - -0.24060150375939848
  - -0.2277992277992278
  - -0.24642857142857144
  - -0.2714285714285714
  test_jaccard_macro:
  - 0.4266125179168658
  - 0.46963059823471726
  - 0.47198466912752624
  - 0.4442039442039442
  - 0.4657738095238095
  test_jaccard_micro:
  - 0.5636363636363636
  - 0.6
  - 0.6265822784810127
  - 0.5868263473053892
  - 0.5706214689265536
  test_jaccard_samples:
  - 0.5931623931623932
  - 0.6083333333333334
  - 0.6576576576576577
  - 0.5900000000000001
  - 0.5957142857142858
  test_jaccard_weighted:
  - 0.5497532688634812
  - 0.5967864285842988
  - 0.6209103368478368
  - 0.567897493453049
  - 0.5526978417266186
  test_label_ranking_average_precision_score:
  - 0.8189000814000815
  - 0.8472692147034251
  - 0.8460199485199482
  - 0.834029761904762
  - 0.8205714285714286
  test_label_ranking_loss:
  - 0.20213675213675217
  - 0.16447368421052633
  - 0.1716216216216216
  - 0.19583333333333333
  - 0.2170833333333333
  test_matthews_corrcoef_macro:
  - 0.16801366854503566
  - 0.20184802310011976
  - 0.20784555145124786
  - 0.19428714086459425
  - 0.21546854922197273
  test_matthews_corrcoef_micro:
  - 0.47093023255813954
  - 0.5182019740086017
  - 0.5443974009322116
  - 0.506206946520139
  - 0.4571151589366804
  test_matthews_corrcoef_samples:
  - 0.4346459249363945
  - 0.4606193042130289
  - 0.5439385084085738
  - 0.47864384149114336
  - 0.42132679130293393
  test_matthews_corrcoef_weighted:
  - 0.15666476865675477
  - 0.18093673377586625
  - 0.18510565878435833
  - 0.19660049169660368
  - 0.18093264235391435
  test_ndgc:
  - 0.890136051209556
  - 0.9161746505000944
  - 0.9053078493234131
  - 0.9074573067905437
  - 0.8942101695489502
  test_precision_macro:
  - 0.5046071940481879
  - 0.6283979178716022
  - 0.688393673176282
  - 0.5404761904761906
  - 0.6580486542443064
  test_precision_micro:
  - 0.7209302325581395
  - 0.7441860465116279
  - 0.7674418604651163
  - 0.7538461538461538
  - 0.7266187050359713
  test_precision_samples:
  - 0.7085470085470086
  - 0.7241228070175438
  - 0.7576576576576576
  - 0.7158333333333333
  - 0.72125
  test_precision_weighted:
  - 0.6231896403787202
  - 0.7221513808749616
  - 0.7853187426556992
  - 0.6654320987654322
  - 0.6977674382233343
  test_recall_macro:
  - 0.564250700280112
  - 0.58843537414966
  - 0.5946311858076563
  - 0.5614035087719299
  - 0.6032913165266107
  test_recall_micro:
  - 0.7209302325581395
  - 0.7559055118110236
  - 0.7734375
  - 0.725925925925926
  - 0.7266187050359713
  test_recall_samples:
  - 0.7012820512820513
  - 0.7569548872180452
  - 0.7756756756756756
  - 0.7066666666666667
  - 0.7311904761904762
  test_recall_weighted:
  - 0.7209302325581395
  - 0.7559055118110236
  - 0.7734375
  - 0.725925925925926
  - 0.7266187050359713
  test_roc_auc_macro:
  - 0.7470589204087948
  - 0.7949093912685579
  - 0.707761806854415
  - 0.7452730764572595
  - 0.7429832062446751
  test_roc_auc_micro:
  - 0.7998492678725236
  - 0.8520364810513793
  - 0.8512046755725191
  - 0.8107279693486591
  - 0.7960100005102302
  test_roc_auc_samples:
  - 0.7978632478632478
  - .nan
  - 0.8283783783783782
  - 0.8041666666666668
  - .nan
  test_roc_auc_weighted:
  - 0.6968843546447187
  - 0.7701061323691273
  - 0.6889575603633267
  - 0.7347430550281427
  - 0.6993289605396975
start: 2023-10-21 17:46:57.786759
wrapper: null
