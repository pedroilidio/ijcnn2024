active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AmpmZmZnZPwCamZmZmdk/ADMzMzMz478AMzMzMzPjvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyb8AmpmZmZnJv4CZmZmZmek/AJqZmZmZyb8AmpmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZ2T8AmpmZmZnZPwAzMzMzM+O/AJqZmZmZ2T8AMzMzMzPjvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gDMzMzMz4z8AmZmZmZnZvwCZmZmZmdm/gDMzMzMz4z8AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b+AMzMzMzPjP4AzMzMzM+M/AJmZmZmZ2b8AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT+AmZmZmZnpvwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          ADIzMzMz479AZmZmZmYWwMCZmZmZmRFAgDMzMzMzC0AAmZmZmZn5vw==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-11-28 04:32:59.621498
estimator:
  call: nakano_datasets_v2.estimators.cascade_weak_label_tree_embedder_pvalue
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler:
            call: deep_forest.weak_labels.PositiveUnlabeledImputer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesClassifier
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  class_weight: null
                  criterion: gini
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: 0.9
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: true
                  random_state: 0
                  verbose: true
                  warm_start: false
              sampling_strategy: auto
              threshold: 0.8
              use_oob_proba: true
              verbose: true
              weight_proba: true
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt_embedder
                - call: sklearn.pipeline.Pipeline
                  params:
                    memory: null
                    steps:
                    - - xt
                      - call: deep_forest.tree_embedder.ForestEmbedder
                        params:
                          estimator:
                            call: sklearn.ensemble._forest.ExtraTreesRegressor
                            params:
                              bootstrap: true
                              ccp_alpha: 0.0
                              criterion: squared_error
                              max_depth: null
                              max_features: sqrt
                              max_leaf_nodes: null
                              max_samples: 0.5
                              min_impurity_decrease: 0.0
                              min_samples_leaf: 5
                              min_samples_split: 2
                              min_weight_fraction_leaf: 0.0
                              n_estimators: 150
                              n_jobs: 14
                              oob_score: false
                              random_state: 0
                              verbose: true
                              warm_start: false
                          max_node_size: 0.8
                          max_pvalue: 0.05
                          method: path
                          node_weights: log_node_size
                    - - densifier
                      - call: nakano_datasets_v2.estimators.Densifier
                        params: {}
                    - - pca
                      - call: sklearn.decomposition._pca.PCA
                        params:
                          copy: true
                          iterated_power: auto
                          n_components: 0.8
                          n_oversamples: 10
                          power_iteration_normalizer: auto
                          random_state: 0
                          svd_solver: auto
                          tol: 0.0
                          whiten: false
                    verbose: false
              - - rf_embedder
                - call: sklearn.pipeline.Pipeline
                  params:
                    memory: null
                    steps:
                    - - rf
                      - call: deep_forest.tree_embedder.ForestEmbedder
                        params:
                          estimator:
                            call: sklearn.ensemble._forest.RandomForestRegressor
                            params:
                              bootstrap: true
                              ccp_alpha: 0.0
                              criterion: squared_error
                              max_depth: null
                              max_features: sqrt
                              max_leaf_nodes: null
                              max_samples: 0.5
                              min_impurity_decrease: 0.0
                              min_samples_leaf: 5
                              min_samples_split: 2
                              min_weight_fraction_leaf: 0.0
                              n_estimators: 150
                              n_jobs: 14
                              oob_score: false
                              random_state: 0
                              verbose: true
                              warm_start: false
                          max_node_size: 0.95
                          max_pvalue: 0.05
                          method: path
                          node_weights: log_node_size
                    - - densifier
                      - call: nakano_datasets_v2.estimators.Densifier
                        params: {}
                    - - pca
                      - call: sklearn.decomposition._pca.PCA
                        params:
                          copy: true
                          iterated_power: auto
                          n_components: 0.8
                          n_oversamples: 10
                          power_iteration_normalizer: auto
                          random_state: 0
                          svd_solver: auto
                          tol: 0.0
                          whiten: false
                    verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_weak_chi2
  params:
    memory: estimators_cache
hash: c3b90b94f0c0b99ee2a1bccf8056dc348aca906c5e82b10d4b935c23f1468305
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/c3b90b9_20231128T041727157639_embedding_weak_chi2_scene.yml
results:
  fit_time:
  - 828.8765466213226
  - 866.3823864459991
  - 823.5290083885193
  - 796.2987973690033
  - 817.4471690654755
  score_time:
  - 59.43825840950012
  - 21.67801785469055
  - 27.992474794387817
  - 26.298455476760864
  - 24.93641471862793
  test_average_precision_macro:
  - 0.8375384575570902
  - 0.8023670163352308
  - 0.823372280483538
  - 0.8280264595557285
  - 0.8194581512642878
  test_average_precision_micro:
  - 0.7945449283045813
  - 0.8067219601477361
  - 0.8217763824435512
  - 0.8362956564001227
  - 0.8346525627411583
  test_average_precision_samples:
  - 0.8688450899031811
  - 0.8471937029431896
  - 0.8647099930118798
  - 0.8800906555090655
  - 0.8646652864044169
  test_average_precision_weighted:
  - 0.8270470567482213
  - 0.7914875620248664
  - 0.8131359949692246
  - 0.8162442360493626
  - 0.805941382620194
  test_coverage_error:
  - -1.454356846473029
  - -1.5256673511293635
  - -1.4821802935010482
  - -1.4205020920502092
  - -1.453416149068323
  test_f1_macro:
  - 0.38801718031391114
  - 0.0045045045045045045
  - 0.04769759450171821
  - 0.034055477875702594
  - 0.0038314176245210726
  test_f1_micro:
  - 0.43373493975903615
  - 0.003861003861003861
  - 0.04914933837429111
  - 0.034220532319391636
  - 0.003846153846153846
  test_f1_samples:
  - 0.2894190871369295
  - 0.002053388090349076
  - 0.02585604472396925
  - 0.01813110181311018
  - 0.002070393374741201
  test_f1_weighted:
  - 0.36005003132797
  - 0.0038161953055570073
  - 0.045926636298249814
  - 0.033310010120911386
  - 0.00380927070183598
  test_hamming_loss:
  - -0.13001383125864455
  - -0.17659137577002054
  - -0.17575122292103423
  - -0.17712691771269176
  - -0.178743961352657
  test_jaccard_macro:
  - 0.2964740600207098
  - 0.00228310502283105
  - 0.026101532567049807
  - 0.017786980991823298
  - 0.001937984496124031
  test_jaccard_micro:
  - 0.27692307692307694
  - 0.0019342359767891683
  - 0.025193798449612403
  - 0.017408123791102514
  - 0.0019267822736030828
  test_jaccard_samples:
  - 0.28492392807745504
  - 0.002053388090349076
  - 0.025157232704402517
  - 0.01778242677824268
  - 0.002070393374741201
  test_jaccard_weighted:
  - 0.2743324720068906
  - 0.0019342359767891683
  - 0.025193798449612403
  - 0.017408123791102514
  - 0.0019267822736030828
  test_label_ranking_average_precision_score:
  - 0.8688450899031807
  - 0.8471937029431891
  - 0.86470999301188
  - 0.8800906555090653
  - 0.8646652864044165
  test_label_ranking_loss:
  - 0.07370331950207469
  - 0.0902977412731006
  - 0.07824947589098531
  - 0.0653765690376569
  - 0.07324016563146998
  test_matthews_corrcoef_macro:
  - 0.4055452436102261
  - 0.018004014560049724
  - 0.08308439871032626
  - 0.08283744067223996
  - 0.01631064961271655
  test_matthews_corrcoef_micro:
  - 0.48195901905467137
  - 0.039906761943451996
  - 0.14403386165722573
  - 0.11964518348455788
  - 0.03977766578764015
  test_matthews_corrcoef_samples:
  - 0.28679809124461425
  - 0.002053388090349076
  - 0.025712601811461955
  - 0.018059530401744094
  - 0.002070393374741201
  test_matthews_corrcoef_weighted:
  - 0.3770919761398497
  - 0.015252917557643672
  - 0.07856552610710374
  - 0.0799654007459321
  - 0.016216368401082353
  test_ndgc:
  - 0.9038469740244288
  - 0.8870607764899796
  - 0.9000307364672954
  - 0.9121476133652948
  - 0.9006537586084784
  test_precision_macro:
  - 0.6553672316384181
  - 0.16666666666666666
  - 0.3333333333333333
  - 0.5
  - 0.16666666666666666
  test_precision_micro:
  - 0.972972972972973
  - 1.0
  - 1.0
  - 1.0
  - 1.0
  test_precision_samples:
  - 0.2987551867219917
  - 0.002053388090349076
  - 0.027253668763102725
  - 0.01882845188284519
  - 0.002070393374741201
  test_precision_weighted:
  - 0.6146695572198134
  - 0.14119922630560927
  - 0.3081395348837209
  - 0.4738878143133462
  - 0.16570327552986513
  test_recall_macro:
  - 0.3012113554556797
  - 0.00228310502283105
  - 0.026101532567049807
  - 0.017786980991823298
  - 0.001937984496124031
  test_recall_micro:
  - 0.27906976744186046
  - 0.0019342359767891683
  - 0.025193798449612403
  - 0.017408123791102514
  - 0.0019267822736030828
  test_recall_samples:
  - 0.28492392807745504
  - 0.002053388090349076
  - 0.025157232704402517
  - 0.01778242677824268
  - 0.002070393374741201
  test_recall_weighted:
  - 0.27906976744186046
  - 0.0019342359767891683
  - 0.025193798449612403
  - 0.017408123791102514
  - 0.0019267822736030828
  test_roc_auc_macro:
  - 0.9388543082601982
  - 0.9297554475868273
  - 0.9398232437164903
  - 0.9408204976804172
  - 0.9383252668963927
  test_roc_auc_micro:
  - 0.9290302899799024
  - 0.9369640135597582
  - 0.9436497551497849
  - 0.9484560255440911
  - 0.948610230331068
  test_roc_auc_samples:
  - 0.9262966804979254
  - 0.9097022587268994
  - 0.9217505241090147
  - 0.9346234309623431
  - 0.92675983436853
  test_roc_auc_weighted:
  - 0.9331441328319805
  - 0.9251170355915591
  - 0.935432246048482
  - 0.9351423675769768
  - 0.9318669881915698
start: 2023-11-28 04:17:27.157639
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
