active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            mJmZmZmZ2b80MzMzMzPjP5iZmZmZmdm/mJmZmZmZ2b80MzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            kJmZmZmZ2b+QmZmZmZnZvzgzMzMzM+M/kJmZmZmZ2b84MzMzMzPjPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            IDMzMzMz478gMzMzMzPjv8CZmZmZmdk/wJmZmZmZ2T/AmZmZmZnZPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+AmZmZmZnJv6CZmZmZmek/gJmZmZmZyb+AmZmZmZnJvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          wMzMzMzMDMBAMzMzMzMDQACamZmZmdk/AJqZmZmZ2T8AmpmZmZnZPw==
      n_labels: 6
      n_samples: 207
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: VirusGO
  params:
    path: nakano_datasets_v2/datasets/MLC/VirusGO.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 19:19:24.434285
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.5
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 7ee120b15ae16cffbbc5436fa196c72c7f006b59e1089edcc51d1079da8896bb
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/7ee120b_20231127T191723644880_embedding_proba_VirusGO.yml
results:
  fit_time:
  - 67.19967746734619
  - 63.0421416759491
  - 65.81839394569397
  - 62.4695725440979
  - 61.1246235370636
  score_time:
  - 52.16171669960022
  - 57.06664776802063
  - 52.85318684577942
  - 57.59158992767334
  - 57.9423987865448
  test_average_precision_macro:
  - 0.8618329224271056
  - 0.9099501647288489
  - 0.9932897397741147
  - 0.871309976320448
  - 0.8366445703748876
  test_average_precision_micro:
  - 0.8250175346729158
  - 0.8409380551527857
  - 0.965391394708276
  - 0.8011150803423986
  - 0.8371209934335613
  test_average_precision_samples:
  - 0.8962962962962961
  - 0.9252136752136751
  - 0.9837398373983739
  - 0.9308943089430893
  - 0.9113821138211381
  test_average_precision_weighted:
  - 0.853555125721053
  - 0.8739846976316139
  - 0.9866732956919032
  - 0.8346259858233998
  - 0.8504558392924182
  test_coverage_error:
  - -1.4444444444444444
  - -1.5128205128205128
  - -1.2439024390243902
  - -1.3902439024390243
  - -1.5609756097560976
  test_f1_macro:
  - 0.09330143540669855
  - 0.049999999999999996
  - 0.17
  - 0.09523809523809523
  - 0.05360623781676413
  test_f1_micro:
  - 0.20689655172413793
  - 0.10714285714285714
  - 0.39344262295081966
  - 0.20338983050847456
  - 0.11538461538461538
  test_f1_samples:
  - 0.11851851851851851
  - 0.059829059829059825
  - 0.2682926829268293
  - 0.13008130081300812
  - 0.04878048780487805
  test_f1_weighted:
  - 0.18503864556496136
  - 0.10392156862745097
  - 0.3391836734693877
  - 0.1904761904761905
  - 0.11158849504714165
  test_hamming_loss:
  - -0.17037037037037037
  - -0.21367521367521367
  - -0.15040650406504066
  - -0.1910569105691057
  - -0.18699186991869918
  test_jaccard_macro:
  - 0.05827886710239651
  - 0.02729044834307992
  - 0.12316176470588236
  - 0.05675954592363261
  - 0.02941176470588235
  test_jaccard_micro:
  - 0.11538461538461539
  - 0.05660377358490566
  - 0.24489795918367346
  - 0.11320754716981132
  - 0.061224489795918366
  test_jaccard_samples:
  - 0.1111111111111111
  - 0.05128205128205128
  - 0.25609756097560976
  - 0.12195121951219512
  - 0.036585365853658534
  test_jaccard_weighted:
  - 0.11538461538461539
  - 0.0567595459236326
  - 0.24489795918367346
  - 0.1135190918472652
  - 0.061224489795918366
  test_label_ranking_average_precision_score:
  - 0.8962962962962961
  - 0.9252136752136751
  - 0.9837398373983739
  - 0.9308943089430896
  - 0.9113821138211381
  test_label_ranking_loss:
  - 0.049444444444444444
  - 0.0391025641025641
  - 0.007926829268292683
  - 0.03170731707317073
  - 0.06890243902439024
  test_matthews_corrcoef_macro:
  - 0.10639664049258568
  - 0.03190257629405135
  - 0.16612692296786377
  - 0.07460715778461595
  - 0.07615606748734498
  test_matthews_corrcoef_micro:
  - 0.30867413283221556
  - 0.13673955017167633
  - 0.4540647284290523
  - 0.24543437384427116
  - 0.22278839440663809
  test_matthews_corrcoef_samples:
  - 0.11699802364594115
  - 0.04781823241198338
  - 0.2657894291731958
  - 0.11865636741627687
  - 0.04627723405124457
  test_matthews_corrcoef_weighted:
  - 0.21225181859062958
  - 0.06872914476784704
  - 0.3322863986808105
  - 0.1492143155692319
  - 0.15852895681039159
  test_ndgc:
  - 0.9271464321865766
  - 0.9454901631155747
  - 0.9890402571395035
  - 0.949038337110253
  - 0.9352601368403197
  test_precision_macro:
  - 0.3333333333333333
  - 0.2222222222222222
  - 0.3333333333333333
  - 0.25
  - 0.3333333333333333
  test_precision_micro:
  - 1.0
  - 0.6
  - 1.0
  - 0.75
  - 1.0
  test_precision_samples:
  - 0.13333333333333333
  - 0.07692307692307693
  - 0.2926829268292683
  - 0.14634146341463414
  - 0.07317073170731707
  test_precision_weighted:
  - 0.6730769230769231
  - 0.4640522875816993
  - 0.673469387755102
  - 0.5
  - 0.6938775510204082
  test_recall_macro:
  - 0.05827886710239651
  - 0.028322440087145972
  - 0.12316176470588236
  - 0.0588235294117647
  - 0.02941176470588235
  test_recall_micro:
  - 0.11538461538461539
  - 0.058823529411764705
  - 0.24489795918367346
  - 0.11764705882352941
  - 0.061224489795918366
  test_recall_samples:
  - 0.1111111111111111
  - 0.05128205128205128
  - 0.25609756097560976
  - 0.12195121951219512
  - 0.036585365853658534
  test_recall_weighted:
  - 0.11538461538461539
  - 0.058823529411764705
  - 0.24489795918367346
  - 0.11764705882352941
  - 0.061224489795918366
  test_roc_auc_macro:
  - 0.952980612336114
  - 0.9653064845466806
  - 0.9958578431372548
  - 0.9605508870214753
  - 0.9160780528427587
  test_roc_auc_micro:
  - 0.9537755822159492
  - 0.969248901746491
  - 0.9932663420698228
  - 0.9706385118149823
  - 0.9402258365275045
  test_roc_auc_samples:
  - 0.9505555555555554
  - 0.9608974358974359
  - 0.9920731707317072
  - 0.9682926829268294
  - 0.9310975609756097
  test_roc_auc_weighted:
  - 0.9281926249593131
  - 0.9404454205924795
  - 0.991734693877551
  - 0.9425221068819685
  - 0.9070089039476794
start: 2023-11-27 19:17:23.644880
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop50
  params:
    drop: 0.5
    random_state: 0
