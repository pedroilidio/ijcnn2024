active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT+AmZmZmZnpvwCamZmZmck/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/wJmZmZmZ6T8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/gJmZmZmZ2b9AMzMzMzPjPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ+T+YmZmZmZkVwKCZmZmZmfk/gJmZmZmZ2b/QzMzMzMwEQA==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJv8CZmZmZmek/AJmZmZmZyb8AmZmZmZnJvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gDMzMzMz4z+QmZmZmZkRwMCZmZmZmfk/cGZmZmZmEkAgMzMzMzMDwA==
      n_labels: 6
      n_samples: 593
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: emotions
  params:
    path: nakano_datasets_v2/datasets/MLC/emotions.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:36:54.160270
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.ExtraTreesRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.8
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        - - rf
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.RandomForestRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.95
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_proba
  params:
    memory: estimators_cache
hash: f5255472239ab12dd884f38d6ddafc3764d2bfd94ff3fcbce3f3c99a4d75b13f
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/f525547_20231021T183430296410_embedding_proba_emotions.yml
results:
  fit_time:
  - 64.71449184417725
  - 63.410173416137695
  - 61.89605402946472
  - 62.53065609931946
  - 69.85232710838318
  score_time:
  - 76.94963932037354
  - 76.75611138343811
  - 72.6490466594696
  - 72.89949226379395
  - 68.33564710617065
  test_average_precision_macro:
  - 0.7385501341324808
  - 0.7320937435320283
  - 0.7082866212893671
  - 0.748846908075901
  - 0.6632791239522208
  test_average_precision_micro:
  - 0.7425299314003864
  - 0.7375753653335149
  - 0.7157687895206234
  - 0.7449817972994217
  - 0.6682534107779541
  test_average_precision_samples:
  - 0.8322504708097928
  - 0.8107046070460705
  - 0.7935660018993351
  - 0.8339181286549708
  - 0.7690541781450874
  test_average_precision_weighted:
  - 0.7371087175068423
  - 0.7322112166968289
  - 0.7109609719721331
  - 0.7447996443360378
  - 0.6705408151381378
  test_coverage_error:
  - -2.5847457627118646
  - -2.747967479674797
  - -2.8119658119658117
  - -2.6666666666666665
  - -2.8512396694214877
  test_f1_macro:
  - 0.6930613149830552
  - 0.6967498456155443
  - 0.7012572033881574
  - 0.6992160026345716
  - 0.6115125859040668
  test_f1_micro:
  - 0.7020785219399537
  - 0.7096774193548389
  - 0.7146067415730338
  - 0.7047619047619048
  - 0.6420323325635103
  test_f1_samples:
  - 0.6779661016949153
  - 0.6761517615176152
  - 0.6806267806267807
  - 0.6707602339181287
  - 0.5782369146005508
  test_f1_weighted:
  - 0.6988047133832659
  - 0.7005469967900325
  - 0.7095195542786291
  - 0.7050077079433971
  - 0.6297369323705928
  test_hamming_loss:
  - -0.18220338983050846
  - -0.18292682926829268
  - -0.18091168091168092
  - -0.18128654970760233
  - -0.21349862258953167
  test_jaccard_macro:
  - 0.533770096023741
  - 0.5466664468621416
  - 0.553827640935655
  - 0.5450080515297907
  - 0.45357316887430743
  test_jaccard_micro:
  - 0.5409252669039146
  - 0.55
  - 0.5559440559440559
  - 0.5441176470588235
  - 0.47278911564625853
  test_jaccard_samples:
  - 0.5939265536723164
  - 0.592140921409214
  - 0.6032763532763532
  - 0.5840643274853801
  - 0.5110192837465564
  test_jaccard_weighted:
  - 0.5405448308742158
  - 0.5499567273339054
  - 0.5628468058965299
  - 0.5515624319972146
  - 0.4739105715461677
  test_label_ranking_average_precision_score:
  - 0.8322504708097928
  - 0.8107046070460704
  - 0.793566001899335
  - 0.8339181286549706
  - 0.7690541781450871
  test_label_ranking_loss:
  - 0.14032485875706216
  - 0.15822041553748872
  - 0.17393162393162395
  - 0.1270224171539961
  - 0.1876262626262626
  test_matthews_corrcoef_macro:
  - 0.5613964017747558
  - 0.5675813107359523
  - 0.5692926349275501
  - 0.5733227312834054
  - 0.46337444588927706
  test_matthews_corrcoef_micro:
  - 0.5709517838142788
  - 0.5763296113825823
  - 0.5822803793741669
  - 0.5765334046993297
  - 0.4899567016459646
  test_matthews_corrcoef_samples:
  - 0.5919709988479933
  - 0.5760707465818294
  - 0.5849503270331625
  - 0.5860948995929827
  - 0.4587782956107389
  test_matthews_corrcoef_weighted:
  - 0.5594698754253847
  - 0.5651003963802516
  - 0.5724476617268702
  - 0.5730180656071661
  - 0.4779300170113792
  test_ndgc:
  - 0.8852967627848121
  - 0.8723832556099812
  - 0.8578405838142569
  - 0.8885017336606905
  - 0.8394167838383901
  test_precision_macro:
  - 0.7069234362017301
  - 0.6939417591224347
  - 0.6945325986274261
  - 0.7615653957037196
  - 0.6204187556417158
  test_precision_micro:
  - 0.7102803738317757
  - 0.6991525423728814
  - 0.7066666666666667
  - 0.7474747474747475
  - 0.6465116279069767
  test_precision_samples:
  - 0.7048022598870056
  - 0.6829268292682927
  - 0.7008547008547008
  - 0.7280701754385965
  - 0.5964187327823691
  test_precision_weighted:
  - 0.7094694599813798
  - 0.6935020594344065
  - 0.7004550047653497
  - 0.7590047212899597
  - 0.631459128980585
  test_recall_macro:
  - 0.6853517263007576
  - 0.7120145229176131
  - 0.7123639091799469
  - 0.6549302864318344
  - 0.612109057683487
  test_recall_micro:
  - 0.6940639269406392
  - 0.7205240174672489
  - 0.7227272727272728
  - 0.6666666666666666
  - 0.6376146788990825
  test_recall_samples:
  - 0.7245762711864406
  - 0.7222222222222222
  - 0.7165242165242165
  - 0.6842105263157895
  - 0.5991735537190083
  test_recall_weighted:
  - 0.6940639269406392
  - 0.7205240174672489
  - 0.7227272727272728
  - 0.6666666666666666
  - 0.6376146788990825
  test_roc_auc_macro:
  - 0.8646164010813866
  - 0.8530425666685696
  - 0.8475786710123875
  - 0.8685130580904747
  - 0.812675173436335
  test_roc_auc_micro:
  - 0.8734254045624749
  - 0.8659242799907344
  - 0.8618823085628066
  - 0.8818201318201317
  - 0.8330202990681211
  test_roc_auc_samples:
  - 0.8596751412429379
  - 0.8417795844625113
  - 0.8260683760683761
  - 0.8729775828460039
  - 0.8123737373737373
  test_roc_auc_weighted:
  - 0.8617304621195794
  - 0.8504170195619785
  - 0.8464202013237054
  - 0.8656071642030673
  - 0.8162007304087575
start: 2023-10-21 18:34:30.296410
wrapper: null
