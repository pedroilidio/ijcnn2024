active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            mJmZmZmZ2b+YmZmZmZnZvzQzMzMzM+M/NDMzMzMz4z+YmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            kJmZmZmZ2b+QmZmZmZnZvzgzMzMzM+M/ODMzMzMz4z+QmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ2T/AmZmZmZnZP8CZmZmZmdk/IDMzMzMz478gMzMzMzPjvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+gmZmZmZnpP4CZmZmZmcm/gJmZmZmZyb+AmZmZmZnJvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          YGZmZmZmEsCAmZmZmZn5v4BmZmZmZvY/QDMzMzMzA0BAMzMzMzMDQA==
      n_labels: 6
      n_samples: 207
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: VirusGO
  params:
    path: nakano_datasets_v2/datasets/MLC/VirusGO.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:31:08.616893
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 1.0
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding
  params:
    memory: estimators_cache
hash: 64a253f939bb8dfe9e415fdc2a67843361e5f16e5bd1268d7edf874fe98f2c04
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/64a253f_20231021T172950570797_embedding_VirusGO.yml
results:
  fit_time:
  - 41.62464737892151
  - 44.90141987800598
  - 41.37844491004944
  - 44.372679233551025
  - 43.8319034576416
  score_time:
  - 35.92306590080261
  - 24.4174964427948
  - 35.85112166404724
  - 32.26027798652649
  - 19.495176553726196
  test_average_precision_macro:
  - 0.9438618257760621
  - 0.9876946960121417
  - 0.9757050919783118
  - 0.9435015354611057
  - 0.8786613839415433
  test_average_precision_micro:
  - 0.9480560960779281
  - 0.9443954273493217
  - 0.9617975112871151
  - 0.9349421290837252
  - 0.8536429562378159
  test_average_precision_samples:
  - 0.9710144927536232
  - 0.9534883720930233
  - 0.9683333333333334
  - 0.9346153846153847
  - 0.9380341880341879
  test_average_precision_weighted:
  - 0.9550616978817671
  - 0.9759024187027283
  - 0.9846188600753584
  - 0.9561320212295443
  - 0.8938872209315296
  test_coverage_error:
  - -1.1956521739130435
  - -1.255813953488372
  - -1.425
  - -1.5128205128205128
  - -1.564102564102564
  test_f1_macro:
  - 0.5479912244618127
  - 0.48004468649629944
  - 0.4343434343434343
  - 0.697954880877082
  - 0.39179304696546075
  test_f1_micro:
  - 0.8260869565217392
  - 0.7727272727272727
  - 0.8333333333333333
  - 0.8045977011494254
  - 0.7126436781609196
  test_f1_samples:
  - 0.7644927536231884
  - 0.6434108527131782
  - 0.7666666666666666
  - 0.7264957264957265
  - 0.6538461538461539
  test_f1_weighted:
  - 0.7752182458064811
  - 0.7130624214495183
  - 0.7544836116264687
  - 0.7712688172043011
  - 0.6452890073579728
  test_hamming_loss:
  - -0.057971014492753624
  - -0.07751937984496124
  - -0.058333333333333334
  - -0.07264957264957266
  - -0.10683760683760683
  test_jaccard_macro:
  - 0.47594169246646034
  - 0.3976260094681147
  - 0.39705882352941174
  - 0.6130604288499025
  - 0.32407407407407407
  test_jaccard_micro:
  - 0.7037037037037037
  - 0.6296296296296297
  - 0.7142857142857143
  - 0.6730769230769231
  - 0.5535714285714286
  test_jaccard_samples:
  - 0.7572463768115942
  - 0.627906976744186
  - 0.7625
  - 0.717948717948718
  - 0.6367521367521367
  test_jaccard_weighted:
  - 0.7018833849329205
  - 0.6174269005847952
  - 0.7142857142857143
  - 0.6684210526315789
  - 0.5404456654456655
  test_label_ranking_average_precision_score:
  - 0.9710144927536233
  - 0.9534883720930233
  - 0.9683333333333334
  - 0.9346153846153845
  - 0.9380341880341879
  test_label_ranking_loss:
  - 0.015760869565217394
  - 0.018604651162790697
  - 0.028749999999999998
  - 0.04358974358974359
  - 0.04551282051282051
  test_matthews_corrcoef_macro:
  - 0.5320896313839143
  - 0.46892039362866983
  - 0.4295444515233055
  - 0.6726269564451369
  - 0.3522053082300011
  test_matthews_corrcoef_micro:
  - 0.7985864675565276
  - 0.7369929652600772
  - 0.8157850369311981
  - 0.774214621725871
  - 0.6693013606386004
  test_matthews_corrcoef_samples:
  - 0.7539664246094276
  - 0.6355772587938303
  - 0.7658113883008418
  - 0.7144848990786501
  - 0.6314962160406191
  test_matthews_corrcoef_weighted:
  - 0.7440677479788624
  - 0.6710938491318923
  - 0.7419868524883051
  - 0.7142028712813406
  - 0.5661720025150025
  test_ndgc:
  - 0.9793619683199922
  - 0.9656678840531588
  - 0.9800172452767377
  - 0.9533738537510539
  - 0.9546465099234973
  test_precision_macro:
  - 0.619281045751634
  - 0.6259259259259259
  - 0.5
  - 0.8137254901960785
  - 0.45979532163742687
  test_precision_micro:
  - 0.926829268292683
  - 0.8947368421052632
  - 1.0
  - 0.9459459459459459
  - 0.8857142857142857
  test_precision_samples:
  - 0.7608695652173914
  - 0.6395348837209303
  - 0.775
  - 0.7435897435897436
  - 0.6794871794871795
  test_precision_weighted:
  - 0.8202614379084968
  - 0.7995555555555555
  - 0.8163265306122449
  - 0.88
  - 0.7257928475033738
  test_recall_macro:
  - 0.5063025210084034
  - 0.42918417366946776
  - 0.39705882352941174
  - 0.6285403050108932
  - 0.35122938064114534
  test_recall_micro:
  - 0.7450980392156863
  - 0.68
  - 0.7142857142857143
  - 0.7
  - 0.5961538461538461
  test_recall_samples:
  - 0.7717391304347826
  - 0.6627906976744186
  - 0.7625
  - 0.717948717948718
  - 0.6495726495726496
  test_recall_weighted:
  - 0.7450980392156863
  - 0.68
  - 0.7142857142857143
  - 0.7
  - 0.5961538461538461
  test_roc_auc_macro:
  - 0.9735271208394941
  - 0.9927308530249707
  - 0.996424173534148
  - 0.9812737552933631
  - 0.934131817710249
  test_roc_auc_micro:
  - 0.9812636165577342
  - 0.98875
  - 0.9839192221391175
  - 0.9788043478260869
  - 0.9504966187658496
  test_roc_auc_samples:
  - 0.9842391304347826
  - 0.9813953488372094
  - 0.9712500000000001
  - 0.9564102564102563
  - 0.9544871794871795
  test_roc_auc_weighted:
  - 0.9711690157937621
  - 0.9857264957264956
  - 0.996791470211273
  - 0.9784069264069265
  - 0.9359806859806861
start: 2023-10-21 17:29:50.570797
wrapper: null
