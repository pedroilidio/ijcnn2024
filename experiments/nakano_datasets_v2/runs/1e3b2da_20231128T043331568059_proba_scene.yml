active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJqZmZmZ2T8AmpmZmZnZPwCamZmZmdk/ADMzMzMz478AMzMzMzPjvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ6T8AmpmZmZnJvwCamZmZmcm/AJqZmZmZyb8AmpmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwCamZmZmdk/AJqZmZmZ2T8AMzMzMzPjvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gDMzMzMz4z8AmZmZmZnZvwCZmZmZmdm/gDMzMzMz4z8AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZ2b8AmZmZmZnZvwCZmZmZmdm/gDMzMzMz4z+AMzMzMzPjPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT8AmpmZmZnJPwCamZmZmck/gJmZmZmZ6b8AmpmZmZnJPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gDMzMzMzC0AAmZmZmZn5vwAyMzMzM+O/AJyZmZmZ2T8AmZmZmZn5vw==
      n_labels: 6
      n_samples: 2407
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: scene
  params:
    path: nakano_datasets_v2/datasets/MLC/scene.csv
directory: nakano_datasets_v2/runs
end: 2023-11-28 04:34:45.818177
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba
  params:
    memory: estimators_cache
hash: 1e3b2dad5535075af2826343d631db4eed862334163a28f86c8d58e1e50bebb2
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/1e3b2da_20231128T043331568059_proba_scene.yml
results:
  fit_time:
  - 36.98692727088928
  - 36.10215473175049
  - 36.58827829360962
  - 36.115872383117676
  - 36.6786630153656
  score_time:
  - 25.190110206604004
  - 22.209903240203857
  - 22.538337230682373
  - 37.13983225822449
  - 25.391108512878418
  test_average_precision_macro:
  - 0.8013665196604828
  - 0.7725274147739883
  - 0.7794628785805185
  - 0.811207666261777
  - 0.77074741866128
  test_average_precision_micro:
  - 0.7990524477119366
  - 0.7761678819471045
  - 0.784673939959667
  - 0.8160686655182938
  - 0.7791022113422985
  test_average_precision_samples:
  - 0.8729428172942818
  - 0.862870945479641
  - 0.8557053941908713
  - 0.8689535689535689
  - 0.8523982056590752
  test_average_precision_weighted:
  - 0.7881935546466915
  - 0.7593151274831628
  - 0.7665072458902448
  - 0.7975972908476672
  - 0.7567726721771961
  test_coverage_error:
  - -1.4435146443514644
  - -1.4699792960662525
  - -1.504149377593361
  - -1.4532224532224531
  - -1.505175983436853
  test_f1_macro:
  - 0.21106077628389794
  - 0.20537441625179675
  - 0.17668303533213806
  - 0.20503616994972332
  - 0.23701744813889483
  test_f1_micro:
  - 0.2141623488773748
  - 0.20379965457685667
  - 0.17957746478873238
  - 0.2048611111111111
  - 0.23429541595925296
  test_f1_samples:
  - 0.12622036262203626
  - 0.12077294685990338
  - 0.10304287690179806
  - 0.1157311157311157
  - 0.13837129054520358
  test_f1_weighted:
  - 0.21060427268305318
  - 0.1992868123919981
  - 0.17421995186285547
  - 0.1973614688957981
  - 0.22957945101007837
  test_hamming_loss:
  - -0.1586471408647141
  - -0.15907522429261559
  - -0.16113416320885202
  - -0.1586971586971587
  - -0.15562456866804694
  test_jaccard_macro:
  - 0.12006187168408468
  - 0.11724544852253439
  - 0.10002509459692444
  - 0.11871146707929554
  - 0.13732174183507967
  test_jaccard_micro:
  - 0.11992263056092843
  - 0.11346153846153846
  - 0.09864603481624758
  - 0.11411992263056092
  - 0.1326923076923077
  test_jaccard_samples:
  - 0.12447698744769875
  - 0.12008281573498965
  - 0.10269709543568464
  - 0.11434511434511435
  - 0.13630089717046237
  test_jaccard_weighted:
  - 0.11976651911369018
  - 0.11360934195737725
  - 0.09864603481624758
  - 0.11411992263056092
  - 0.13267661974558526
  test_label_ranking_average_precision_score:
  - 0.8729428172942816
  - 0.8628709454796408
  - 0.8557053941908711
  - 0.8689535689535689
  - 0.8523982056590746
  test_label_ranking_loss:
  - 0.07191422594142259
  - 0.07872670807453418
  - 0.08443983402489626
  - 0.07245322245322246
  - 0.08442028985507247
  test_matthews_corrcoef_macro:
  - 0.30645413322168674
  - 0.2971385000890519
  - 0.2776427865360725
  - 0.2953051751037053
  - 0.3260776582778608
  test_matthews_corrcoef_micro:
  - 0.31062965822305966
  - 0.30176229902350626
  - 0.28716797560331164
  - 0.30924334366354894
  - 0.328044029167604
  test_matthews_corrcoef_samples:
  - 0.12502568548152382
  - 0.11980312849703387
  - 0.10297189944405327
  - 0.11544661565100768
  - 0.1370796920407212
  test_matthews_corrcoef_weighted:
  - 0.3048981986272044
  - 0.2911426151264938
  - 0.2747400570095365
  - 0.2876347981098824
  - 0.31916547734160544
  test_ndgc:
  - 0.906108902173171
  - 0.8984754982711582
  - 0.8930958933127237
  - 0.9037900338521705
  - 0.8911912681205338
  test_precision_macro:
  - 0.9777777777777779
  - 0.9553571428571428
  - 1.0
  - 1.0
  - 0.9674185463659147
  test_precision_micro:
  - 0.96875
  - 0.9672131147540983
  - 1.0
  - 1.0
  - 0.971830985915493
  test_precision_samples:
  - 0.1297071129707113
  - 0.12215320910973085
  - 0.1037344398340249
  - 0.11850311850311851
  - 0.14285714285714285
  test_precision_weighted:
  - 0.9743365695792879
  - 0.9557708218422505
  - 1.0
  - 1.0
  - 0.9674427381194299
  test_recall_macro:
  - 0.1206437574218086
  - 0.11753870134892558
  - 0.10002509459692444
  - 0.11871146707929554
  - 0.1378472454680412
  test_recall_micro:
  - 0.1203883495145631
  - 0.1138996138996139
  - 0.09864603481624758
  - 0.11411992263056092
  - 0.13320463320463322
  test_recall_samples:
  - 0.12447698744769875
  - 0.12008281573498965
  - 0.10269709543568464
  - 0.11434511434511435
  - 0.13630089717046237
  test_recall_weighted:
  - 0.1203883495145631
  - 0.1138996138996139
  - 0.09864603481624758
  - 0.11411992263056092
  - 0.13320463320463322
  test_roc_auc_macro:
  - 0.9277693321555485
  - 0.9230612213104271
  - 0.9208662710768887
  - 0.9318514965320638
  - 0.9169726302514581
  test_roc_auc_micro:
  - 0.9360601421857658
  - 0.9284919373154668
  - 0.9281172757813295
  - 0.9377468314536653
  - 0.9267885532591416
  test_roc_auc_samples:
  - 0.9280857740585774
  - 0.9212732919254659
  - 0.9155601659751038
  - 0.9275467775467775
  - 0.9155797101449276
  test_roc_auc_weighted:
  - 0.9209631987479124
  - 0.9173238604522389
  - 0.9146927077593803
  - 0.9257843643630161
  - 0.9097534375491568
start: 2023-11-28 04:33:31.568059
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
