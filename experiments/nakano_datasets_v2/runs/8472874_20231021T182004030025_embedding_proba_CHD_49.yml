active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZ2b8AmZmZmZnZv4AzMzMzM+M/gDMzMzMz4z8AmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ6T8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/wJmZmZmZ6T8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ZmZmZmZmBsCgmZmZmZnJPzQzMzMzM/M/NDMzMzMz8z+gmZmZmZnJPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZ2T8AMzMzMzPjvwAzMzMzM+O/AJqZmZmZ2T8AmpmZmZnZPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          AAAAAAAA8L8AAAAAAAAIQAAAAAAAAPA/AAAAAAAACMAAAAAAAAAAAA==
      n_labels: 6
      n_samples: 555
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: CHD_49
  params:
    path: nakano_datasets_v2/datasets/MLC/CHD_49.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:22:21.334191
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.ExtraTreesRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.8
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        - - rf
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.RandomForestRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.95
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 847287489392281d9c416c1200f2efa351244ddf7f07b1dc27bf226918d50abd
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/8472874_20231021T182004030025_embedding_proba_CHD_49.yml
results:
  fit_time:
  - 61.63481616973877
  - 62.429726362228394
  - 59.898766040802
  - 59.04267597198486
  - 63.770089626312256
  score_time:
  - 68.88234400749207
  - 68.05894947052002
  - 70.45704650878906
  - 71.16396117210388
  - 72.01281213760376
  test_average_precision_macro:
  - 0.5450810618569636
  - 0.5155429738108643
  - 0.5191293953905184
  - 0.5400925587348476
  - 0.5085523898725485
  test_average_precision_micro:
  - 0.6694910298864575
  - 0.6702572263039444
  - 0.6718342098139347
  - 0.6848398689734363
  - 0.6282721757770606
  test_average_precision_samples:
  - 0.790327380952381
  - 0.7968492798353908
  - 0.7792803030303029
  - 0.7686281676413256
  - 0.7642267267267265
  test_average_precision_weighted:
  - 0.6565641568437681
  - 0.6414944914007562
  - 0.6548875659141234
  - 0.6590397128642987
  - 0.6257128419822121
  test_coverage_error:
  - -3.767857142857143
  - -3.7314814814814814
  - -3.7818181818181817
  - -3.6666666666666665
  - -3.8468468468468466
  test_f1_macro:
  - 0.5516361553064911
  - 0.49893868524431184
  - 0.5158246741261523
  - 0.5187186800089497
  - 0.5087774179050463
  test_f1_micro:
  - 0.6848381601362862
  - 0.6490299823633157
  - 0.6666666666666667
  - 0.6732673267326732
  - 0.6532663316582915
  test_f1_samples:
  - 0.6563562925170068
  - 0.6254409171075836
  - 0.6283766233766235
  - 0.6439431913116125
  - 0.620963820963821
  test_f1_weighted:
  - 0.6741181935189191
  - 0.6334662514307801
  - 0.6557437881916627
  - 0.6600369211831655
  - 0.6427741686626557
  test_hamming_loss:
  - -0.27529761904761907
  - -0.30709876543209874
  - -0.29545454545454547
  - -0.2894736842105263
  - -0.3108108108108108
  test_jaccard_macro:
  - 0.4182287089349237
  - 0.37260312471941587
  - 0.3855490965389565
  - 0.38945088833004254
  - 0.3778277044066916
  test_jaccard_micro:
  - 0.5207253886010362
  - 0.4804177545691906
  - 0.5
  - 0.5074626865671642
  - 0.48507462686567165
  test_jaccard_samples:
  - 0.5479166666666667
  - 0.5220679012345679
  - 0.5287878787878788
  - 0.5403508771929824
  - 0.5154654654654655
  test_jaccard_weighted:
  - 0.5214470314546557
  - 0.4867631389215254
  - 0.5025505088093717
  - 0.5105269540082907
  - 0.4909008578541025
  test_label_ranking_average_precision_score:
  - 0.7903273809523811
  - 0.8061085390946503
  - 0.7974621212121209
  - 0.7686281676413256
  - 0.764226726726727
  test_label_ranking_loss:
  - 0.21927083333333333
  - 0.21952160493827158
  - 0.23323232323232324
  - 0.23230994152046786
  - 0.23533533533533532
  test_matthews_corrcoef_macro:
  - 0.21132109258423673
  - 0.10745920873972435
  - 0.12493199120035746
  - 0.14355142672494217
  - 0.11386738152660512
  test_matthews_corrcoef_micro:
  - 0.4407176611800112
  - 0.37632535264903444
  - 0.4020997519600277
  - 0.4183776965887281
  - 0.3732990706729932
  test_matthews_corrcoef_samples:
  - 0.46615423037056386
  - 0.4070537589364318
  - 0.409947456057826
  - 0.4353788647221946
  - 0.39533519978907355
  test_matthews_corrcoef_weighted:
  - 0.20887144104836597
  - 0.0936774444482269
  - 0.11000831973434255
  - 0.1406675187541352
  - 0.10774502867524098
  test_ndgc:
  - 0.8638287153773356
  - 0.8635148419462938
  - 0.8490233409288666
  - 0.8416828133215106
  - 0.8445220538990138
  test_precision_macro:
  - 0.5418292407288086
  - 0.5105878020654303
  - 0.5102434269956735
  - 0.49974260436585327
  - 0.4957537989653566
  test_precision_micro:
  - 0.674496644295302
  - 0.6594982078853047
  - 0.65
  - 0.631578947368421
  - 0.6290322580645161
  test_precision_samples:
  - 0.6912202380952381
  - 0.6535493827160493
  - 0.653030303030303
  - 0.6242690058479533
  - 0.6306306306306306
  test_precision_weighted:
  - 0.6558075904695361
  - 0.6354269169421412
  - 0.6360757906748042
  - 0.6179114025857279
  - 0.6150478152916495
  test_recall_macro:
  - 0.5635207140565098
  - 0.49464011272036806
  - 0.5291657666255909
  - 0.5522807123412586
  - 0.5296308359691854
  test_recall_micro:
  - 0.6955017301038062
  - 0.6388888888888888
  - 0.6842105263157895
  - 0.7208480565371025
  - 0.6794425087108014
  test_recall_samples:
  - 0.699404761904762
  - 0.6566358024691359
  - 0.6598484848484848
  - 0.7236842105263158
  - 0.6768768768768768
  test_recall_weighted:
  - 0.6955017301038062
  - 0.6388888888888888
  - 0.6842105263157895
  - 0.7208480565371025
  - 0.6794425087108014
  test_roc_auc_macro:
  - 0.6274255901852374
  - 0.5920675674608863
  - 0.5611185937850202
  - 0.6297906193264081
  - 0.50134075012056
  test_roc_auc_micro:
  - 0.7734964358958144
  - 0.7515817901234569
  - 0.7501005847953216
  - 0.7679740577883913
  - 0.7305305544574481
  test_roc_auc_samples:
  - 0.7807291666666666
  - .nan
  - .nan
  - 0.7676900584795323
  - 0.7646646646646647
  test_roc_auc_weighted:
  - 0.6310119056917869
  - 0.569818634845664
  - 0.5941288044662912
  - 0.608779068155459
  - 0.5339214916942686
start: 2023-10-21 18:20:04.030025
wrapper: null
