active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            NDMzMzMz4z+YmZmZmZnZv5iZmZmZmdm/mJmZmZmZ2b80MzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            kJmZmZmZ2b84MzMzMzPjP5CZmZmZmdm/kJmZmZmZ2b84MzMzMzPjPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ2T/AmZmZmZnZPyAzMzMzM+O/IDMzMzMz47/AmZmZmZnZPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+AmZmZmZnJv6CZmZmZmek/gJmZmZmZyb+AmZmZmZnJvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gJmZmZmZ+b8AmpmZmZnZP0AzMzMzMwNAYGZmZmZmFsCgmZmZmZkRQA==
      n_labels: 6
      n_samples: 207
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: VirusPseAAC
  params:
    path: nakano_datasets_v2/datasets/MLC/VirusPseAAC.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:40:43.949117
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - rf
          - call: deep_forest.estimator_adapters.EstimatorAsTransformer
            params:
              estimator:
                call: sklearn.ensemble._forest.RandomForestRegressor
                params:
                  bootstrap: true
                  ccp_alpha: 0.0
                  criterion: squared_error
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: null
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: false
                  random_state: 0
                  verbose: true
                  warm_start: false
        - - xt
          - call: deep_forest.estimator_adapters.EstimatorAsTransformer
            params:
              estimator:
                call: sklearn.ensemble._forest.ExtraTreesRegressor
                params:
                  bootstrap: false
                  ccp_alpha: 0.0
                  criterion: squared_error
                  max_depth: null
                  max_features: sqrt
                  max_leaf_nodes: null
                  max_samples: null
                  min_impurity_decrease: 0.0
                  min_samples_leaf: 5
                  min_samples_split: 2
                  min_weight_fraction_leaf: 0.0
                  n_estimators: 150
                  n_jobs: 14
                  oob_score: false
                  random_state: 0
                  verbose: true
                  warm_start: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: proba
  params:
    memory: estimators_cache
hash: 36ee69dc1f3245d571735b711665303a7fbf28eb343cc2afa6f5d92e7fac93b3
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/36ee69d_20231021T173946288970_proba_VirusPseAAC.yml
results:
  fit_time:
  - 33.800307512283325
  - 33.82579970359802
  - 33.633963108062744
  - 33.63744497299194
  - 32.927852392196655
  score_time:
  - 23.22170662879944
  - 23.276328325271606
  - 20.411885023117065
  - 20.939467430114746
  - 11.032857418060303
  test_average_precision_macro:
  - 0.3217057565926765
  - 0.3226812335677877
  - 0.4409217601805258
  - 0.3524605320357792
  - 0.4373638278072049
  test_average_precision_micro:
  - 0.27568816669723467
  - 0.3060634030356003
  - 0.37282638204718366
  - 0.2707392689616695
  - 0.44142625208904174
  test_average_precision_samples:
  - 0.5467054263565891
  - 0.5661924119241193
  - 0.5790598290598291
  - 0.5106382978723404
  - 0.636186186186186
  test_average_precision_weighted:
  - 0.36133539862132397
  - 0.3721565703651408
  - 0.44581107932777947
  - 0.4027301184824586
  - 0.4505281882728651
  test_coverage_error:
  - -2.883720930232558
  - -2.731707317073171
  - -2.7435897435897436
  - -2.8297872340425534
  - -2.4054054054054053
  test_f1_macro:
  - 0.04479578392621871
  - 0.04365079365079364
  - 0.07647907647907648
  - 0.03269537480063795
  - 0.08095238095238096
  test_f1_micro:
  - 0.09836065573770492
  - 0.0967741935483871
  - 0.16666666666666669
  - 0.06896551724137931
  - 0.17857142857142858
  test_f1_samples:
  - 0.05426356589147286
  - 0.05691056910569105
  - 0.10256410256410255
  - 0.035460992907801414
  - 0.0990990990990991
  test_f1_weighted:
  - 0.09138339920948615
  - 0.08904761904761906
  - 0.14769544181308888
  - 0.06588148693411851
  - 0.16851311953352768
  test_hamming_loss:
  - -0.2131782945736434
  - -0.22764227642276422
  - -0.21367521367521367
  - -0.19148936170212766
  - -0.2072072072072072
  test_jaccard_macro:
  - 0.024242424242424242
  - 0.023484848484848487
  - 0.045370370370370366
  - 0.017195767195767195
  - 0.0462962962962963
  test_jaccard_micro:
  - 0.05172413793103448
  - 0.05084745762711865
  - 0.09090909090909091
  - 0.03571428571428571
  - 0.09803921568627451
  test_jaccard_samples:
  - 0.046511627906976744
  - 0.04878048780487805
  - 0.08974358974358974
  - 0.031914893617021274
  - 0.0945945945945946
  test_jaccard_weighted:
  - 0.04945454545454545
  - 0.04790909090909091
  - 0.08736383442265795
  - 0.03464590964590964
  - 0.09637188208616779
  test_label_ranking_average_precision_score:
  - 0.5467054263565889
  - 0.5661924119241191
  - 0.5790598290598291
  - 0.5106382978723403
  - 0.6361861861861862
  test_label_ranking_loss:
  - 0.35174418604651164
  - 0.3056910569105691
  - 0.2923076923076922
  - 0.33959810874704494
  - 0.22424924924924924
  test_matthews_corrcoef_macro:
  - -0.03081645430931899
  - -0.04901292801036955
  - 0.02467297972877187
  - -0.0037924516754795357
  - 0.05441347075028093
  test_matthews_corrcoef_micro:
  - 0.042139223585373906
  - 0.02630676812512146
  - 0.1635484580983947
  - 0.056624552747247335
  - 0.214736575235192
  test_matthews_corrcoef_samples:
  - 0.02438798367559334
  - 0.025181842244723803
  - 0.09480427169489815
  - 0.021967138979439912
  - 0.08422237205450914
  test_matthews_corrcoef_weighted:
  - -0.06286556679101074
  - -0.08558399238557839
  - 0.04353191345554853
  - -0.009043530472942374
  - 0.11326885748017664
  test_ndgc:
  - 0.6607450775048112
  - 0.6791900435278031
  - 0.6897471739408689
  - 0.6348159752763298
  - 0.7330254153263345
  test_precision_macro:
  - 0.09444444444444444
  - 0.08928571428571429
  - 0.16666666666666666
  - 0.125
  - 0.23611111111111108
  test_precision_micro:
  - 0.2727272727272727
  - 0.25
  - 0.5555555555555556
  - 0.3333333333333333
  - 0.7142857142857143
  test_precision_samples:
  - 0.046511627906976744
  - 0.04878048780487805
  - 0.08974358974358974
  - 0.031914893617021274
  - 0.10810810810810811
  test_precision_weighted:
  - 0.19266666666666665
  - 0.18214285714285716
  - 0.326797385620915
  - 0.25
  - 0.4914965986394558
  test_recall_macro:
  - 0.02941176470588235
  - 0.02941176470588235
  - 0.05092592592592593
  - 0.01906318082788671
  - 0.049019607843137254
  test_recall_micro:
  - 0.06
  - 0.06
  - 0.09803921568627451
  - 0.038461538461538464
  - 0.10204081632653061
  test_recall_samples:
  - 0.06976744186046512
  - 0.07317073170731707
  - 0.1282051282051282
  - 0.0425531914893617
  - 0.0945945945945946
  test_recall_weighted:
  - 0.06
  - 0.06
  - 0.09803921568627451
  - 0.038461538461538464
  - 0.10204081632653061
  test_roc_auc_macro:
  - 0.569258900141253
  - 0.5834392731451555
  - 0.6254620044475118
  - 0.589239846343955
  - 0.6281395549422114
  test_roc_auc_micro:
  - 0.6304807692307691
  - 0.6835714285714286
  - 0.7202400085717348
  - 0.6585284280936454
  - 0.7579332310959065
  test_roc_auc_samples:
  - 0.6482558139534884
  - 0.6943089430894309
  - 0.7076923076923076
  - 0.6604018912529551
  - 0.7757507507507508
  test_roc_auc_weighted:
  - 0.5042246642246642
  - 0.5468937728937728
  - 0.5819322656598871
  - 0.6094056933220927
  - 0.5777495162287789
start: 2023-10-21 17:39:46.288970
wrapper: null
