active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb/AmZmZmZnpPwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ2b80MzMzMzPjPzQzMzMzM+M/mJmZmZmZ2b+YmZmZmZnZvw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gJmZmZmZAcAAzczMzMz8PwCamZmZmek/AM3MzMzM/D+AmZmZmZkBwA==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: GrampositivePseAAC
  params:
    path: nakano_datasets_v2/datasets/MLC/GrampositivePseAAC.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:14:15.287242
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.ExtraTreesRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.8
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        - - rf
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.RandomForestRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.95
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_proba
  params:
    memory: estimators_cache
hash: fb5a392262359ae14d81993e1480c8ca0f865c3b339a69685c00a4855a1c57ca
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/fb5a392_20231021T181207437561_embedding_proba_GrampositivePseAAC.yml
results:
  fit_time:
  - 62.432953119277954
  - 62.6982581615448
  - 58.45428419113159
  - 59.944132566452026
  - 56.24650311470032
  score_time:
  - 48.08168983459473
  - 60.18886852264404
  - 63.93522119522095
  - 66.62023329734802
  - 64.6586365699768
  test_average_precision_macro:
  - 0.3536622260241423
  - 0.4500408638296303
  - 0.3413543270861305
  - 0.34887325803292685
  - 0.4055142505966071
  test_average_precision_micro:
  - 0.4278541263926038
  - 0.5603790545492191
  - 0.44791735026819757
  - 0.46025529018700445
  - 0.5116203796871338
  test_average_precision_samples:
  - 0.7004716981132075
  - 0.7312091503267973
  - 0.6828478964401292
  - 0.6928104575163396
  - 0.7185534591194968
  test_average_precision_weighted:
  - 0.44580960073884746
  - 0.5814626881802174
  - 0.4479250129903711
  - 0.45559778561535186
  - 0.5223174812276207
  test_coverage_error:
  - -1.7547169811320755
  - -1.7352941176470589
  - -1.883495145631068
  - -1.8333333333333333
  - -1.7735849056603774
  test_f1_macro:
  - 0.3175592973634589
  - 0.39357869142351903
  - 0.30243912080961416
  - 0.3096875
  - 0.3579776674937965
  test_f1_micro:
  - 0.4554455445544555
  - 0.5612244897959183
  - 0.4723618090452262
  - 0.45999999999999996
  - 0.53
  test_f1_samples:
  - 0.4339622641509434
  - 0.5392156862745098
  - 0.45307443365695793
  - 0.4444444444444444
  - 0.5
  test_f1_weighted:
  - 0.4302721927026215
  - 0.5318774813196719
  - 0.4292558959067498
  - 0.42705528846153845
  - 0.48939838007397346
  test_hamming_loss:
  - -0.25943396226415094
  - -0.2107843137254902
  - -0.25485436893203883
  - -0.2647058823529412
  - -0.22169811320754718
  test_jaccard_macro:
  - 0.2109385712326889
  - 0.27410137543156254
  - 0.2029382568989478
  - 0.2041254387182487
  - 0.245100558467811
  test_jaccard_micro:
  - 0.2948717948717949
  - 0.3900709219858156
  - 0.3092105263157895
  - 0.2987012987012987
  - 0.36054421768707484
  test_jaccard_samples:
  - 0.4339622641509434
  - 0.5392156862745098
  - 0.45145631067961167
  - 0.4411764705882353
  - 0.5
  test_jaccard_weighted:
  - 0.2875107689203139
  - 0.37418682808907056
  - 0.29071915444756424
  - 0.2841128701363478
  - 0.3394106060400372
  test_label_ranking_average_precision_score:
  - 0.7004716981132076
  - 0.7312091503267973
  - 0.6828478964401294
  - 0.6928104575163397
  - 0.7185534591194971
  test_label_ranking_loss:
  - 0.25157232704402516
  - 0.24509803921568626
  - 0.2896440129449838
  - 0.2679738562091503
  - 0.25786163522012573
  test_matthews_corrcoef_macro:
  - 0.1358004162280111
  - 0.2839977334289873
  - 0.13170845233724618
  - 0.12782004187470355
  - 0.22993946083950834
  test_matthews_corrcoef_micro:
  - 0.28631856346244444
  - 0.42342955384741265
  - 0.3058495904693801
  - 0.285447308335861
  - 0.3868124850105911
  test_matthews_corrcoef_samples:
  - 0.2767295597484277
  - 0.4117647058823529
  - 0.2977346278317153
  - 0.2792944497226725
  - 0.37106918238993714
  test_matthews_corrcoef_weighted:
  - 0.18002322952106842
  - 0.35456566989426125
  - 0.18514165613648045
  - 0.16723940189158998
  - 0.30076215463028055
  test_ndgc:
  - 0.7771185948039735
  - 0.7993513467543042
  - 0.7633014857599092
  - 0.7725276346159584
  - 0.7898714474920316
  test_precision_macro:
  - 0.3315850815850816
  - 0.5557081807081807
  - 0.3404100529100529
  - 0.35047121566335476
  - 0.450287356321839
  test_precision_micro:
  - 0.4791666666666667
  - 0.5851063829787234
  - 0.5
  - 0.4791666666666667
  - 0.5638297872340425
  test_precision_samples:
  - 0.4339622641509434
  - 0.5392156862745098
  - 0.4563106796116505
  - 0.45098039215686275
  - 0.5
  test_precision_weighted:
  - 0.43893213704534456
  - 0.6766740884387943
  - 0.4588914084152179
  - 0.45754844220653684
  - 0.5671220993276946
  test_recall_macro:
  - 0.3161904761904762
  - 0.38081360593017693
  - 0.3069047619047619
  - 0.3112151567944251
  - 0.3530952380952381
  test_recall_micro:
  - 0.4339622641509434
  - 0.5392156862745098
  - 0.44761904761904764
  - 0.4423076923076923
  - 0.5
  test_recall_samples:
  - 0.4339622641509434
  - 0.5392156862745098
  - 0.45145631067961167
  - 0.4411764705882353
  - 0.5
  test_recall_weighted:
  - 0.4339622641509434
  - 0.5392156862745098
  - 0.44761904761904764
  - 0.4423076923076923
  - 0.5
  test_roc_auc_macro:
  - 0.6100118193958595
  - 0.6757925669814202
  - 0.5922832840576331
  - 0.5740471156230839
  - 0.6182850032292521
  test_roc_auc_micro:
  - 0.722617776195562
  - 0.7790913751121363
  - 0.7313168915774779
  - 0.728997975708502
  - 0.7581286341521302
  test_roc_auc_samples:
  - 0.7484276729559749
  - 0.7549019607843137
  - 0.7103559870550162
  - 0.7320261437908497
  - 0.7421383647798742
  test_roc_auc_weighted:
  - 0.617908912803564
  - 0.6981323369235333
  - 0.6306643871504044
  - 0.6173812667850652
  - 0.6792586112997575
start: 2023-10-21 18:12:07.437561
wrapper: null
