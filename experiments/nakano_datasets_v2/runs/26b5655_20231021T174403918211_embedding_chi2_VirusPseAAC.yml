active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            mJmZmZmZ2b80MzMzMzPjPzQzMzMzM+M/mJmZmZmZ2b+YmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            kJmZmZmZ2b+QmZmZmZnZvzgzMzMzM+M/kJmZmZmZ2b84MzMzMzPjPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ2T8gMzMzMzPjvyAzMzMzM+O/wJmZmZmZ2T/AmZmZmZnZPw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+gmZmZmZnpP4CZmZmZmcm/gJmZmZmZyb+AmZmZmZnJvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gGZmZmZm9j9AMzMzMzMDQICZmZmZmfm/wMzMzMzMBMAAmpmZmZnZPw==
      n_labels: 6
      n_samples: 207
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: VirusPseAAC
  params:
    path: nakano_datasets_v2/datasets/MLC/VirusPseAAC.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:45:41.646210
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_pvalue
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - xt
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.8
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        - - rf_embedder
          - call: sklearn.pipeline.Pipeline
            params:
              memory: null
              steps:
              - - rf
                - call: deep_forest.tree_embedder.ForestEmbedder
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: 0.5
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
                    max_node_size: 0.95
                    max_pvalue: 0.05
                    method: path
                    node_weights: log_node_size
              - - densifier
                - call: nakano_datasets_v2.estimators.Densifier
                  params: {}
              - - pca
                - call: sklearn.decomposition._pca.PCA
                  params:
                    copy: true
                    iterated_power: auto
                    n_components: 0.8
                    n_oversamples: 10
                    power_iteration_normalizer: auto
                    random_state: 0
                    svd_solver: auto
                    tol: 0.0
                    whiten: false
              verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_chi2
  params:
    memory: estimators_cache
hash: 26b5655ad0fcd900cfe5b812ffefe99862c306f4d0495aab6182315d9b282ca2
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/26b5655_20231021T174403918211_embedding_chi2_VirusPseAAC.yml
results:
  fit_time:
  - 47.90613675117493
  - 50.743757009506226
  - 49.93447184562683
  - 49.64940142631531
  - 49.84787368774414
  score_time:
  - 49.20196580886841
  - 45.32103872299194
  - 35.640427589416504
  - 34.55937075614929
  - 42.71829891204834
  test_average_precision_macro:
  - 0.4352533207532902
  - 0.5015463771309429
  - 0.2484330646226369
  - 0.28048495127009226
  - 0.4739318491070213
  test_average_precision_micro:
  - 0.4442429154014333
  - 0.5410286960482655
  - 0.3731885197539187
  - 0.3611605354674426
  - 0.5438197198928985
  test_average_precision_samples:
  - 0.6608333333333334
  - 0.7194444444444443
  - 0.6531007751937984
  - 0.609090909090909
  - 0.7552168021680217
  test_average_precision_weighted:
  - 0.4391935765577391
  - 0.5243884849930734
  - 0.3712829836867864
  - 0.3445037894103278
  - 0.5409097448843753
  test_coverage_error:
  - -2.375
  - -2.1794871794871793
  - -2.3488372093023258
  - -2.4318181818181817
  - -2.1463414634146343
  test_f1_macro:
  - 0.10113960113960113
  - 0.14393939393939395
  - 0.08471690080885481
  - 0.08881456707543665
  - 0.13198757763975155
  test_f1_micro:
  - 0.22857142857142856
  - 0.3333333333333333
  - 0.1971830985915493
  - 0.2278481012658228
  - 0.29850746268656714
  test_f1_samples:
  - 0.17916666666666664
  - 0.2564102564102564
  - 0.14728682170542634
  - 0.17045454545454544
  - 0.22357723577235772
  test_f1_weighted:
  - 0.2022792022792023
  - 0.2963636363636364
  - 0.17558109833971902
  - 0.17762913415087328
  - 0.26925465838509316
  test_hamming_loss:
  - -0.225
  - -0.18803418803418803
  - -0.22093023255813954
  - -0.23106060606060605
  - -0.1910569105691057
  test_jaccard_macro:
  - 0.060515873015873016
  - 0.0925925925925926
  - 0.05022446689113356
  - 0.05233134920634921
  - 0.0825281803542673
  test_jaccard_micro:
  - 0.12903225806451613
  - 0.2
  - 0.109375
  - 0.12857142857142856
  - 0.17543859649122806
  test_jaccard_samples:
  - 0.17083333333333334
  - 0.24358974358974358
  - 0.13953488372093023
  - 0.1553030303030303
  - 0.2154471544715447
  test_jaccard_weighted:
  - 0.12103174603174603
  - 0.19111111111111112
  - 0.10393939393939393
  - 0.1046626984126984
  - 0.16835748792270533
  test_label_ranking_average_precision_score:
  - 0.6608333333333333
  - 0.7194444444444443
  - 0.6531007751937984
  - 0.6090909090909091
  - 0.7552168021680216
  test_label_ranking_loss:
  - 0.21812500000000004
  - 0.1858974358974359
  - 0.23837209302325582
  - 0.2530934343434343
  - 0.18130081300813009
  test_matthews_corrcoef_macro:
  - -0.0006147464730522125
  - 0.08386137634177233
  - -0.027263949966134904
  - -0.03055078693476794
  - 0.06682293422025713
  test_matthews_corrcoef_micro:
  - 0.1494829257522652
  - 0.3131637346992047
  - 0.10508030035588108
  - 0.11189184380577322
  - 0.2606577465319717
  test_matthews_corrcoef_samples:
  - 0.11618033988749894
  - 0.22515740589959463
  - 0.07517338446589944
  - 0.08055864071820419
  - 0.18447417954919015
  test_matthews_corrcoef_weighted:
  - -0.0012294929461044266
  - 0.17224948840874052
  - -0.06124666969636678
  - -0.06110157386953588
  - 0.13631878580932452
  test_ndgc:
  - 0.7480030602646145
  - 0.7915309661536677
  - 0.7403852369912073
  - 0.7080238892198506
  - 0.820338421948526
  test_precision_macro:
  - 0.1425925925925926
  - 0.22777777777777777
  - 0.11363636363636365
  - 0.10858585858585858
  - 0.21464646464646464
  test_precision_micro:
  - 0.42105263157894735
  - 0.6875
  - 0.3333333333333333
  - 0.32142857142857145
  - 0.5882352941176471
  test_precision_samples:
  - 0.2
  - 0.28205128205128205
  - 0.16279069767441862
  - 0.20454545454545456
  - 0.24390243902439024
  test_precision_weighted:
  - 0.2851851851851852
  - 0.4653333333333333
  - 0.23545454545454547
  - 0.21717171717171715
  - 0.43787878787878787
  test_recall_macro:
  - 0.0784313725490196
  - 0.10648148148148147
  - 0.06753812636165578
  - 0.08823529411764706
  - 0.09803921568627451
  test_recall_micro:
  - 0.1568627450980392
  - 0.22
  - 0.14
  - 0.17647058823529413
  - 0.2
  test_recall_samples:
  - 0.17083333333333334
  - 0.24358974358974358
  - 0.13953488372093023
  - 0.1553030303030303
  - 0.2154471544715447
  test_recall_weighted:
  - 0.1568627450980392
  - 0.22
  - 0.14
  - 0.17647058823529413
  - 0.2
  test_roc_auc_macro:
  - 0.5907380189669192
  - 0.6950677191166322
  - 0.45072065277947626
  - 0.5939156374511767
  - 0.6219720771191359
  test_roc_auc_micro:
  - 0.7845212158937649
  - 0.8102173913043478
  - 0.7508653846153847
  - 0.7555923777961889
  - 0.8009183673469388
  test_roc_auc_samples:
  - 0.781875
  - 0.8141025641025641
  - 0.7616279069767442
  - 0.7469065656565657
  - 0.81869918699187
  test_roc_auc_weighted:
  - 0.5673056222928345
  - 0.6538097826086955
  - 0.5116989604989605
  - 0.5225866973415992
  - 0.6610830115830116
start: 2023-10-21 17:44:03.918211
wrapper: null
