active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z9AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            oJmZmZmZ6b+AmZmZmZnJP4CZmZmZmck/gJmZmZmZyT+AmZmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMzG0DMzMzMzMwQwJiZmZmZmQHAoJmZmZmZ6T8wMzMzMzPzvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            aGZmZmZmBsAwMzMzMzPzPzAzMzMzM/M/MDMzMzMz8z+gmZmZmZnpvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT8AmpmZmZnJP4CZmZmZmem/AJqZmZmZyT8AmpmZmZnJPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ+b8wMzMzMzPjv2hmZmZmZvY/mJmZmZmZ+b80MzMzMzMDQA==
        ? !!python/tuple
        - 6
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            NDMzMzMz8z+gmZmZmZnJP8zMzMzMzPy/mJmZmZmZ6b80MzMzMzPzPw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          4MzMzMzM/D+QmZmZmZkBwHBmZmZmZgZAAJmZmZmZyb+QmZmZmZkBwA==
      n_labels: 7
      n_samples: 194
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: flags
  params:
    path: nakano_datasets_v2/datasets/MLC/flags.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 17:50:06.289937
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.ExtraTreesRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.8
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        - - rf
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.RandomForestRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.95
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 638ecc8c556eb657ad93a1cb4738b2b3c768a04743170105e0c948557e237447
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/638ecc8_20231021T174820569731_embedding_proba_flags.yml
results:
  fit_time:
  - 47.72362661361694
  - 50.025633573532104
  - 48.29295039176941
  - 50.00850534439087
  - 49.524192810058594
  score_time:
  - 52.61024188995361
  - 54.974117040634155
  - 52.31141471862793
  - 55.32381868362427
  - 55.30737495422363
  test_average_precision_macro:
  - 0.6816377093186582
  - 0.672952429320848
  - 0.7472611142432483
  - 0.6757300755258436
  - 0.6184851506861826
  test_average_precision_micro:
  - 0.71265818073431
  - 0.7373603454273633
  - 0.8254498735288331
  - 0.7099637216026645
  - 0.710504442307764
  test_average_precision_samples:
  - 0.7951319176319175
  - 0.7781445993031358
  - 0.7836055996472663
  - 0.7815873015873017
  - 0.7823064266356948
  test_average_precision_weighted:
  - 0.7408196031751962
  - 0.739482284006888
  - 0.8161259291537277
  - 0.7134131227719105
  - 0.7032972678942527
  test_coverage_error:
  - -4.918918918918919
  - -4.926829268292683
  - -5.111111111111111
  - -5.205128205128205
  - -4.780487804878049
  test_f1_macro:
  - 0.6456150527457828
  - 0.5876594058676101
  - 0.7192963125625665
  - 0.6271302718613833
  - 0.5737433434912427
  test_f1_micro:
  - 0.7272727272727273
  - 0.7179487179487181
  - 0.7675276752767528
  - 0.7196969696969696
  - 0.714828897338403
  test_f1_samples:
  - 0.6967080967080967
  - 0.6878981452152184
  - 0.7223882598882599
  - 0.6806656306656307
  - 0.707732376025059
  test_f1_weighted:
  - 0.7251568504934478
  - 0.7016366146848604
  - 0.7650043464614187
  - 0.7022561220599663
  - 0.6937475049650151
  test_hamming_loss:
  - -0.26640926640926643
  - -0.2682926829268293
  - -0.25
  - -0.27106227106227104
  - -0.2613240418118467
  test_jaccard_macro:
  - 0.5000933100512933
  - 0.4650958499928752
  - 0.5755959120244835
  - 0.48327922561332176
  - 0.44454643101259644
  test_jaccard_micro:
  - 0.5714285714285714
  - 0.56
  - 0.6227544910179641
  - 0.5621301775147929
  - 0.5562130177514792
  test_jaccard_samples:
  - 0.5871299871299871
  - 0.5691056910569107
  - 0.6316137566137567
  - 0.5776556776556776
  - 0.6101626016260162
  test_jaccard_weighted:
  - 0.5875474206595958
  - 0.5649617416512915
  - 0.6309644625689401
  - 0.5600802839627582
  - 0.5526130336411855
  test_label_ranking_average_precision_score:
  - 0.7951319176319177
  - 0.7781445993031358
  - 0.7836055996472662
  - 0.7815873015873016
  - 0.7823064266356948
  test_label_ranking_loss:
  - 0.23873873873873874
  - 0.25365853658536586
  - 0.2486111111111111
  - 0.2730769230769231
  - 0.2703252032520325
  test_matthews_corrcoef_macro:
  - 0.3108559233170255
  - 0.23895559553272078
  - 0.33258553352910253
  - 0.2782938488063758
  - 0.23865366549466424
  test_matthews_corrcoef_micro:
  - 0.46744274178481265
  - 0.46229516394372466
  - 0.4973556433909447
  - 0.4573639780390429
  - 0.4741239481754775
  test_matthews_corrcoef_samples:
  - 0.4108318021232541
  - 0.39309398686645874
  - 0.4465488719281299
  - 0.40496497886748845
  - 0.45830598723125293
  test_matthews_corrcoef_weighted:
  - 0.2813304978138827
  - 0.25483543862953195
  - 0.2600362577247575
  - 0.23069479964530631
  - 0.24248219526149417
  test_ndgc:
  - 0.8696428055014341
  - 0.8658282285998278
  - 0.8646004564174
  - 0.8703168977921644
  - 0.8667062626034497
  test_precision_macro:
  - 0.7400754869010423
  - 0.5825421077521918
  - 0.7352966477966477
  - 0.7284351539658925
  - 0.5747404224847834
  test_precision_micro:
  - 0.7419354838709677
  - 0.7101449275362319
  - 0.7591240875912408
  - 0.7142857142857143
  - 0.7014925373134329
  test_precision_samples:
  - 0.7184684684684685
  - 0.6792682926829269
  - 0.7166666666666667
  - 0.6764957264957265
  - 0.6922764227642276
  test_precision_weighted:
  - 0.7553416715523418
  - 0.6840949174282507
  - 0.7732278293845457
  - 0.7174295318039559
  - 0.6758903071632569
  test_recall_macro:
  - 0.6206598161234474
  - 0.600556867503802
  - 0.725892820471297
  - 0.623560591810832
  - 0.5874237111662571
  test_recall_micro:
  - 0.7131782945736435
  - 0.725925925925926
  - 0.7761194029850746
  - 0.7251908396946565
  - 0.7286821705426356
  test_recall_samples:
  - 0.6866795366795367
  - 0.7150406504065041
  - 0.7404761904761905
  - 0.6897435897435897
  - 0.7361788617886179
  test_recall_weighted:
  - 0.7131782945736435
  - 0.725925925925926
  - 0.7761194029850746
  - 0.7251908396946565
  - 0.7286821705426356
  test_roc_auc_macro:
  - 0.6802246319059905
  - 0.7020325783656878
  - 0.7551131297347478
  - 0.6544184239535701
  - 0.6668527335640207
  test_roc_auc_micro:
  - 0.7801431127012523
  - 0.7940545808966861
  - 0.8002150265621046
  - 0.7607784109235566
  - 0.7695515651064665
  test_roc_auc_samples:
  - .nan
  - 0.7463414634146341
  - .nan
  - 0.7269230769230769
  - 0.7296747967479674
  test_roc_auc_weighted:
  - 0.6494397463002113
  - 0.6654053129571741
  - 0.7444428822384777
  - 0.6240760935417424
  - 0.6456542855936181
start: 2023-10-21 17:48:20.569731
wrapper: null
