active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            NDMzMzMz4z+YmZmZmZnZv5iZmZmZmdm/NDMzMzMz4z+YmZmZmZnZvw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            ODMzMzMz4z+QmZmZmZnZv5CZmZmZmdm/kJmZmZmZ2b84MzMzMzPjPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            wJmZmZmZ2T/AmZmZmZnZPyAzMzMzM+O/wJmZmZmZ2T8gMzMzMzPjvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZyb+AmZmZmZnJv4CZmZmZmcm/gJmZmZmZyb+gmZmZmZnpPw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gJmZmZmZ+b8AMzMzMzPjv0AzMzMzMwNAADMzMzMz478AmpmZmZnZPw==
      n_labels: 6
      n_samples: 207
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: VirusGO
  params:
    path: nakano_datasets_v2/datasets/MLC/VirusGO.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 19:30:23.656588
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.7
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - xt
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.ExtraTreesRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.8
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              - - rf
                - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
                  params:
                    estimator:
                      call: deep_forest.tree_embedder.ForestEmbedder
                      params:
                        estimator:
                          call: sklearn.ensemble._forest.RandomForestRegressor
                          params:
                            bootstrap: true
                            ccp_alpha: 0.0
                            criterion: squared_error
                            max_depth: null
                            max_features: sqrt
                            max_leaf_nodes: null
                            max_samples: 0.5
                            min_impurity_decrease: 0.0
                            min_samples_leaf: 5
                            min_samples_split: 2
                            min_weight_fraction_leaf: 0.0
                            n_estimators: 150
                            n_jobs: 14
                            oob_score: false
                            random_state: 0
                            verbose: true
                            warm_start: false
                        max_node_size: 0.95
                        max_pvalue: 1.0
                        method: path
                        node_weights: log_node_size
                    method: predict
                    post_transformer:
                      call: sklearn.pipeline.Pipeline
                      params:
                        memory: null
                        steps:
                        - - densifier
                          - call: nakano_datasets_v2.estimators.Densifier
                            params: {}
                        - - pca
                          - call: sklearn.decomposition._pca.PCA
                            params:
                              copy: true
                              iterated_power: auto
                              n_components: 0.8
                              n_oversamples: 10
                              power_iteration_normalizer: auto
                              random_state: 0
                              svd_solver: auto
                              tol: 0.0
                              whiten: false
                        verbose: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 3e9672698acc1d934b83bd26ece3dfc6334eb5cff49f51f223c64c5a0a5b7f49
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/3e96726_20231127T192834328969_embedding_proba_VirusGO.yml
results:
  fit_time:
  - 53.53169226646423
  - 50.54764676094055
  - 49.56758093833923
  - 55.17733907699585
  - 54.499420166015625
  score_time:
  - 52.24504518508911
  - 58.23136639595032
  - 57.32013249397278
  - 52.054131746292114
  - 51.77867650985718
  test_average_precision_macro:
  - 0.816662932438721
  - 0.8524030626831075
  - 0.8713582341946432
  - 0.854388868303846
  - 0.8803845833312046
  test_average_precision_micro:
  - 0.7781713916207619
  - 0.8013286833999944
  - 0.7824729990104603
  - 0.7593291119598424
  - 0.8178637039506886
  test_average_precision_samples:
  - 0.8767441860465117
  - 0.8670634920634922
  - 0.897008547008547
  - 0.8902116402116401
  - 0.9573170731707317
  test_average_precision_weighted:
  - 0.8038862446338044
  - 0.8059117191188677
  - 0.8213563742692702
  - 0.8013546518840637
  - 0.8261976563990294
  test_coverage_error:
  - -1.5116279069767442
  - -1.5952380952380953
  - -1.6666666666666667
  - -1.4761904761904763
  - -1.3414634146341464
  test_f1_macro:
  - 0.037037037037037035
  - 0.03508771929824561
  - 0.018518518518518517
  - 0.0
  - 0.03715170278637771
  test_f1_micro:
  - 0.07843137254901959
  - 0.07547169811320754
  - 0.037037037037037035
  - 0.0
  - 0.07692307692307693
  test_f1_samples:
  - 0.03875968992248062
  - 0.047619047619047616
  - 0.017094017094017092
  - 0.0
  - 0.04878048780487805
  test_f1_weighted:
  - 0.07709750566893424
  - 0.07017543859649122
  - 0.03632478632478632
  - 0.0
  - 0.07554179566563468
  test_hamming_loss:
  - -0.1821705426356589
  - -0.19444444444444445
  - -0.2222222222222222
  - -0.20634920634920634
  - -0.1951219512195122
  test_jaccard_macro:
  - 0.0196078431372549
  - 0.0196078431372549
  - 0.00980392156862745
  - 0.0
  - 0.019675925925925927
  test_jaccard_micro:
  - 0.04081632653061224
  - 0.0392156862745098
  - 0.018867924528301886
  - 0.0
  - 0.04
  test_jaccard_samples:
  - 0.03488372093023256
  - 0.047619047619047616
  - 0.01282051282051282
  - 0.0
  - 0.04878048780487805
  test_jaccard_weighted:
  - 0.04081632653061224
  - 0.0392156862745098
  - 0.019230769230769232
  - 0.0
  - 0.04
  test_label_ranking_average_precision_score:
  - 0.8767441860465115
  - 0.8670634920634922
  - 0.897008547008547
  - 0.8902116402116401
  - 0.9573170731707317
  test_label_ranking_loss:
  - 0.06511627906976745
  - 0.07857142857142858
  - 0.06217948717948719
  - 0.05588624338624339
  - 0.02378048780487805
  test_matthews_corrcoef_macro:
  - 0.0636086697675111
  - 0.0451938453788867
  - 0.005725681254657625
  - -0.04292806108111898
  - 0.06272874033443064
  test_matthews_corrcoef_micro:
  - 0.1825450741094721
  - 0.17756523242094968
  - 0.06203645837318315
  - -0.04449941594899848
  - 0.17925163190605437
  test_matthews_corrcoef_samples:
  - 0.037964082140318045
  - 0.047619047619047616
  - 0.011088603385478868
  - -0.009523809523809525
  - 0.04878048780487805
  test_matthews_corrcoef_weighted:
  - 0.13240988400583942
  - 0.0903876907577734
  - 0.008342916070741353
  - -0.08757324460548271
  - 0.12758838497194924
  test_ndgc:
  - 0.9129585043869411
  - 0.9010323138348465
  - 0.925263407288304
  - 0.9207840728037253
  - 0.9693677303984614
  test_precision_macro:
  - 0.3333333333333333
  - 0.16666666666666666
  - 0.16666666666666666
  - 0.0
  - 0.3333333333333333
  test_precision_micro:
  - 1.0
  - 1.0
  - 0.5
  - 0.0
  - 1.0
  test_precision_samples:
  - 0.046511627906976744
  - 0.047619047619047616
  - 0.02564102564102564
  - 0.0
  - 0.04878048780487805
  test_precision_weighted:
  - 0.6938775510204082
  - 0.3333333333333333
  - 0.3269230769230769
  - 0.0
  - 0.68
  test_recall_macro:
  - 0.0196078431372549
  - 0.0196078431372549
  - 0.00980392156862745
  - 0.0
  - 0.019675925925925927
  test_recall_micro:
  - 0.04081632653061224
  - 0.0392156862745098
  - 0.019230769230769232
  - 0.0
  - 0.04
  test_recall_samples:
  - 0.03488372093023256
  - 0.047619047619047616
  - 0.01282051282051282
  - 0.0
  - 0.04878048780487805
  test_recall_weighted:
  - 0.04081632653061224
  - 0.0392156862745098
  - 0.019230769230769232
  - 0.0
  - 0.04
  test_roc_auc_macro:
  - 0.938022298316416
  - 0.9110833807207094
  - 0.9422294843863471
  - 0.9539814873317748
  - 0.9397150722150722
  test_roc_auc_micro:
  - 0.9438531393418612
  - 0.9379572724612233
  - 0.9471682163989856
  - 0.9522772277227722
  - 0.9527551020408163
  test_roc_auc_samples:
  - 0.9348837209302324
  - 0.9214285714285712
  - 0.9378205128205127
  - 0.9441137566137566
  - 0.976219512195122
  test_roc_auc_weighted:
  - 0.9014595443166873
  - 0.8653103346601799
  - 0.8955128205128206
  - 0.9226045112781955
  - 0.8920092664092665
start: 2023-11-27 19:28:34.328969
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop70
  params:
    drop: 0.7
    random_state: 0
