active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z9AMzMzMzPjPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJqZmZmZyT8AmpmZmZnJPwCamZmZmck/gJmZmZmZ6b8AmpmZmZnJPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb/AmZmZmZnpPwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            QDMzMzMz4z+AmZmZmZnZv4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 4
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b+AmZmZmZnZv0AzMzMzM+M/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 5
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            AJmZmZmZyb/AmZmZmZnpPwCZmZmZmcm/AJmZmZmZyb8AmZmZmZnJvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          QGZmZmZm9r8AmZmZmZnZv5CZmZmZmRXAcGZmZmZmGkCAMzMzMzPjPw==
      n_labels: 6
      n_samples: 593
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: emotions
  params:
    path: nakano_datasets_v2/datasets/MLC/emotions.csv
directory: nakano_datasets_v2/runs
end: 2023-11-27 23:41:46.642163
estimator:
  call: nakano_datasets_v2.estimators.cascade_proba
  final_params:
    memory: null
    steps:
    - - dropper
      - call: positive_dropper.PositiveDropper
        params:
          drop: 0.9
          random_state: 0
    - - estimator
      - call: deep_forest.cascade.Cascade
        params:
          final_estimator:
            call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
            params:
              estimators:
              - - rf
                - call: sklearn.ensemble._forest.RandomForestClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
              - - xt
                - call: sklearn.ensemble._forest.ExtraTreesClassifier
                  params:
                    bootstrap: true
                    ccp_alpha: 0.0
                    class_weight: null
                    criterion: gini
                    max_depth: null
                    max_features: sqrt
                    max_leaf_nodes: null
                    max_samples: 0.9
                    min_impurity_decrease: 0.0
                    min_samples_leaf: 5
                    min_samples_split: 2
                    min_weight_fraction_leaf: 0.0
                    n_estimators: 150
                    n_jobs: 14
                    oob_score: true
                    random_state: 0
                    verbose: true
                    warm_start: false
          inter_level_sampler: null
          keep_original_features: true
          level:
            call: deep_forest.cascade.AlternatingLevel
            params:
              last_output_indices: null
              n_jobs: null
              sparse_threshold: 0.3
              transformer_weights: null
              transformers:
              - - rf
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.RandomForestRegressor
                      params:
                        bootstrap: true
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              - - xt
                - call: deep_forest.estimator_adapters.EstimatorAsTransformer
                  params:
                    estimator:
                      call: sklearn.ensemble._forest.ExtraTreesRegressor
                      params:
                        bootstrap: false
                        ccp_alpha: 0.0
                        criterion: squared_error
                        max_depth: null
                        max_features: sqrt
                        max_leaf_nodes: null
                        max_samples: null
                        min_impurity_decrease: 0.0
                        min_samples_leaf: 5
                        min_samples_split: 2
                        min_weight_fraction_leaf: 0.0
                        n_estimators: 150
                        n_jobs: 14
                        oob_score: false
                        random_state: 0
                        verbose: true
                        warm_start: false
              verbose: false
              verbose_feature_names_out: true
          max_levels: 10
          max_unimproving_levels: null
          memory: estimators_cache
          min_improvement: null
          min_levels: 1
          min_relative_improvement: null
          min_score: 0.0
          random_state: 0
          refit: true
          scoring:
            load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
          trim_to_best_score: true
          validation_size: train
          verbose: 10
    verbose: false
  name: proba
  params:
    memory: estimators_cache
hash: 0b004564f04de988802129edba650c18fcc19c0f12aa53e4f17a9fa309bebb5d
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/0b00456_20231127T234045272685_proba_emotions.yml
results:
  fit_time:
  - 28.993748664855957
  - 29.01878261566162
  - 30.66292405128479
  - 32.0060670375824
  - 30.474012851715088
  score_time:
  - 30.165271759033203
  - 6.805801630020142
  - 9.859017610549927
  - 28.951679229736328
  - 27.69833517074585
  test_average_precision_macro:
  - 0.6135074001391146
  - 0.6228686345388544
  - 0.6129000322132035
  - 0.6388176664530146
  - 0.6279038269911433
  test_average_precision_micro:
  - 0.6138131856814655
  - 0.6235508732545534
  - 0.5861171646555147
  - 0.5804819238037653
  - 0.6244135836816972
  test_average_precision_samples:
  - 0.7805324074074075
  - 0.7610410830999066
  - 0.7071012544802868
  - 0.7329613095238096
  - 0.7485640301318267
  test_average_precision_weighted:
  - 0.6156032570284863
  - 0.6278867878164124
  - 0.6109562493074945
  - 0.6338125240128573
  - 0.6226439147712632
  test_coverage_error:
  - -2.9166666666666665
  - -2.8403361344537816
  - -3.185483870967742
  - -3.3125
  - -3.1186440677966103
  test_f1_macro:
  - 0.0
  - 0.0
  - 0.01754385964912281
  - 0.0
  - 0.021645021645021644
  test_f1_micro:
  - 0.0
  - 0.0
  - 0.026548672566371685
  - 0.0
  - 0.026666666666666665
  test_f1_samples:
  - 0.0
  - 0.0
  - 0.016129032258064516
  - 0.0
  - 0.019774011299435026
  test_f1_weighted:
  - 0.0
  - 0.0
  - 0.025130393551446185
  - 0.0
  - 0.026114426114426114
  test_hamming_loss:
  - -0.30833333333333335
  - -0.30952380952380953
  - -0.2956989247311828
  - -0.3288690476190476
  - -0.3093220338983051
  test_jaccard_macro:
  - 0.0
  - 0.0
  - 0.009259259259259259
  - 0.0
  - 0.011191268960414355
  test_jaccard_micro:
  - 0.0
  - 0.0
  - 0.013452914798206279
  - 0.0
  - 0.013513513513513514
  test_jaccard_samples:
  - 0.0
  - 0.0
  - 0.012096774193548387
  - 0.0
  - 0.01694915254237288
  test_jaccard_weighted:
  - 0.0
  - 0.0
  - 0.013263263263263263
  - 0.0
  - 0.013513513513513514
  test_label_ranking_average_precision_score:
  - 0.7805324074074076
  - 0.7610410830999064
  - 0.7071012544802868
  - 0.7329613095238096
  - 0.7485640301318267
  test_label_ranking_loss:
  - 0.18541666666666667
  - 0.18382352941176466
  - 0.25311379928315414
  - 0.24437003968253967
  - 0.22728342749529193
  test_matthews_corrcoef_macro:
  - 0.0
  - 0.0
  - 0.019841797106914593
  - 0.0
  - 0.048454573020675906
  test_matthews_corrcoef_micro:
  - 0.0
  - 0.0
  - 0.07256741860319327
  - 0.0
  - 0.09651786714075693
  test_matthews_corrcoef_samples:
  - 0.0
  - 0.0
  - 0.01275111959745314
  - 0.0
  - 0.019194161559892814
  test_matthews_corrcoef_weighted:
  - 0.0
  - 0.0
  - 0.02842203369368847
  - 0.0
  - 0.056971123951162043
  test_ndgc:
  - 0.8502833585133414
  - 0.8329633839375277
  - 0.7943962631773696
  - 0.8172968150831643
  - 0.8275345442444496
  test_precision_macro:
  - 0.0
  - 0.0
  - 0.125
  - 0.0
  - 0.3333333333333333
  test_precision_micro:
  - 0.0
  - 0.0
  - 0.75
  - 0.0
  - 1.0
  test_precision_samples:
  - 0.0
  - 0.0
  - 0.024193548387096774
  - 0.0
  - 0.025423728813559324
  test_precision_weighted:
  - 0.0
  - 0.0
  - 0.17905405405405406
  - 0.0
  - 0.3918918918918919
  test_recall_macro:
  - 0.0
  - 0.0
  - 0.009433962264150943
  - 0.0
  - 0.011191268960414355
  test_recall_micro:
  - 0.0
  - 0.0
  - 0.013513513513513514
  - 0.0
  - 0.013513513513513514
  test_recall_samples:
  - 0.0
  - 0.0
  - 0.012096774193548387
  - 0.0
  - 0.01694915254237288
  test_recall_weighted:
  - 0.0
  - 0.0
  - 0.013513513513513514
  - 0.0
  - 0.013513513513513514
  test_roc_auc_macro:
  - 0.7758776038809704
  - 0.7735398227812141
  - 0.7465028316341944
  - 0.7539326242911547
  - 0.7490606569407902
  test_roc_auc_micro:
  - 0.7942219327761497
  - 0.79645351665397
  - 0.7619170895032964
  - 0.7597997411483781
  - 0.7625681236792348
  test_roc_auc_samples:
  - 0.8145833333333333
  - 0.8161764705882353
  - 0.7468862007168459
  - 0.7556299603174603
  - 0.7727165725047082
  test_roc_auc_weighted:
  - 0.7761708283285444
  - 0.7771965355654488
  - 0.7418673008485673
  - 0.7484708630485002
  - 0.7397807412513296
start: 2023-11-27 23:40:45.272685
wrapper:
  call: positive_dropper.wrap_estimator
  name: drop90
  params:
    drop: 0.9
    random_state: 0
