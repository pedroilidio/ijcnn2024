active: true
cv:
  call: sklearn.model_selection.cross_validate
  params:
    cv: !!python/object:skmultilearn.model_selection.iterative_stratification.IterativeStratification
      desired_samples_per_combination_per_fold:
        ? !!python/tuple
        - 0
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - &id001 !!python/name:numpy.ndarray ''
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - &id002 !!python/object/apply:numpy.dtype
            args:
            - f8
            - false
            - true
            state: !!python/tuple
            - 3
            - <
            - null
            - null
            - null
            - -1
            - -1
            - 0
          - false
          - !!binary |
            AJmZmZmZyb8AmZmZmZnJvwCZmZmZmcm/AJmZmZmZyb/AmZmZmZnpPw==
        ? !!python/tuple
        - 1
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            mJmZmZmZ2b+YmZmZmZnZv5iZmZmZmdm/NDMzMzMz4z80MzMzMzPjPw==
        ? !!python/tuple
        - 2
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
        ? !!python/tuple
        - 3
        : !!python/object/apply:numpy.core.multiarray._reconstruct
          args:
          - *id001
          - !!python/tuple
            - 0
          - !!binary |
            Yg==
          state: !!python/tuple
          - 1
          - !!python/tuple
            - 5
          - *id002
          - false
          - !!binary |
            gJmZmZmZ2b9AMzMzMzPjP4CZmZmZmdm/QDMzMzMz4z+AmZmZmZnZvw==
      desired_samples_per_fold: !!python/object/apply:numpy.core.multiarray._reconstruct
        args:
        - *id001
        - !!python/tuple
          - 0
        - !!binary |
          Yg==
        state: !!python/tuple
        - 1
        - !!python/tuple
          - 5
        - *id002
        - false
        - !!binary |
          gJmZmZmZAcAAmpmZmZnpPwCYmZmZmcm/AM3MzMzM/D8AmJmZmZnJvw==
      n_labels: 4
      n_samples: 519
      n_splits: 5
      order: 1
      percentage_per_fold:
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      - 0.2
      random_state: null
      shuffle: false
    n_jobs: 5
    return_estimator: true
    return_train_score: false
    scoring:
      average_precision_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id003 !!python/name:sklearn.metrics._ranking.average_precision_score ''
      average_precision_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      average_precision_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id003
      coverage_error: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.coverage_error ''
      f1_macro: f1_macro
      f1_micro: f1_micro
      f1_samples: f1_samples
      f1_weighted: f1_weighted
      hamming_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: false
        kwargs: {}
        method: predict
        score_func: !!python/name:sklearn.metrics._classification.hamming_loss ''
      jaccard_macro: jaccard_macro
      jaccard_micro: jaccard_micro
      jaccard_samples: jaccard_samples
      jaccard_weighted: jaccard_weighted
      label_ranking_average_precision_score: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_average_precision_score ''
      label_ranking_loss: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.label_ranking_loss ''
      matthews_corrcoef_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: &id004 !!python/name:sklearn.metrics._classification.matthews_corrcoef ''
      matthews_corrcoef_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      matthews_corrcoef_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict
        score_func: *id004
      ndgc: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: null
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: !!python/name:sklearn.metrics._ranking.ndcg_score ''
      precision_macro: precision_macro
      precision_micro: precision_micro
      precision_samples: precision_samples
      precision_weighted: precision_weighted
      recall_macro: recall_macro
      recall_micro: recall_micro
      recall_samples: recall_samples
      recall_weighted: recall_weighted
      roc_auc_macro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: macro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: &id005 !!python/name:sklearn.metrics._ranking.roc_auc_score ''
      roc_auc_micro: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: micro
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_samples: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: samples
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
      roc_auc_weighted: !!python/object:nakano_datasets_v2.estimators.MultiLabelScorer
        average: weighted
        greater_is_better: true
        kwargs: {}
        method: predict_proba
        score_func: *id005
    verbose: 10
dataset:
  call: data_loaders.load_nakano
  name: Gram_positive
  params:
    path: nakano_datasets_v2/datasets/MLC/Gram_positive.csv
directory: nakano_datasets_v2/runs
end: 2023-10-21 18:01:30.498575
estimator:
  call: nakano_datasets_v2.estimators.cascade_tree_embedder_proba
  final_params:
    final_estimator:
      call: deep_forest.estimator_adapters.MultiOutputVotingClassifier
      params:
        estimators:
        - - rf
          - call: sklearn.ensemble._forest.RandomForestClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
        - - xt
          - call: sklearn.ensemble._forest.ExtraTreesClassifier
            params:
              bootstrap: true
              ccp_alpha: 0.0
              class_weight: null
              criterion: gini
              max_depth: null
              max_features: sqrt
              max_leaf_nodes: null
              max_samples: 0.9
              min_impurity_decrease: 0.0
              min_samples_leaf: 5
              min_samples_split: 2
              min_weight_fraction_leaf: 0.0
              n_estimators: 150
              n_jobs: 14
              oob_score: true
              random_state: 0
              verbose: true
              warm_start: false
    inter_level_sampler: null
    keep_original_features: true
    level:
      call: deep_forest.cascade.AlternatingLevel
      params:
        last_output_indices: null
        n_jobs: null
        sparse_threshold: 0.3
        transformer_weights: null
        transformers:
        - - xt
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.ExtraTreesRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.8
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        - - rf
          - call: deep_forest.estimator_adapters.TreeEmbedderWithOutput
            params:
              estimator:
                call: deep_forest.tree_embedder.ForestEmbedder
                params:
                  estimator:
                    call: sklearn.ensemble._forest.RandomForestRegressor
                    params:
                      bootstrap: true
                      ccp_alpha: 0.0
                      criterion: squared_error
                      max_depth: null
                      max_features: sqrt
                      max_leaf_nodes: null
                      max_samples: 0.5
                      min_impurity_decrease: 0.0
                      min_samples_leaf: 5
                      min_samples_split: 2
                      min_weight_fraction_leaf: 0.0
                      n_estimators: 150
                      n_jobs: 14
                      oob_score: false
                      random_state: 0
                      verbose: true
                      warm_start: false
                  max_node_size: 0.95
                  max_pvalue: 1.0
                  method: path
                  node_weights: log_node_size
              method: predict
              post_transformer:
                call: sklearn.pipeline.Pipeline
                params:
                  memory: null
                  steps:
                  - - densifier
                    - call: nakano_datasets_v2.estimators.Densifier
                      params: {}
                  - - pca
                    - call: sklearn.decomposition._pca.PCA
                      params:
                        copy: true
                        iterated_power: auto
                        n_components: 0.8
                        n_oversamples: 10
                        power_iteration_normalizer: auto
                        random_state: 0
                        svd_solver: auto
                        tol: 0.0
                        whiten: false
                  verbose: false
        verbose: false
        verbose_feature_names_out: true
    max_levels: 10
    max_unimproving_levels: null
    memory: estimators_cache
    min_improvement: null
    min_levels: 1
    min_relative_improvement: null
    min_score: 0.0
    random_state: 0
    refit: true
    scoring:
      load: nakano_datasets_v2.estimators.average_precision_micro_oob_scorer
    trim_to_best_score: true
    validation_size: train
    verbose: 10
  name: embedding_proba
  params:
    memory: estimators_cache
hash: 839f32fa590dcb5c830fe82489956a42d32f31dd2a47c02442af10fbae56e5d4
metaestimator: null
path: /home/pedro/mestrado/biomal_repo/scripts/cascade_forests/experiments/nakano_datasets_v2/runs/839f32f_20231021T175924537593_embedding_proba_Gram_positive.yml
results:
  fit_time:
  - 58.80365324020386
  - 59.34920692443848
  - 58.65421175956726
  - 57.3650438785553
  - 64.40131998062134
  score_time:
  - 66.25235342979431
  - 65.96053791046143
  - 61.3695182800293
  - 61.9361572265625
  - 58.895113468170166
  test_average_precision_macro:
  - 0.9787820512820512
  - 0.9394751600758315
  - 0.8861598956482244
  - 0.9104624140712003
  - 0.9099660498446677
  test_average_precision_micro:
  - 0.9964809941822993
  - 0.9871529605838497
  - 0.9773421566760795
  - 0.992767583360488
  - 0.9741398866797214
  test_average_precision_samples:
  - 0.9858490566037735
  - 0.9733009708737864
  - 0.952724358974359
  - 0.9779411764705882
  - 0.9647435897435896
  test_average_precision_weighted:
  - 0.9964925012094822
  - 0.9842824410450424
  - 0.9718631182033954
  - 0.9832190866694883
  - 0.9729760912874327
  test_coverage_error:
  - -1.028301886792453
  - -1.0776699029126213
  - -1.1346153846153846
  - -1.0686274509803921
  - -1.0769230769230769
  test_f1_macro:
  - 0.8330316742081447
  - 0.7110969387755102
  - 0.6840336134453782
  - 0.725174449812131
  - 0.7058229352347
  test_f1_micro:
  - 0.9665071770334929
  - 0.9359605911330049
  - 0.9038461538461539
  - 0.9547738693467336
  - 0.9326923076923077
  test_f1_samples:
  - 0.9528301886792453
  - 0.919093851132686
  - 0.8974358974358976
  - 0.9281045751633987
  - 0.9326923076923077
  test_f1_weighted:
  - 0.9585759412618456
  - 0.9185194270015699
  - 0.8862850800697638
  - 0.9410544637785386
  - 0.9202842908725262
  test_hamming_loss:
  - -0.01650943396226415
  - -0.03155339805825243
  - -0.04807692307692308
  - -0.022058823529411766
  - -0.03365384615384615
  test_jaccard_macro:
  - 0.7796957671957673
  - 0.6776196928635952
  - 0.6309808612440191
  - 0.7022357723577235
  - 0.6682486631016042
  test_jaccard_micro:
  - 0.9351851851851852
  - 0.8796296296296297
  - 0.8245614035087719
  - 0.9134615384615384
  - 0.8738738738738738
  test_jaccard_samples:
  - 0.9528301886792453
  - 0.9174757281553398
  - 0.8942307692307693
  - 0.9264705882352942
  - 0.9326923076923077
  test_jaccard_weighted:
  - 0.9353598881900769
  - 0.8808760683760684
  - 0.8241513947819807
  - 0.9134304207119741
  - 0.8763111888111887
  test_label_ranking_average_precision_score:
  - 0.9858490566037735
  - 0.9733009708737864
  - 0.9527243589743589
  - 0.9779411764705882
  - 0.9647435897435899
  test_label_ranking_loss:
  - 0.009433962264150943
  - 0.022653721682847894
  - 0.03685897435897435
  - 0.0196078431372549
  - 0.02564102564102564
  test_matthews_corrcoef_macro:
  - 0.8501790990045498
  - 0.6957768726480774
  - 0.6561866150427208
  - 0.7149114577749054
  - 0.6878919265936577
  test_matthews_corrcoef_micro:
  - 0.955728946149535
  - 0.9155323465682575
  - 0.8720973361861177
  - 0.9412292683814503
  - 0.9102564102564102
  test_matthews_corrcoef_samples:
  - 0.9465408805031448
  - 0.9052817178238475
  - 0.8700772487664672
  - 0.9239609503515323
  - 0.9102564102564104
  test_matthews_corrcoef_weighted:
  - 0.9551428437980152
  - 0.9003614415530881
  - 0.852031724604388
  - 0.9278327698539607
  - 0.8979517315072173
  test_ndgc:
  - 0.9895546156671168
  - 0.980139762838439
  - 0.9656216667683626
  - 0.9835633903802722
  - 0.9738997934752764
  test_precision_macro:
  - 0.9814814814814815
  - 0.7128571428571429
  - 0.6856935215946844
  - 0.7426470588235294
  - 0.6952686447473937
  test_precision_micro:
  - 0.9805825242718447
  - 0.9595959595959596
  - 0.9215686274509803
  - 0.9895833333333334
  - 0.9326923076923077
  test_precision_samples:
  - 0.9528301886792453
  - 0.9223300970873787
  - 0.9038461538461539
  - 0.9313725490196079
  - 0.9326923076923077
  test_precision_weighted:
  - 0.9825296995108316
  - 0.9242307692307693
  - 0.8860519964896885
  - 0.96087949743004
  - 0.9109246807723151
  test_recall_macro:
  - 0.7982142857142858
  - 0.70982868757259
  - 0.6826190476190476
  - 0.7087833914053426
  - 0.7193417366946778
  test_recall_micro:
  - 0.9528301886792453
  - 0.9134615384615384
  - 0.8867924528301887
  - 0.9223300970873787
  - 0.9326923076923077
  test_recall_samples:
  - 0.9528301886792453
  - 0.9174757281553398
  - 0.8942307692307693
  - 0.9264705882352942
  - 0.9326923076923077
  test_recall_weighted:
  - 0.9528301886792453
  - 0.9134615384615384
  - 0.8867924528301887
  - 0.9223300970873787
  - 0.9326923076923077
  test_roc_auc_macro:
  - 0.9986510530137981
  - 0.9926575443415465
  - 0.9882875372928654
  - 0.9943538478519822
  - 0.9889676999326631
  test_roc_auc_micro:
  - 0.99875400498398
  - 0.9950986513486514
  - 0.9906877662811929
  - 0.9971032946044883
  - 0.9900147928994083
  test_roc_auc_samples:
  - 0.9905660377358491
  - 0.9773462783171522
  - 0.9631410256410257
  - 0.9803921568627451
  - 0.9743589743589745
  test_roc_auc_weighted:
  - 0.9996985516778341
  - 0.9961867463969162
  - 0.9932748992769423
  - 0.9959772392028587
  - 0.987093596541684
start: 2023-10-21 17:59:24.537593
wrapper: null
